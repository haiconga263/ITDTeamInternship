//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TollManagement.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HPEEntities : DbContext
    {
        public HPEEntities()
            : base("name=HPEEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<IN_CheckSmartCard> IN_CheckSmartCard { get; set; }
    
        public virtual ObjectResult<sp_LS_Shift_GetAll_Result> sp_LS_Shift_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_Shift_GetAll_Result>("sp_LS_Shift_GetAll");
        }
    
        public virtual ObjectResult<sp_LS_Shift_GetByID_Result> sp_LS_Shift_GetByID(Nullable<int> shifID)
        {
            var shifIDParameter = shifID.HasValue ?
                new ObjectParameter("ShifID", shifID) :
                new ObjectParameter("ShifID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_Shift_GetByID_Result>("sp_LS_Shift_GetByID", shifIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Shift_GetCurrentShift_ByTime(Nullable<System.TimeSpan> time)
        {
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Shift_GetCurrentShift_ByTime", timeParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_TollManagement_Result> cts_supervision_sp_rpt_TollManagement(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> station, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_TollManagement_Result>("cts_supervision_sp_rpt_TollManagement", checkTimeParameter, fromDateParameter, toDateParameter, stationParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter);
        }
    
        public virtual ObjectResult<sp_LS_Station_GetAll_Result> sp_LS_Station_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_Station_GetAll_Result>("sp_LS_Station_GetAll");
        }
    
        public virtual ObjectResult<sp_LS_Lane_Devices_GetInformation_Result> sp_LS_Lane_Devices_GetInformation(string lane_code)
        {
            var lane_codeParameter = lane_code != null ?
                new ObjectParameter("lane_code", lane_code) :
                new ObjectParameter("lane_code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_Lane_Devices_GetInformation_Result>("sp_LS_Lane_Devices_GetInformation", lane_codeParameter);
        }
    
        public virtual ObjectResult<sp_LS_Lane_Station_GetInformation_Result> sp_LS_Lane_Station_GetInformation(string id_Station)
        {
            var id_StationParameter = id_Station != null ?
                new ObjectParameter("id_Station", id_Station) :
                new ObjectParameter("id_Station", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_Lane_Station_GetInformation_Result>("sp_LS_Lane_Station_GetInformation", id_StationParameter);
        }
    
        public virtual ObjectResult<sp_GetInLane_Result> sp_GetInLane()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetInLane_Result>("sp_GetInLane");
        }
    
        public virtual ObjectResult<sp_GetOutLane_Result> sp_GetOutLane()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetOutLane_Result>("sp_GetOutLane");
        }
    
        public virtual ObjectResult<sp_ToolManagement_GetAllOutCheck_NoEntryInfo_Result> sp_ToolManagement_GetAllOutCheck_NoEntryInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ToolManagement_GetAllOutCheck_NoEntryInfo_Result>("sp_ToolManagement_GetAllOutCheck_NoEntryInfo");
        }
    
        public virtual ObjectResult<sp_ToolManagement_GetAllOutCheck_UnPrecheck_Result> sp_ToolManagement_GetAllOutCheck_UnPrecheck()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ToolManagement_GetAllOutCheck_UnPrecheck_Result>("sp_ToolManagement_GetAllOutCheck_UnPrecheck");
        }
    
        public virtual int sp_ToolManagement_UpdatePrecheckStatus(string transactionID, Nullable<int> vehicleTypeID, string encodePlate)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var encodePlateParameter = encodePlate != null ?
                new ObjectParameter("EncodePlate", encodePlate) :
                new ObjectParameter("EncodePlate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ToolManagement_UpdatePrecheckStatus", transactionIDParameter, vehicleTypeIDParameter, encodePlateParameter);
        }
    
        public virtual int sp_ToolManagement_GetAllOutCheck_UpdateEntryInfo(string outTransactionID, string entryTransactionID, Nullable<int> entryLaneID, string entryRecogPlateNumber)
        {
            var outTransactionIDParameter = outTransactionID != null ?
                new ObjectParameter("OutTransactionID", outTransactionID) :
                new ObjectParameter("OutTransactionID", typeof(string));
    
            var entryTransactionIDParameter = entryTransactionID != null ?
                new ObjectParameter("EntryTransactionID", entryTransactionID) :
                new ObjectParameter("EntryTransactionID", typeof(string));
    
            var entryLaneIDParameter = entryLaneID.HasValue ?
                new ObjectParameter("EntryLaneID", entryLaneID) :
                new ObjectParameter("EntryLaneID", typeof(int));
    
            var entryRecogPlateNumberParameter = entryRecogPlateNumber != null ?
                new ObjectParameter("EntryRecogPlateNumber", entryRecogPlateNumber) :
                new ObjectParameter("EntryRecogPlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ToolManagement_GetAllOutCheck_UpdateEntryInfo", outTransactionIDParameter, entryTransactionIDParameter, entryLaneIDParameter, entryRecogPlateNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ToolManagement_UpdatePrecheck_CountRowEffect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ToolManagement_UpdatePrecheck_CountRowEffect");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ToolManagement_UpdateEntryInfo_CountRowEffect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ToolManagement_UpdateEntryInfo_CountRowEffect");
        }
    
        public virtual ObjectResult<sp_ToolManagement_GetTrafficVolume_Result> sp_ToolManagement_GetTrafficVolume(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ToolManagement_GetTrafficVolume_Result>("sp_ToolManagement_GetTrafficVolume", fromDateParameter, toDateParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<sp_ToolManagement_GetDeviceStatus_Result> sp_ToolManagement_GetDeviceStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ToolManagement_GetDeviceStatus_Result>("sp_ToolManagement_GetDeviceStatus");
        }
    
        public virtual ObjectResult<sp_LS_Lane_GetAll_Result> sp_LS_Lane_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_Lane_GetAll_Result>("sp_LS_Lane_GetAll");
        }
    
        public virtual int sp_ToolManagement_InsertDeviceStatus(string laneCode, Nullable<System.DateTime> collectDate, string status)
        {
            var laneCodeParameter = laneCode != null ?
                new ObjectParameter("LaneCode", laneCode) :
                new ObjectParameter("LaneCode", typeof(string));
    
            var collectDateParameter = collectDate.HasValue ?
                new ObjectParameter("CollectDate", collectDate) :
                new ObjectParameter("CollectDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ToolManagement_InsertDeviceStatus", laneCodeParameter, collectDateParameter, statusParameter);
        }
    
        public virtual ObjectResult<sp_LS_Lane_GetAll1_Result> sp_LS_Lane_GetAll1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_Lane_GetAll1_Result>("sp_LS_Lane_GetAll1");
        }
    
        public virtual int sp_ToolManagement_InsertTrafficVolume(Nullable<System.DateTime> regDate, Nullable<System.DateTime> collectDate, string tollGateID, string laneID, Nullable<decimal> vol)
        {
            var regDateParameter = regDate.HasValue ?
                new ObjectParameter("RegDate", regDate) :
                new ObjectParameter("RegDate", typeof(System.DateTime));
    
            var collectDateParameter = collectDate.HasValue ?
                new ObjectParameter("CollectDate", collectDate) :
                new ObjectParameter("CollectDate", typeof(System.DateTime));
    
            var tollGateIDParameter = tollGateID != null ?
                new ObjectParameter("TollGateID", tollGateID) :
                new ObjectParameter("TollGateID", typeof(string));
    
            var laneIDParameter = laneID != null ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(string));
    
            var volParameter = vol.HasValue ?
                new ObjectParameter("Vol", vol) :
                new ObjectParameter("Vol", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ToolManagement_InsertTrafficVolume", regDateParameter, collectDateParameter, tollGateIDParameter, laneIDParameter, volParameter);
        }
    
        public virtual ObjectResult<sp_CMO_DASHBOARD_Result> sp_CMO_DASHBOARD(Nullable<int> stationID)
        {
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CMO_DASHBOARD_Result>("sp_CMO_DASHBOARD", stationIDParameter);
        }
    }
}
