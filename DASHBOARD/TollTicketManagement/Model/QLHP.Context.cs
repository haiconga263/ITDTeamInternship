//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TollTicketManagement.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HPEEntitiesNew : DbContext
    {
        public HPEEntitiesNew()
            : base("name=HPEEntitiesNew")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AC_ActiveSmartCard> AC_ActiveSmartCard { get; set; }
        public virtual DbSet<AC_ActiveTicket> AC_ActiveTicket { get; set; }
        public virtual DbSet<AC_CollectionNote> AC_CollectionNote { get; set; }
        public virtual DbSet<AC_CollectionNoteDetails> AC_CollectionNoteDetails { get; set; }
        public virtual DbSet<AC_CollectionReason> AC_CollectionReason { get; set; }
        public virtual DbSet<AC_ExportProduct> AC_ExportProduct { get; set; }
        public virtual DbSet<AC_ExportProductDetail> AC_ExportProductDetail { get; set; }
        public virtual DbSet<AC_ExportProductDetailHistory> AC_ExportProductDetailHistory { get; set; }
        public virtual DbSet<AC_ExportProductHistory> AC_ExportProductHistory { get; set; }
        public virtual DbSet<AC_ExportTicket> AC_ExportTicket { get; set; }
        public virtual DbSet<AC_ExportTicketDetail> AC_ExportTicketDetail { get; set; }
        public virtual DbSet<AC_ExportTicketDetailHistory> AC_ExportTicketDetailHistory { get; set; }
        public virtual DbSet<AC_ExportTicketHistory> AC_ExportTicketHistory { get; set; }
        public virtual DbSet<AC_ImportProduct> AC_ImportProduct { get; set; }
        public virtual DbSet<AC_ImportProductDetail> AC_ImportProductDetail { get; set; }
        public virtual DbSet<AC_ImportProductDetailHistory> AC_ImportProductDetailHistory { get; set; }
        public virtual DbSet<AC_ImportProductFromCenter> AC_ImportProductFromCenter { get; set; }
        public virtual DbSet<AC_ImportProductFromCenterDetail> AC_ImportProductFromCenterDetail { get; set; }
        public virtual DbSet<AC_ImportProductFromStation> AC_ImportProductFromStation { get; set; }
        public virtual DbSet<AC_ImportProductFromStationDetail> AC_ImportProductFromStationDetail { get; set; }
        public virtual DbSet<AC_ImportProductHistory> AC_ImportProductHistory { get; set; }
        public virtual DbSet<AC_ImportTicket> AC_ImportTicket { get; set; }
        public virtual DbSet<AC_ImportTicketDetail> AC_ImportTicketDetail { get; set; }
        public virtual DbSet<AC_ImportTicketDetailHistory> AC_ImportTicketDetailHistory { get; set; }
        public virtual DbSet<AC_ImportTicketHistory> AC_ImportTicketHistory { get; set; }
        public virtual DbSet<AC_InActiveReason> AC_InActiveReason { get; set; }
        public virtual DbSet<AC_InStatisticProductDetail> AC_InStatisticProductDetail { get; set; }
        public virtual DbSet<AC_InStatisticProductDetailHistory> AC_InStatisticProductDetailHistory { get; set; }
        public virtual DbSet<AC_InStatisticProductSerialDetail> AC_InStatisticProductSerialDetail { get; set; }
        public virtual DbSet<AC_InStatisticProductSerialDetailHistory> AC_InStatisticProductSerialDetailHistory { get; set; }
        public virtual DbSet<AC_InStatisticTicketDetail> AC_InStatisticTicketDetail { get; set; }
        public virtual DbSet<AC_InStatisticTicketDetailHistory> AC_InStatisticTicketDetailHistory { get; set; }
        public virtual DbSet<AC_InStatisticTicketSerialDetail> AC_InStatisticTicketSerialDetail { get; set; }
        public virtual DbSet<AC_InStatisticTicketSerialDetailHistory> AC_InStatisticTicketSerialDetailHistory { get; set; }
        public virtual DbSet<AC_InStockProduct> AC_InStockProduct { get; set; }
        public virtual DbSet<AC_InStockProductDetail> AC_InStockProductDetail { get; set; }
        public virtual DbSet<AC_InStockProductDetailTemp> AC_InStockProductDetailTemp { get; set; }
        public virtual DbSet<AC_InStockProductSerialDetail> AC_InStockProductSerialDetail { get; set; }
        public virtual DbSet<AC_InStockProductSerialDetailTemp> AC_InStockProductSerialDetailTemp { get; set; }
        public virtual DbSet<AC_InStockProductTemp> AC_InStockProductTemp { get; set; }
        public virtual DbSet<AC_InStockTicket> AC_InStockTicket { get; set; }
        public virtual DbSet<AC_InStockTicketDetail> AC_InStockTicketDetail { get; set; }
        public virtual DbSet<AC_InStockTicketDetailTemp> AC_InStockTicketDetailTemp { get; set; }
        public virtual DbSet<AC_InStockTicketSerialDetail> AC_InStockTicketSerialDetail { get; set; }
        public virtual DbSet<AC_InStockTicketSerialDetailTemp> AC_InStockTicketSerialDetailTemp { get; set; }
        public virtual DbSet<AC_InStockTicketTemp> AC_InStockTicketTemp { get; set; }
        public virtual DbSet<AC_Inventory> AC_Inventory { get; set; }
        public virtual DbSet<AC_ObuAccount> AC_ObuAccount { get; set; }
        public virtual DbSet<AC_ObuTwoPiece> AC_ObuTwoPiece { get; set; }
        public virtual DbSet<AC_OutStatisticProductDetail> AC_OutStatisticProductDetail { get; set; }
        public virtual DbSet<AC_OutStatisticProductDetailHistory> AC_OutStatisticProductDetailHistory { get; set; }
        public virtual DbSet<AC_OutStatisticTicketDetail> AC_OutStatisticTicketDetail { get; set; }
        public virtual DbSet<AC_OutStatisticTicketDetailHistory> AC_OutStatisticTicketDetailHistory { get; set; }
        public virtual DbSet<AC_PeriodObuAccount> AC_PeriodObuAccount { get; set; }
        public virtual DbSet<AC_PeriodObuAccountDetail> AC_PeriodObuAccountDetail { get; set; }
        public virtual DbSet<AC_PeriodSmartCardAccount> AC_PeriodSmartCardAccount { get; set; }
        public virtual DbSet<AC_PeriodTicket> AC_PeriodTicket { get; set; }
        public virtual DbSet<AC_PeriodTicketDetail> AC_PeriodTicketDetail { get; set; }
        public virtual DbSet<AC_PPCAccount> AC_PPCAccount { get; set; }
        public virtual DbSet<AC_PPCWhiteList> AC_PPCWhiteList { get; set; }
        public virtual DbSet<AC_SmartCardAcount> AC_SmartCardAcount { get; set; }
        public virtual DbSet<AC_StatisticCardIn> AC_StatisticCardIn { get; set; }
        public virtual DbSet<AC_StatisticCardInDetail> AC_StatisticCardInDetail { get; set; }
        public virtual DbSet<AC_StatisticCardOut> AC_StatisticCardOut { get; set; }
        public virtual DbSet<AC_StatisticCardOutDetail> AC_StatisticCardOutDetail { get; set; }
        public virtual DbSet<AC_StatisticInventory> AC_StatisticInventory { get; set; }
        public virtual DbSet<AC_StatisticProduct> AC_StatisticProduct { get; set; }
        public virtual DbSet<AC_StatisticProductDetails> AC_StatisticProductDetails { get; set; }
        public virtual DbSet<AC_StatisticProductHistory> AC_StatisticProductHistory { get; set; }
        public virtual DbSet<AC_StatisticTicket> AC_StatisticTicket { get; set; }
        public virtual DbSet<AC_StatisticTicketHistory> AC_StatisticTicketHistory { get; set; }
        public virtual DbSet<AC_TollWhiteList> AC_TollWhiteList { get; set; }
        public virtual DbSet<DataSyncTemp> DataSyncTemps { get; set; }
        public virtual DbSet<DataSyncTempCMO> DataSyncTempCMOes { get; set; }
        public virtual DbSet<DataSyncTempCMO1> DataSyncTempCMO1 { get; set; }
        public virtual DbSet<DataSyncTempCMO2> DataSyncTempCMO2 { get; set; }
        public virtual DbSet<DataSyncTempCMO3> DataSyncTempCMO3 { get; set; }
        public virtual DbSet<DataSyncTempCMO4> DataSyncTempCMO4 { get; set; }
        public virtual DbSet<DataSyncTempCMO5> DataSyncTempCMO5 { get; set; }
        public virtual DbSet<DataSyncTempCMO6> DataSyncTempCMO6 { get; set; }
        public virtual DbSet<IN_CheckBtc> IN_CheckBtc { get; set; }
        public virtual DbSet<IN_CheckForceOpen> IN_CheckForceOpen { get; set; }
        public virtual DbSet<IN_CheckForceOpenGroup> IN_CheckForceOpenGroup { get; set; }
        public virtual DbSet<IN_CheckForceOpenGroupDetail> IN_CheckForceOpenGroupDetail { get; set; }
        public virtual DbSet<IN_CheckForceOpenSmartCard> IN_CheckForceOpenSmartCard { get; set; }
        public virtual DbSet<IN_CheckObu> IN_CheckObu { get; set; }
        public virtual DbSet<IN_CheckObuSmartCard> IN_CheckObuSmartCard { get; set; }
        public virtual DbSet<IN_CheckPeriodObu> IN_CheckPeriodObu { get; set; }
        public virtual DbSet<IN_CheckPeriodSmartCard> IN_CheckPeriodSmartCard { get; set; }
        public virtual DbSet<IN_CheckPeriodTicket> IN_CheckPeriodTicket { get; set; }
        public virtual DbSet<IN_CheckPrepaidCard> IN_CheckPrepaidCard { get; set; }
        public virtual DbSet<IN_CheckSmartCard> IN_CheckSmartCard { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150901> IN_CheckSmartCard_150901 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150902> IN_CheckSmartCard_150902 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150903> IN_CheckSmartCard_150903 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150904> IN_CheckSmartCard_150904 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150905> IN_CheckSmartCard_150905 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150906> IN_CheckSmartCard_150906 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150907> IN_CheckSmartCard_150907 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150908> IN_CheckSmartCard_150908 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150909> IN_CheckSmartCard_150909 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150910> IN_CheckSmartCard_150910 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150911> IN_CheckSmartCard_150911 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150912> IN_CheckSmartCard_150912 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150913> IN_CheckSmartCard_150913 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150914> IN_CheckSmartCard_150914 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150915> IN_CheckSmartCard_150915 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150916> IN_CheckSmartCard_150916 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150917> IN_CheckSmartCard_150917 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150918> IN_CheckSmartCard_150918 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150919> IN_CheckSmartCard_150919 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150920> IN_CheckSmartCard_150920 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150921> IN_CheckSmartCard_150921 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150922> IN_CheckSmartCard_150922 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150923> IN_CheckSmartCard_150923 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150924> IN_CheckSmartCard_150924 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150925> IN_CheckSmartCard_150925 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150926> IN_CheckSmartCard_150926 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150927> IN_CheckSmartCard_150927 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150928> IN_CheckSmartCard_150928 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150929> IN_CheckSmartCard_150929 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_150930> IN_CheckSmartCard_150930 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151001> IN_CheckSmartCard_151001 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151002> IN_CheckSmartCard_151002 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151003> IN_CheckSmartCard_151003 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151004> IN_CheckSmartCard_151004 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151005> IN_CheckSmartCard_151005 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151006> IN_CheckSmartCard_151006 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151007> IN_CheckSmartCard_151007 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151008> IN_CheckSmartCard_151008 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151009> IN_CheckSmartCard_151009 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151010> IN_CheckSmartCard_151010 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151011> IN_CheckSmartCard_151011 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151012> IN_CheckSmartCard_151012 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151013> IN_CheckSmartCard_151013 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151014> IN_CheckSmartCard_151014 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151015> IN_CheckSmartCard_151015 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151016> IN_CheckSmartCard_151016 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151017> IN_CheckSmartCard_151017 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151018> IN_CheckSmartCard_151018 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151019> IN_CheckSmartCard_151019 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151020> IN_CheckSmartCard_151020 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151021> IN_CheckSmartCard_151021 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151022> IN_CheckSmartCard_151022 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151023> IN_CheckSmartCard_151023 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151024> IN_CheckSmartCard_151024 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151025> IN_CheckSmartCard_151025 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151026> IN_CheckSmartCard_151026 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151027> IN_CheckSmartCard_151027 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151028> IN_CheckSmartCard_151028 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151029> IN_CheckSmartCard_151029 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151030> IN_CheckSmartCard_151030 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151031> IN_CheckSmartCard_151031 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151101> IN_CheckSmartCard_151101 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151102> IN_CheckSmartCard_151102 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151103> IN_CheckSmartCard_151103 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151104> IN_CheckSmartCard_151104 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151105> IN_CheckSmartCard_151105 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151106> IN_CheckSmartCard_151106 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151107> IN_CheckSmartCard_151107 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151108> IN_CheckSmartCard_151108 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151109> IN_CheckSmartCard_151109 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151110> IN_CheckSmartCard_151110 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151111> IN_CheckSmartCard_151111 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151112> IN_CheckSmartCard_151112 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151113> IN_CheckSmartCard_151113 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151114> IN_CheckSmartCard_151114 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151115> IN_CheckSmartCard_151115 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151116> IN_CheckSmartCard_151116 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151117> IN_CheckSmartCard_151117 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151118> IN_CheckSmartCard_151118 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151119> IN_CheckSmartCard_151119 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151120> IN_CheckSmartCard_151120 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151121> IN_CheckSmartCard_151121 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151122> IN_CheckSmartCard_151122 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151123> IN_CheckSmartCard_151123 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151124> IN_CheckSmartCard_151124 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151125> IN_CheckSmartCard_151125 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151126> IN_CheckSmartCard_151126 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151127> IN_CheckSmartCard_151127 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151128> IN_CheckSmartCard_151128 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151129> IN_CheckSmartCard_151129 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151130> IN_CheckSmartCard_151130 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151201> IN_CheckSmartCard_151201 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151202> IN_CheckSmartCard_151202 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151203> IN_CheckSmartCard_151203 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151204> IN_CheckSmartCard_151204 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151205> IN_CheckSmartCard_151205 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151206> IN_CheckSmartCard_151206 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151207> IN_CheckSmartCard_151207 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151208> IN_CheckSmartCard_151208 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151209> IN_CheckSmartCard_151209 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151210> IN_CheckSmartCard_151210 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151211> IN_CheckSmartCard_151211 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151212> IN_CheckSmartCard_151212 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151213> IN_CheckSmartCard_151213 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151214> IN_CheckSmartCard_151214 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151215> IN_CheckSmartCard_151215 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151216> IN_CheckSmartCard_151216 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151217> IN_CheckSmartCard_151217 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151218> IN_CheckSmartCard_151218 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151219> IN_CheckSmartCard_151219 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151220> IN_CheckSmartCard_151220 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151221> IN_CheckSmartCard_151221 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151222> IN_CheckSmartCard_151222 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151223> IN_CheckSmartCard_151223 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151224> IN_CheckSmartCard_151224 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151225> IN_CheckSmartCard_151225 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151226> IN_CheckSmartCard_151226 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151227> IN_CheckSmartCard_151227 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151228> IN_CheckSmartCard_151228 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151229> IN_CheckSmartCard_151229 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151230> IN_CheckSmartCard_151230 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_151231> IN_CheckSmartCard_151231 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160101> IN_CheckSmartCard_160101 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160102> IN_CheckSmartCard_160102 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160103> IN_CheckSmartCard_160103 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160104> IN_CheckSmartCard_160104 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160105> IN_CheckSmartCard_160105 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160106> IN_CheckSmartCard_160106 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160107> IN_CheckSmartCard_160107 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160108> IN_CheckSmartCard_160108 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160109> IN_CheckSmartCard_160109 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160110> IN_CheckSmartCard_160110 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160111> IN_CheckSmartCard_160111 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160112> IN_CheckSmartCard_160112 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160113> IN_CheckSmartCard_160113 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160114> IN_CheckSmartCard_160114 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160115> IN_CheckSmartCard_160115 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160116> IN_CheckSmartCard_160116 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160117> IN_CheckSmartCard_160117 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160118> IN_CheckSmartCard_160118 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160119> IN_CheckSmartCard_160119 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160120> IN_CheckSmartCard_160120 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160121> IN_CheckSmartCard_160121 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160122> IN_CheckSmartCard_160122 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160123> IN_CheckSmartCard_160123 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160124> IN_CheckSmartCard_160124 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160125> IN_CheckSmartCard_160125 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160126> IN_CheckSmartCard_160126 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160127> IN_CheckSmartCard_160127 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160128> IN_CheckSmartCard_160128 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160129> IN_CheckSmartCard_160129 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160130> IN_CheckSmartCard_160130 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160131> IN_CheckSmartCard_160131 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160201> IN_CheckSmartCard_160201 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160202> IN_CheckSmartCard_160202 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160203> IN_CheckSmartCard_160203 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160204> IN_CheckSmartCard_160204 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160205> IN_CheckSmartCard_160205 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160206> IN_CheckSmartCard_160206 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160207> IN_CheckSmartCard_160207 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160208> IN_CheckSmartCard_160208 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160209> IN_CheckSmartCard_160209 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160210> IN_CheckSmartCard_160210 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160211> IN_CheckSmartCard_160211 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160212> IN_CheckSmartCard_160212 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160213> IN_CheckSmartCard_160213 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160214> IN_CheckSmartCard_160214 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160215> IN_CheckSmartCard_160215 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160216> IN_CheckSmartCard_160216 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160217> IN_CheckSmartCard_160217 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160218> IN_CheckSmartCard_160218 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160219> IN_CheckSmartCard_160219 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160220> IN_CheckSmartCard_160220 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160221> IN_CheckSmartCard_160221 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160222> IN_CheckSmartCard_160222 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160223> IN_CheckSmartCard_160223 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160224> IN_CheckSmartCard_160224 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160225> IN_CheckSmartCard_160225 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160226> IN_CheckSmartCard_160226 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160227> IN_CheckSmartCard_160227 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160228> IN_CheckSmartCard_160228 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160229> IN_CheckSmartCard_160229 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160301> IN_CheckSmartCard_160301 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160302> IN_CheckSmartCard_160302 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160303> IN_CheckSmartCard_160303 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160304> IN_CheckSmartCard_160304 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160305> IN_CheckSmartCard_160305 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160306> IN_CheckSmartCard_160306 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160307> IN_CheckSmartCard_160307 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160308> IN_CheckSmartCard_160308 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160309> IN_CheckSmartCard_160309 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160310> IN_CheckSmartCard_160310 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160311> IN_CheckSmartCard_160311 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160312> IN_CheckSmartCard_160312 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160313> IN_CheckSmartCard_160313 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160314> IN_CheckSmartCard_160314 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160315> IN_CheckSmartCard_160315 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160316> IN_CheckSmartCard_160316 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160317> IN_CheckSmartCard_160317 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160318> IN_CheckSmartCard_160318 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160319> IN_CheckSmartCard_160319 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160320> IN_CheckSmartCard_160320 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160321> IN_CheckSmartCard_160321 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160322> IN_CheckSmartCard_160322 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160323> IN_CheckSmartCard_160323 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160324> IN_CheckSmartCard_160324 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160325> IN_CheckSmartCard_160325 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160326> IN_CheckSmartCard_160326 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160327> IN_CheckSmartCard_160327 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160328> IN_CheckSmartCard_160328 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160329> IN_CheckSmartCard_160329 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160330> IN_CheckSmartCard_160330 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160331> IN_CheckSmartCard_160331 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160401> IN_CheckSmartCard_160401 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160402> IN_CheckSmartCard_160402 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160403> IN_CheckSmartCard_160403 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160404> IN_CheckSmartCard_160404 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160405> IN_CheckSmartCard_160405 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160406> IN_CheckSmartCard_160406 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160407> IN_CheckSmartCard_160407 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160408> IN_CheckSmartCard_160408 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160409> IN_CheckSmartCard_160409 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160410> IN_CheckSmartCard_160410 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160411> IN_CheckSmartCard_160411 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160412> IN_CheckSmartCard_160412 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160413> IN_CheckSmartCard_160413 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160414> IN_CheckSmartCard_160414 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160415> IN_CheckSmartCard_160415 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160416> IN_CheckSmartCard_160416 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160417> IN_CheckSmartCard_160417 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160418> IN_CheckSmartCard_160418 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160419> IN_CheckSmartCard_160419 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160420> IN_CheckSmartCard_160420 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160421> IN_CheckSmartCard_160421 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160422> IN_CheckSmartCard_160422 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160423> IN_CheckSmartCard_160423 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160424> IN_CheckSmartCard_160424 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160425> IN_CheckSmartCard_160425 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160426> IN_CheckSmartCard_160426 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_160427> IN_CheckSmartCard_160427 { get; set; }
        public virtual DbSet<IN_CheckTicket> IN_CheckTicket { get; set; }
        public virtual DbSet<LS_Area> LS_Area { get; set; }
        public virtual DbSet<LS_AxleType> LS_AxleType { get; set; }
        public virtual DbSet<LS_Card> LS_Card { get; set; }
        public virtual DbSet<LS_CardSpecial> LS_CardSpecial { get; set; }
        public virtual DbSet<LS_Category> LS_Category { get; set; }
        public virtual DbSet<LS_Company> LS_Company { get; set; }
        public virtual DbSet<LS_Connection> LS_Connection { get; set; }
        public virtual DbSet<LS_Constant> LS_Constant { get; set; }
        public virtual DbSet<LS_Currency> LS_Currency { get; set; }
        public virtual DbSet<LS_Customer> LS_Customer { get; set; }
        public virtual DbSet<LS_Employee> LS_Employee { get; set; }
        public virtual DbSet<LS_Error> LS_Error { get; set; }
        public virtual DbSet<LS_ExportType> LS_ExportType { get; set; }
        public virtual DbSet<LS_ImportType> LS_ImportType { get; set; }
        public virtual DbSet<LS_InActiveReason> LS_InActiveReason { get; set; }
        public virtual DbSet<LS_Item> LS_Item { get; set; }
        public virtual DbSet<LS_Lane> LS_Lane { get; set; }
        public virtual DbSet<LS_ListTable> LS_ListTable { get; set; }
        public virtual DbSet<LS_Norm> LS_Norm { get; set; }
        public virtual DbSet<LS_OBUType> LS_OBUType { get; set; }
        public virtual DbSet<LS_Position> LS_Position { get; set; }
        public virtual DbSet<LS_PriceProduct> LS_PriceProduct { get; set; }
        public virtual DbSet<LS_ProductCategory> LS_ProductCategory { get; set; }
        public virtual DbSet<LS_ProductFee> LS_ProductFee { get; set; }
        public virtual DbSet<LS_ProductType> LS_ProductType { get; set; }
        public virtual DbSet<LS_Report> LS_Report { get; set; }
        public virtual DbSet<LS_Route> LS_Route { get; set; }
        public virtual DbSet<LS_Shift> LS_Shift { get; set; }
        public virtual DbSet<LS_Station> LS_Station { get; set; }
        public virtual DbSet<LS_Stock> LS_Stock { get; set; }
        public virtual DbSet<LS_StockType> LS_StockType { get; set; }
        public virtual DbSet<LS_SupervisionType> LS_SupervisionType { get; set; }
        public virtual DbSet<LS_Team> LS_Team { get; set; }
        public virtual DbSet<LS_TeamStation> LS_TeamStation { get; set; }
        public virtual DbSet<LS_TicketCategory> LS_TicketCategory { get; set; }
        public virtual DbSet<LS_TicketCategoryListFee> LS_TicketCategoryListFee { get; set; }
        public virtual DbSet<LS_TicketType> LS_TicketType { get; set; }
        public virtual DbSet<LS_Unit> LS_Unit { get; set; }
        public virtual DbSet<LS_UserMapping> LS_UserMapping { get; set; }
        public virtual DbSet<LS_VehicleType> LS_VehicleType { get; set; }
        public virtual DbSet<LS_Vendor> LS_Vendor { get; set; }
        public virtual DbSet<OUT_CheckBtc> OUT_CheckBtc { get; set; }
        public virtual DbSet<OUT_CheckForceOpen> OUT_CheckForceOpen { get; set; }
        public virtual DbSet<OUT_CheckForceOpenGroup> OUT_CheckForceOpenGroup { get; set; }
        public virtual DbSet<OUT_CheckForceOpenGroupDetail> OUT_CheckForceOpenGroupDetail { get; set; }
        public virtual DbSet<OUT_CheckObu> OUT_CheckObu { get; set; }
        public virtual DbSet<OUT_CheckObuSmartCard> OUT_CheckObuSmartCard { get; set; }
        public virtual DbSet<OUT_CheckPeriodObu> OUT_CheckPeriodObu { get; set; }
        public virtual DbSet<OUT_CheckPeriodSmartCard> OUT_CheckPeriodSmartCard { get; set; }
        public virtual DbSet<OUT_CheckPeriodTicket> OUT_CheckPeriodTicket { get; set; }
        public virtual DbSet<OUT_CheckPrepaidCard> OUT_CheckPrepaidCard { get; set; }
        public virtual DbSet<OUT_CheckSmartCard> OUT_CheckSmartCard { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150901> OUT_CheckSmartCard_150901 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150902> OUT_CheckSmartCard_150902 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150903> OUT_CheckSmartCard_150903 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150904> OUT_CheckSmartCard_150904 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150905> OUT_CheckSmartCard_150905 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150906> OUT_CheckSmartCard_150906 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150907> OUT_CheckSmartCard_150907 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150908> OUT_CheckSmartCard_150908 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150909> OUT_CheckSmartCard_150909 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150910> OUT_CheckSmartCard_150910 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150911> OUT_CheckSmartCard_150911 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150912> OUT_CheckSmartCard_150912 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150913> OUT_CheckSmartCard_150913 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150914> OUT_CheckSmartCard_150914 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150915> OUT_CheckSmartCard_150915 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150916> OUT_CheckSmartCard_150916 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150917> OUT_CheckSmartCard_150917 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150918> OUT_CheckSmartCard_150918 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150919> OUT_CheckSmartCard_150919 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150920> OUT_CheckSmartCard_150920 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150921> OUT_CheckSmartCard_150921 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150922> OUT_CheckSmartCard_150922 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150923> OUT_CheckSmartCard_150923 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150924> OUT_CheckSmartCard_150924 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150925> OUT_CheckSmartCard_150925 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150926> OUT_CheckSmartCard_150926 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150927> OUT_CheckSmartCard_150927 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150928> OUT_CheckSmartCard_150928 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150929> OUT_CheckSmartCard_150929 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_150930> OUT_CheckSmartCard_150930 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151001> OUT_CheckSmartCard_151001 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151002> OUT_CheckSmartCard_151002 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151003> OUT_CheckSmartCard_151003 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151004> OUT_CheckSmartCard_151004 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151005> OUT_CheckSmartCard_151005 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151006> OUT_CheckSmartCard_151006 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151007> OUT_CheckSmartCard_151007 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151008> OUT_CheckSmartCard_151008 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151009> OUT_CheckSmartCard_151009 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151010> OUT_CheckSmartCard_151010 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151011> OUT_CheckSmartCard_151011 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151012> OUT_CheckSmartCard_151012 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151013> OUT_CheckSmartCard_151013 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151014> OUT_CheckSmartCard_151014 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151015> OUT_CheckSmartCard_151015 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151016> OUT_CheckSmartCard_151016 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151017> OUT_CheckSmartCard_151017 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151018> OUT_CheckSmartCard_151018 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151019> OUT_CheckSmartCard_151019 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151020> OUT_CheckSmartCard_151020 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151021> OUT_CheckSmartCard_151021 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151022> OUT_CheckSmartCard_151022 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151023> OUT_CheckSmartCard_151023 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151024> OUT_CheckSmartCard_151024 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151025> OUT_CheckSmartCard_151025 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151026> OUT_CheckSmartCard_151026 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151027> OUT_CheckSmartCard_151027 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151028> OUT_CheckSmartCard_151028 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151029> OUT_CheckSmartCard_151029 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151030> OUT_CheckSmartCard_151030 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151031> OUT_CheckSmartCard_151031 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151101> OUT_CheckSmartCard_151101 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151102> OUT_CheckSmartCard_151102 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151103> OUT_CheckSmartCard_151103 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151104> OUT_CheckSmartCard_151104 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151105> OUT_CheckSmartCard_151105 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151106> OUT_CheckSmartCard_151106 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151107> OUT_CheckSmartCard_151107 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151108> OUT_CheckSmartCard_151108 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151109> OUT_CheckSmartCard_151109 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151110> OUT_CheckSmartCard_151110 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151111> OUT_CheckSmartCard_151111 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151112> OUT_CheckSmartCard_151112 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151113> OUT_CheckSmartCard_151113 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151114> OUT_CheckSmartCard_151114 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151115> OUT_CheckSmartCard_151115 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151116> OUT_CheckSmartCard_151116 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151117> OUT_CheckSmartCard_151117 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151118> OUT_CheckSmartCard_151118 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151119> OUT_CheckSmartCard_151119 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151120> OUT_CheckSmartCard_151120 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151121> OUT_CheckSmartCard_151121 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151122> OUT_CheckSmartCard_151122 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151123> OUT_CheckSmartCard_151123 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151124> OUT_CheckSmartCard_151124 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151125> OUT_CheckSmartCard_151125 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151126> OUT_CheckSmartCard_151126 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151127> OUT_CheckSmartCard_151127 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151128> OUT_CheckSmartCard_151128 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151129> OUT_CheckSmartCard_151129 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151130> OUT_CheckSmartCard_151130 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151201> OUT_CheckSmartCard_151201 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151202> OUT_CheckSmartCard_151202 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151203> OUT_CheckSmartCard_151203 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151204> OUT_CheckSmartCard_151204 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151205> OUT_CheckSmartCard_151205 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151206> OUT_CheckSmartCard_151206 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151207> OUT_CheckSmartCard_151207 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151208> OUT_CheckSmartCard_151208 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151209> OUT_CheckSmartCard_151209 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151210> OUT_CheckSmartCard_151210 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151211> OUT_CheckSmartCard_151211 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151212> OUT_CheckSmartCard_151212 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151213> OUT_CheckSmartCard_151213 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151214> OUT_CheckSmartCard_151214 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151215> OUT_CheckSmartCard_151215 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151216> OUT_CheckSmartCard_151216 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151217> OUT_CheckSmartCard_151217 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151218> OUT_CheckSmartCard_151218 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151219> OUT_CheckSmartCard_151219 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151220> OUT_CheckSmartCard_151220 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151221> OUT_CheckSmartCard_151221 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151222> OUT_CheckSmartCard_151222 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151223> OUT_CheckSmartCard_151223 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151224> OUT_CheckSmartCard_151224 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151225> OUT_CheckSmartCard_151225 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151226> OUT_CheckSmartCard_151226 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151227> OUT_CheckSmartCard_151227 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151228> OUT_CheckSmartCard_151228 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151229> OUT_CheckSmartCard_151229 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151230> OUT_CheckSmartCard_151230 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_151231> OUT_CheckSmartCard_151231 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160101> OUT_CheckSmartCard_160101 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160102> OUT_CheckSmartCard_160102 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160103> OUT_CheckSmartCard_160103 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160104> OUT_CheckSmartCard_160104 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160105> OUT_CheckSmartCard_160105 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160106> OUT_CheckSmartCard_160106 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160107> OUT_CheckSmartCard_160107 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160108> OUT_CheckSmartCard_160108 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160109> OUT_CheckSmartCard_160109 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160110> OUT_CheckSmartCard_160110 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160111> OUT_CheckSmartCard_160111 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160112> OUT_CheckSmartCard_160112 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160113> OUT_CheckSmartCard_160113 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160114> OUT_CheckSmartCard_160114 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160115> OUT_CheckSmartCard_160115 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160116> OUT_CheckSmartCard_160116 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160117> OUT_CheckSmartCard_160117 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160118> OUT_CheckSmartCard_160118 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160119> OUT_CheckSmartCard_160119 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160120> OUT_CheckSmartCard_160120 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160121> OUT_CheckSmartCard_160121 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160122> OUT_CheckSmartCard_160122 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160123> OUT_CheckSmartCard_160123 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160124> OUT_CheckSmartCard_160124 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160125> OUT_CheckSmartCard_160125 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160126> OUT_CheckSmartCard_160126 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160127> OUT_CheckSmartCard_160127 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160128> OUT_CheckSmartCard_160128 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160129> OUT_CheckSmartCard_160129 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160130> OUT_CheckSmartCard_160130 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160131> OUT_CheckSmartCard_160131 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160201> OUT_CheckSmartCard_160201 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160202> OUT_CheckSmartCard_160202 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160203> OUT_CheckSmartCard_160203 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160204> OUT_CheckSmartCard_160204 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160205> OUT_CheckSmartCard_160205 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160206> OUT_CheckSmartCard_160206 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160207> OUT_CheckSmartCard_160207 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160208> OUT_CheckSmartCard_160208 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160209> OUT_CheckSmartCard_160209 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160210> OUT_CheckSmartCard_160210 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160211> OUT_CheckSmartCard_160211 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160212> OUT_CheckSmartCard_160212 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160213> OUT_CheckSmartCard_160213 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160214> OUT_CheckSmartCard_160214 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160215> OUT_CheckSmartCard_160215 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160216> OUT_CheckSmartCard_160216 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160217> OUT_CheckSmartCard_160217 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160218> OUT_CheckSmartCard_160218 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160219> OUT_CheckSmartCard_160219 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160220> OUT_CheckSmartCard_160220 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160221> OUT_CheckSmartCard_160221 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160222> OUT_CheckSmartCard_160222 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160223> OUT_CheckSmartCard_160223 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160224> OUT_CheckSmartCard_160224 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160225> OUT_CheckSmartCard_160225 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160226> OUT_CheckSmartCard_160226 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160227> OUT_CheckSmartCard_160227 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160228> OUT_CheckSmartCard_160228 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160229> OUT_CheckSmartCard_160229 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160301> OUT_CheckSmartCard_160301 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160302> OUT_CheckSmartCard_160302 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160303> OUT_CheckSmartCard_160303 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160304> OUT_CheckSmartCard_160304 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160305> OUT_CheckSmartCard_160305 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160306> OUT_CheckSmartCard_160306 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160307> OUT_CheckSmartCard_160307 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160308> OUT_CheckSmartCard_160308 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160309> OUT_CheckSmartCard_160309 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160310> OUT_CheckSmartCard_160310 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160311> OUT_CheckSmartCard_160311 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160312> OUT_CheckSmartCard_160312 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160313> OUT_CheckSmartCard_160313 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160314> OUT_CheckSmartCard_160314 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160315> OUT_CheckSmartCard_160315 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160316> OUT_CheckSmartCard_160316 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160317> OUT_CheckSmartCard_160317 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160318> OUT_CheckSmartCard_160318 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160319> OUT_CheckSmartCard_160319 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160320> OUT_CheckSmartCard_160320 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160321> OUT_CheckSmartCard_160321 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160322> OUT_CheckSmartCard_160322 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160323> OUT_CheckSmartCard_160323 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160324> OUT_CheckSmartCard_160324 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160325> OUT_CheckSmartCard_160325 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160326> OUT_CheckSmartCard_160326 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160327> OUT_CheckSmartCard_160327 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160328> OUT_CheckSmartCard_160328 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160329> OUT_CheckSmartCard_160329 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160330> OUT_CheckSmartCard_160330 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160331> OUT_CheckSmartCard_160331 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160401> OUT_CheckSmartCard_160401 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160402> OUT_CheckSmartCard_160402 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160403> OUT_CheckSmartCard_160403 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160404> OUT_CheckSmartCard_160404 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160405> OUT_CheckSmartCard_160405 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160406> OUT_CheckSmartCard_160406 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160407> OUT_CheckSmartCard_160407 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160408> OUT_CheckSmartCard_160408 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160409> OUT_CheckSmartCard_160409 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160410> OUT_CheckSmartCard_160410 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160411> OUT_CheckSmartCard_160411 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160412> OUT_CheckSmartCard_160412 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160413> OUT_CheckSmartCard_160413 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160414> OUT_CheckSmartCard_160414 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160415> OUT_CheckSmartCard_160415 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160416> OUT_CheckSmartCard_160416 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160417> OUT_CheckSmartCard_160417 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160418> OUT_CheckSmartCard_160418 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160419> OUT_CheckSmartCard_160419 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160420> OUT_CheckSmartCard_160420 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160421> OUT_CheckSmartCard_160421 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160422> OUT_CheckSmartCard_160422 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160423> OUT_CheckSmartCard_160423 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160424> OUT_CheckSmartCard_160424 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160425> OUT_CheckSmartCard_160425 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160426> OUT_CheckSmartCard_160426 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160427> OUT_CheckSmartCard_160427 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_160428> OUT_CheckSmartCard_160428 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_Partition> OUT_CheckSmartCard_Partition { get; set; }
        public virtual DbSet<OUT_CheckTicket> OUT_CheckTicket { get; set; }
        public virtual DbSet<SUP_BlackList> SUP_BlackList { get; set; }
        public virtual DbSet<SUP_BuildinReason> SUP_BuildinReason { get; set; }
        public virtual DbSet<SUP_BuildinSupervisionResult> SUP_BuildinSupervisionResult { get; set; }
        public virtual DbSet<SUP_CancelTransaction> SUP_CancelTransaction { get; set; }
        public virtual DbSet<SUP_DeviceStatus> SUP_DeviceStatus { get; set; }
        public virtual DbSet<SUP_DeviceStatusHistory> SUP_DeviceStatusHistory { get; set; }
        public virtual DbSet<SUP_DeviceStatusLog> SUP_DeviceStatusLog { get; set; }
        public virtual DbSet<SUP_InCheckBtcHistoryMarkError> SUP_InCheckBtcHistoryMarkError { get; set; }
        public virtual DbSet<SUP_InCheckForceOpenGroupDetailHistoryMarkError> SUP_InCheckForceOpenGroupDetailHistoryMarkError { get; set; }
        public virtual DbSet<SUP_InCheckForceOpenGroupHistoryMarkError> SUP_InCheckForceOpenGroupHistoryMarkError { get; set; }
        public virtual DbSet<SUP_InCheckForceOpenHistoryMarkError> SUP_InCheckForceOpenHistoryMarkError { get; set; }
        public virtual DbSet<SUP_InCheckObuHistoryMarkError> SUP_InCheckObuHistoryMarkError { get; set; }
        public virtual DbSet<SUP_InCheckObuSmartCardHistoryMarkError> SUP_InCheckObuSmartCardHistoryMarkError { get; set; }
        public virtual DbSet<SUP_InCheckPeriodObuHistoryMarkError> SUP_InCheckPeriodObuHistoryMarkError { get; set; }
        public virtual DbSet<SUP_InCheckPeriodSmartCardHistoryMarkError> SUP_InCheckPeriodSmartCardHistoryMarkError { get; set; }
        public virtual DbSet<SUP_InCheckPeriodTicketHistoryMarkError> SUP_InCheckPeriodTicketHistoryMarkError { get; set; }
        public virtual DbSet<SUP_InCheckSmartCardHistoryMarkError> SUP_InCheckSmartCardHistoryMarkError { get; set; }
        public virtual DbSet<SUP_InCheckTicketHistoryMarkError> SUP_InCheckTicketHistoryMarkError { get; set; }
        public virtual DbSet<SUP_InOutCheckBtcMark> SUP_InOutCheckBtcMark { get; set; }
        public virtual DbSet<SUP_InOutCheckForceOpenGroupDetailMark> SUP_InOutCheckForceOpenGroupDetailMark { get; set; }
        public virtual DbSet<SUP_InOutCheckForceOpenGroupMark> SUP_InOutCheckForceOpenGroupMark { get; set; }
        public virtual DbSet<SUP_InOutCheckForceOpenMark> SUP_InOutCheckForceOpenMark { get; set; }
        public virtual DbSet<SUP_InOutCheckObuMark> SUP_InOutCheckObuMark { get; set; }
        public virtual DbSet<SUP_InOutCheckObuSmartCardMark> SUP_InOutCheckObuSmartCardMark { get; set; }
        public virtual DbSet<SUP_InOutCheckPeriodObuMark> SUP_InOutCheckPeriodObuMark { get; set; }
        public virtual DbSet<SUP_InOutCheckPeriodSmartCardMark> SUP_InOutCheckPeriodSmartCardMark { get; set; }
        public virtual DbSet<SUP_InOutCheckPeriodTicketMark> SUP_InOutCheckPeriodTicketMark { get; set; }
        public virtual DbSet<SUP_InOutCheckSmartCardMark> SUP_InOutCheckSmartCardMark { get; set; }
        public virtual DbSet<SUP_InOutCheckTicketMark> SUP_InOutCheckTicketMark { get; set; }
        public virtual DbSet<SUP_LaneDevice> SUP_LaneDevice { get; set; }
        public virtual DbSet<SUP_LoopCarCounter> SUP_LoopCarCounter { get; set; }
        public virtual DbSet<SUP_OutCheckBtcHistoryMarkError> SUP_OutCheckBtcHistoryMarkError { get; set; }
        public virtual DbSet<SUP_OutCheckForceOpenGroupDetailHistoryMarkError> SUP_OutCheckForceOpenGroupDetailHistoryMarkError { get; set; }
        public virtual DbSet<SUP_OutCheckForceOpenGroupHistoryMarkError> SUP_OutCheckForceOpenGroupHistoryMarkError { get; set; }
        public virtual DbSet<SUP_OutCheckForceOpenHistoryMarkError> SUP_OutCheckForceOpenHistoryMarkError { get; set; }
        public virtual DbSet<SUP_OutCheckObuHistoryMarkError> SUP_OutCheckObuHistoryMarkError { get; set; }
        public virtual DbSet<SUP_OutCheckObuSmartCardHistoryMarkError> SUP_OutCheckObuSmartCardHistoryMarkError { get; set; }
        public virtual DbSet<SUP_OutCheckPeriodObuHistoryMarkError> SUP_OutCheckPeriodObuHistoryMarkError { get; set; }
        public virtual DbSet<SUP_OutCheckPeriodSmartCardHistoryMarkError> SUP_OutCheckPeriodSmartCardHistoryMarkError { get; set; }
        public virtual DbSet<SUP_OutCheckPeriodTicketHistoryMarkError> SUP_OutCheckPeriodTicketHistoryMarkError { get; set; }
        public virtual DbSet<SUP_OutCheckPrepaidCardHistoryMarkError> SUP_OutCheckPrepaidCardHistoryMarkError { get; set; }
        public virtual DbSet<SUP_OutCheckSmartCardHistoryMarkError> SUP_OutCheckSmartCardHistoryMarkError { get; set; }
        public virtual DbSet<SUP_OutCheckTicketHistoryMarkError> SUP_OutCheckTicketHistoryMarkError { get; set; }
        public virtual DbSet<SUP_ProductStatus> SUP_ProductStatus { get; set; }
        public virtual DbSet<SUP_tmpTurnover> SUP_tmpTurnover { get; set; }
        public virtual DbSet<SUP_tmpWarningNorm> SUP_tmpWarningNorm { get; set; }
        public virtual DbSet<SUP_VehicleInformation> SUP_VehicleInformation { get; set; }
        public virtual DbSet<SUP_VehicleInformationManual> SUP_VehicleInformationManual { get; set; }
        public virtual DbSet<SUP_VehicleInformationManualHistory> SUP_VehicleInformationManualHistory { get; set; }
        public virtual DbSet<SyncGroup> SyncGroups { get; set; }
        public virtual DbSet<SYS_ClientList> SYS_ClientList { get; set; }
        public virtual DbSet<SYS_ClientProgram> SYS_ClientProgram { get; set; }
        public virtual DbSet<SYS_Config> SYS_Config { get; set; }
        public virtual DbSet<SYS_ConfigInfo> SYS_ConfigInfo { get; set; }
        public virtual DbSet<SYS_ConnectionStatus> SYS_ConnectionStatus { get; set; }
        public virtual DbSet<SYS_ConnectionStatusHistory> SYS_ConnectionStatusHistory { get; set; }
        public virtual DbSet<SYS_DeviceList> SYS_DeviceList { get; set; }
        public virtual DbSet<SYS_DeviceStatus> SYS_DeviceStatus { get; set; }
        public virtual DbSet<SYS_Discount> SYS_Discount { get; set; }
        public virtual DbSet<SYS_Monitor> SYS_Monitor { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TCS_L_CYCLESTATUS> TCS_L_CYCLESTATUS { get; set; }
        public virtual DbSet<TCS_L_TRAFFICVOLUME> TCS_L_TRAFFICVOLUME { get; set; }
        public virtual DbSet<TK_LoginTracking> TK_LoginTracking { get; set; }
        public virtual DbSet<TK_RecogResult> TK_RecogResult { get; set; }
        public virtual DbSet<TK_RecogResultManual> TK_RecogResultManual { get; set; }
        public virtual DbSet<TK_TopupNotice> TK_TopupNotice { get; set; }
        public virtual DbSet<TK_TopupRequest> TK_TopupRequest { get; set; }
        public virtual DbSet<TK_TopupResult> TK_TopupResult { get; set; }
        public virtual DbSet<TK_TopupResultDetail> TK_TopupResultDetail { get; set; }
        public virtual DbSet<TK_WIM> TK_WIM { get; set; }
        public virtual DbSet<TK_WIMDetail> TK_WIMDetail { get; set; }
        public virtual DbSet<VehicleCounter> VehicleCounters { get; set; }
        public virtual DbSet<AC_ExportProduct_DT_TMP> AC_ExportProduct_DT_TMP { get; set; }
        public virtual DbSet<AC_ExportProduct_nh10_TMP> AC_ExportProduct_nh10_TMP { get; set; }
        public virtual DbSet<AC_ExportProduct_nh38_TMP> AC_ExportProduct_nh38_TMP { get; set; }
        public virtual DbSet<AC_ExportProduct_nh39_TMP> AC_ExportProduct_nh39_TMP { get; set; }
        public virtual DbSet<AC_InStockProduct_DT_TMP> AC_InStockProduct_DT_TMP { get; set; }
        public virtual DbSet<AC_InStockProduct_nh10_TMP> AC_InStockProduct_nh10_TMP { get; set; }
        public virtual DbSet<AC_InStockProduct_NH38_TMP> AC_InStockProduct_NH38_TMP { get; set; }
        public virtual DbSet<AC_InStockProduct_NH39_TMP> AC_InStockProduct_NH39_TMP { get; set; }
        public virtual DbSet<AC_PPC_AuditBalance> AC_PPC_AuditBalance { get; set; }
        public virtual DbSet<AC_PPC_SuggestForm> AC_PPC_SuggestForm { get; set; }
        public virtual DbSet<AC_PPC_TopupRequest> AC_PPC_TopupRequest { get; set; }
        public virtual DbSet<AC_StatisticCardin_CT_TMP> AC_StatisticCardin_CT_TMP { get; set; }
        public virtual DbSet<AC_StatisticCardin_DT_TMP> AC_StatisticCardin_DT_TMP { get; set; }
        public virtual DbSet<AC_StatisticCardin_NH10_TMP> AC_StatisticCardin_NH10_TMP { get; set; }
        public virtual DbSet<AC_StatisticCardin_NH38_TMP> AC_StatisticCardin_NH38_TMP { get; set; }
        public virtual DbSet<AC_StatisticCardin_NH39_TMP> AC_StatisticCardin_NH39_TMP { get; set; }
        public virtual DbSet<Camera_Config> Camera_Config { get; set; }
        public virtual DbSet<CheckSupervisionStatu> CheckSupervisionStatus { get; set; }
        public virtual DbSet<IN_CheckSmartCard_Partition> IN_CheckSmartCard_Partition { get; set; }
        public virtual DbSet<IN_WarningList> IN_WarningList { get; set; }
        public virtual DbSet<LS_CameraConfig> LS_CameraConfig { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_Cuoituyen> OUT_CheckSmartCard_Cuoituyen { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_Paging> OUT_CheckSmartCard_Paging { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_Paging_DUYHA> OUT_CheckSmartCard_Paging_DUYHA { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_Paging_TCS_TC_IPT1> OUT_CheckSmartCard_Paging_TCS_TC_IPT1 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_Paging_TCS_TC_IPT2> OUT_CheckSmartCard_Paging_TCS_TC_IPT2 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_Paging_TCS_TC_SOT2> OUT_CheckSmartCard_Paging_TCS_TC_SOT2 { get; set; }
        public virtual DbSet<OUT_WarningList> OUT_WarningList { get; set; }
        public virtual DbSet<SyncScope> SyncScopes { get; set; }
        public virtual DbSet<tempTable_AC_PPC_AuditBalance> tempTable_AC_PPC_AuditBalance { get; set; }
        public virtual DbSet<tempTable_AC_PPC_SuggestForm> tempTable_AC_PPC_SuggestForm { get; set; }
        public virtual DbSet<tempTable_AC_StatisticCardOut> tempTable_AC_StatisticCardOut { get; set; }
        public virtual DbSet<tempTable_AC_StatisticCardOutDetail> tempTable_AC_StatisticCardOutDetail { get; set; }
        public virtual DbSet<tempTable_delete_LS_Customer> tempTable_delete_LS_Customer { get; set; }
        public virtual DbSet<tempTable_delete_LS_Route> tempTable_delete_LS_Route { get; set; }
        public virtual DbSet<tempTable_delete_SUP_VehicleInformationManual> tempTable_delete_SUP_VehicleInformationManual { get; set; }
        public virtual DbSet<tempTable_IN_CheckForceOpen> tempTable_IN_CheckForceOpen { get; set; }
        public virtual DbSet<tempTable_IN_CheckPrepaidCard> tempTable_IN_CheckPrepaidCard { get; set; }
        public virtual DbSet<tempTable_IN_CheckSmartCard> tempTable_IN_CheckSmartCard { get; set; }
        public virtual DbSet<tempTable_in_insert> tempTable_in_insert { get; set; }
        public virtual DbSet<tempTable_insert_AC_PPCAccount> tempTable_insert_AC_PPCAccount { get; set; }
        public virtual DbSet<tempTable_insert_LS_Customer> tempTable_insert_LS_Customer { get; set; }
        public virtual DbSet<tempTable_insert_LS_Employee> tempTable_insert_LS_Employee { get; set; }
        public virtual DbSet<tempTable_insert_LS_Lane> tempTable_insert_LS_Lane { get; set; }
        public virtual DbSet<tempTable_insert_LS_Position> tempTable_insert_LS_Position { get; set; }
        public virtual DbSet<tempTable_insert_LS_Route> tempTable_insert_LS_Route { get; set; }
        public virtual DbSet<tempTable_insert_LS_Shift> tempTable_insert_LS_Shift { get; set; }
        public virtual DbSet<tempTable_insert_LS_Stock> tempTable_insert_LS_Stock { get; set; }
        public virtual DbSet<tempTable_insert_LS_Team> tempTable_insert_LS_Team { get; set; }
        public virtual DbSet<tempTable_insert_LS_TeamStation> tempTable_insert_LS_TeamStation { get; set; }
        public virtual DbSet<tempTable_insert_SUP_BlackList> tempTable_insert_SUP_BlackList { get; set; }
        public virtual DbSet<tempTable_insert_SUP_VehicleInformationManual> tempTable_insert_SUP_VehicleInformationManual { get; set; }
        public virtual DbSet<tempTable_insert_TCS_L_CYCLESTATUS> tempTable_insert_TCS_L_CYCLESTATUS { get; set; }
        public virtual DbSet<tempTable_insert_TCS_L_TRAFFICVOLUME> tempTable_insert_TCS_L_TRAFFICVOLUME { get; set; }
        public virtual DbSet<tempTable_LS_Stock> tempTable_LS_Stock { get; set; }
        public virtual DbSet<tempTable_LS_Team> tempTable_LS_Team { get; set; }
        public virtual DbSet<tempTable_LS_TeamStation> tempTable_LS_TeamStation { get; set; }
        public virtual DbSet<tempTable_OUT_CheckPrepaidCard> tempTable_OUT_CheckPrepaidCard { get; set; }
        public virtual DbSet<tempTable_out_insert> tempTable_out_insert { get; set; }
        public virtual DbSet<tempTable_SUP_BlackList> tempTable_SUP_BlackList { get; set; }
        public virtual DbSet<tempTable_SUP_OutCheckSmartCardHistoryMarkError> tempTable_SUP_OutCheckSmartCardHistoryMarkError { get; set; }
        public virtual DbSet<tempTable_SUP_VehicleInformationManual> tempTable_SUP_VehicleInformationManual { get; set; }
        public virtual DbSet<tempTable_SUP_VehicleInformationManual1> tempTable_SUP_VehicleInformationManual1 { get; set; }
        public virtual DbSet<tempTable_SUP_VehicleInformationManual2> tempTable_SUP_VehicleInformationManual2 { get; set; }
        public virtual DbSet<tempTable_TCS_L_CYCLESTATUS> tempTable_TCS_L_CYCLESTATUS { get; set; }
        public virtual DbSet<tempTable_TCS_L_TRAFFICVOLUME> tempTable_TCS_L_TRAFFICVOLUME { get; set; }
        public virtual DbSet<tempTable_update_LS_Customer> tempTable_update_LS_Customer { get; set; }
        public virtual DbSet<tempTable_update_LS_Employee> tempTable_update_LS_Employee { get; set; }
        public virtual DbSet<tempTable_update_LS_Position> tempTable_update_LS_Position { get; set; }
        public virtual DbSet<tempTable_update_LS_Shift> tempTable_update_LS_Shift { get; set; }
        public virtual DbSet<tempTable_update_LS_Stock> tempTable_update_LS_Stock { get; set; }
        public virtual DbSet<tempTable_update_LS_Team> tempTable_update_LS_Team { get; set; }
        public virtual DbSet<tempTable_update_LS_TeamStation> tempTable_update_LS_TeamStation { get; set; }
        public virtual DbSet<tempTable_update_SUP_BlackList> tempTable_update_SUP_BlackList { get; set; }
        public virtual DbSet<tempTable_update_SUP_VehicleInformationManual> tempTable_update_SUP_VehicleInformationManual { get; set; }
        public virtual DbSet<cts_supervision_DeviceInformationView> cts_supervision_DeviceInformationView { get; set; }
        public virtual DbSet<cts_supervision_DeviceSearchResultVew> cts_supervision_DeviceSearchResultVew { get; set; }
        public virtual DbSet<cts_supervision_rpt_RouteView> cts_supervision_rpt_RouteView { get; set; }
        public virtual DbSet<dbo_SUP_RPT_ProductQuatity> dbo_SUP_RPT_ProductQuatity { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View> IN_CheckSmartCard_View { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_0> IN_CheckSmartCard_View_0 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_1> IN_CheckSmartCard_View_1 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_2> IN_CheckSmartCard_View_2 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_222> IN_CheckSmartCard_View_222 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_305> IN_CheckSmartCard_View_305 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_310> IN_CheckSmartCard_View_310 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_313> IN_CheckSmartCard_View_313 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_315> IN_CheckSmartCard_View_315 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_317> IN_CheckSmartCard_View_317 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_318> IN_CheckSmartCard_View_318 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_320> IN_CheckSmartCard_View_320 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_324> IN_CheckSmartCard_View_324 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_328> IN_CheckSmartCard_View_328 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_330> IN_CheckSmartCard_View_330 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_331> IN_CheckSmartCard_View_331 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_335> IN_CheckSmartCard_View_335 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_338> IN_CheckSmartCard_View_338 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_340> IN_CheckSmartCard_View_340 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_341> IN_CheckSmartCard_View_341 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_343> IN_CheckSmartCard_View_343 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_348> IN_CheckSmartCard_View_348 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_349> IN_CheckSmartCard_View_349 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_350> IN_CheckSmartCard_View_350 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_351> IN_CheckSmartCard_View_351 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_352> IN_CheckSmartCard_View_352 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_355> IN_CheckSmartCard_View_355 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_362> IN_CheckSmartCard_View_362 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_363> IN_CheckSmartCard_View_363 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_369> IN_CheckSmartCard_View_369 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_372> IN_CheckSmartCard_View_372 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_377> IN_CheckSmartCard_View_377 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_399> IN_CheckSmartCard_View_399 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_401> IN_CheckSmartCard_View_401 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_403> IN_CheckSmartCard_View_403 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_404> IN_CheckSmartCard_View_404 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_407> IN_CheckSmartCard_View_407 { get; set; }
        public virtual DbSet<IN_CheckSmartCard_View_438> IN_CheckSmartCard_View_438 { get; set; }
        public virtual DbSet<IN_SearchVehicleLane> IN_SearchVehicleLane { get; set; }
        public virtual DbSet<IN_SearchVehicleObuSmartCardLane> IN_SearchVehicleObuSmartCardLane { get; set; }
        public virtual DbSet<IN_SearchVehiclePeriodLane> IN_SearchVehiclePeriodLane { get; set; }
        public virtual DbSet<ListVehicleInOut> ListVehicleInOuts { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View> OUT_CheckSmartCard_View { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_0> OUT_CheckSmartCard_View_0 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_1> OUT_CheckSmartCard_View_1 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_2> OUT_CheckSmartCard_View_2 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_222> OUT_CheckSmartCard_View_222 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_305> OUT_CheckSmartCard_View_305 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_310> OUT_CheckSmartCard_View_310 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_313> OUT_CheckSmartCard_View_313 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_315> OUT_CheckSmartCard_View_315 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_317> OUT_CheckSmartCard_View_317 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_318> OUT_CheckSmartCard_View_318 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_320> OUT_CheckSmartCard_View_320 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_324> OUT_CheckSmartCard_View_324 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_328> OUT_CheckSmartCard_View_328 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_330> OUT_CheckSmartCard_View_330 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_331> OUT_CheckSmartCard_View_331 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_335> OUT_CheckSmartCard_View_335 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_337> OUT_CheckSmartCard_View_337 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_338> OUT_CheckSmartCard_View_338 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_340> OUT_CheckSmartCard_View_340 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_341> OUT_CheckSmartCard_View_341 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_343> OUT_CheckSmartCard_View_343 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_348> OUT_CheckSmartCard_View_348 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_349> OUT_CheckSmartCard_View_349 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_350> OUT_CheckSmartCard_View_350 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_351> OUT_CheckSmartCard_View_351 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_352> OUT_CheckSmartCard_View_352 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_355> OUT_CheckSmartCard_View_355 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_362> OUT_CheckSmartCard_View_362 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_363> OUT_CheckSmartCard_View_363 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_369> OUT_CheckSmartCard_View_369 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_372> OUT_CheckSmartCard_View_372 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_377> OUT_CheckSmartCard_View_377 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_399> OUT_CheckSmartCard_View_399 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_401> OUT_CheckSmartCard_View_401 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_403> OUT_CheckSmartCard_View_403 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_404> OUT_CheckSmartCard_View_404 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_407> OUT_CheckSmartCard_View_407 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_411> OUT_CheckSmartCard_View_411 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_438> OUT_CheckSmartCard_View_438 { get; set; }
        public virtual DbSet<OUT_CheckSmartCard_View_Page> OUT_CheckSmartCard_View_Page { get; set; }
        public virtual DbSet<Out_CheckSmartCardDuplicate> Out_CheckSmartCardDuplicate { get; set; }
        public virtual DbSet<Out_CheckSmartCardMaxID> Out_CheckSmartCardMaxID { get; set; }
        public virtual DbSet<Out_CheckSmartCardMonth2> Out_CheckSmartCardMonth2 { get; set; }
        public virtual DbSet<Out_CheckSmartCardMonth3> Out_CheckSmartCardMonth3 { get; set; }
        public virtual DbSet<Out_CheckSmartCardMonth4> Out_CheckSmartCardMonth4 { get; set; }
        public virtual DbSet<Out_CheckSmartCardMonth5> Out_CheckSmartCardMonth5 { get; set; }
        public virtual DbSet<Out_CheckSmartCardMonth6> Out_CheckSmartCardMonth6 { get; set; }
        public virtual DbSet<SUP_IsforceGroupDetail> SUP_IsforceGroupDetail { get; set; }
        public virtual DbSet<SUP_ListVehicleInfomationInOut> SUP_ListVehicleInfomationInOut { get; set; }
        public virtual DbSet<SUP_RPT_Product> SUP_RPT_Product { get; set; }
        public virtual DbSet<SUP_RPT_Quantity_Good> SUP_RPT_Quantity_Good { get; set; }
        public virtual DbSet<SUP_RPT_Quantity_SmartCard> SUP_RPT_Quantity_SmartCard { get; set; }
        public virtual DbSet<SUP_RPT_Revenue> SUP_RPT_Revenue { get; set; }
        public virtual DbSet<SUP_RPT_Revenue_Chart> SUP_RPT_Revenue_Chart { get; set; }
        public virtual DbSet<SUP_RPT_TicketCategory> SUP_RPT_TicketCategory { get; set; }
        public virtual DbSet<SUP_RPT_Traffic> SUP_RPT_Traffic { get; set; }
        public virtual DbSet<SUP_RPT_Traffic_Base> SUP_RPT_Traffic_Base { get; set; }
        public virtual DbSet<SUP_RPT_Traffic_Chart> SUP_RPT_Traffic_Chart { get; set; }
        public virtual DbSet<SUP_RPT_VehicleLane_Btc> SUP_RPT_VehicleLane_Btc { get; set; }
        public virtual DbSet<SUP_RPT_VehicleTurn_Device> SUP_RPT_VehicleTurn_Device { get; set; }
        public virtual DbSet<SUP_RPT_VehicleTurn_Others> SUP_RPT_VehicleTurn_Others { get; set; }
        public virtual DbSet<SUP_RPT_VehicleTurn_Period> SUP_RPT_VehicleTurn_Period { get; set; }
        public virtual DbSet<SUP_RPT_VehicleTurn_Priority> SUP_RPT_VehicleTurn_Priority { get; set; }
        public virtual DbSet<SUP_RPT_VehicleTurn_Turn> SUP_RPT_VehicleTurn_Turn { get; set; }
        public virtual DbSet<SUP_Search_EmployeeCounter> SUP_Search_EmployeeCounter { get; set; }
        public virtual DbSet<SUP_Search_GroupForceOpen> SUP_Search_GroupForceOpen { get; set; }
        public virtual DbSet<SUP_Search_TicketCounter> SUP_Search_TicketCounter { get; set; }
        public virtual DbSet<SUP_Search_VehicleInformation> SUP_Search_VehicleInformation { get; set; }
        public virtual DbSet<SUP_Search_VehicleManual> SUP_Search_VehicleManual { get; set; }
        public virtual DbSet<SUP_SearchCheckForceGroupOpen> SUP_SearchCheckForceGroupOpen { get; set; }
        public virtual DbSet<SUP_SearchCheckForceOpen> SUP_SearchCheckForceOpen { get; set; }
        public virtual DbSet<SUP_SearchDeviceResult> SUP_SearchDeviceResult { get; set; }
        public virtual DbSet<SUP_SearchOBUSmartCardDecuted> SUP_SearchOBUSmartCardDecuted { get; set; }
        public virtual DbSet<SUP_SearchTicketCounterTemp> SUP_SearchTicketCounterTemp { get; set; }
        public virtual DbSet<SUP_SearchVehicleDetail> SUP_SearchVehicleDetail { get; set; }
        public virtual DbSet<SUP_SearchVehiclePeriodTicket> SUP_SearchVehiclePeriodTicket { get; set; }
        public virtual DbSet<SUP_View_VehicleInformation> SUP_View_VehicleInformation { get; set; }
        public virtual DbSet<SUP_View_VehicleManual> SUP_View_VehicleManual { get; set; }
        public virtual DbSet<SUP_ViewManagementManual> SUP_ViewManagementManual { get; set; }
        public virtual DbSet<SupViewInOutTransactionID> SupViewInOutTransactionIDs { get; set; }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_active_report")]
        public virtual IQueryable<cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_active_report_Result> cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_active_report(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_active_report_Result>("[HPEEntitiesNew].[cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_active_report](@fromdate, @toDate, @stationID)", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_activeSmartCard_report")]
        public virtual IQueryable<cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_activeSmartCard_report_Result> cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_activeSmartCard_report(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_activeSmartCard_report_Result>("[HPEEntitiesNew].[cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_activeSmartCard_report](@fromdate, @toDate, @stationID)", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_exist_report")]
        public virtual IQueryable<cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_exist_report_Result> cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_exist_report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, Nullable<int> stationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_exist_report_Result>("[HPEEntitiesNew].[cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_exist_report](@fromDate, @todate, @stationID)", fromDateParameter, todateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_existSmartCard_report")]
        public virtual IQueryable<cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_existSmartCard_report_Result> cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_existSmartCard_report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, Nullable<int> stationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_existSmartCard_report_Result>("[HPEEntitiesNew].[cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_existSmartCard_report](@fromDate, @todate, @stationID)", fromDateParameter, todateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_import_report")]
        public virtual IQueryable<cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_import_report_Result> cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_import_report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_import_report_Result>("[HPEEntitiesNew].[cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_import_report](@fromDate, @toDate, @stationID)", fromDateParameter, toDateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_importSmardCard_report")]
        public virtual IQueryable<cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_importSmardCard_report_Result> cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_importSmardCard_report(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_importSmardCard_report_Result>("[HPEEntitiesNew].[cts_supervision_rpt_ProductQuatity_DayHour_to_DayHour_importSmardCard_report](@fromDate, @toDate, @stationID)", fromDateParameter, toDateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Revenue_TableDayShift")]
        public virtual IQueryable<cts_supervision_rpt_Revenue_TableDayShift_Result> cts_supervision_rpt_Revenue_TableDayShift(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Revenue_TableDayShift_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Revenue_TableDayShift](@date, @shiftID, @stationID)", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Revenue_TableTime")]
        public virtual IQueryable<cts_supervision_rpt_Revenue_TableTime_Result> cts_supervision_rpt_Revenue_TableTime(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> stationID, Nullable<int> checkTime, Nullable<int> shiftID, Nullable<int> shiftLast, Nullable<int> shiftFirst, Nullable<int> testDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Revenue_TableTime_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Revenue_TableTime](@fromDate, @toDate, @stationID, @CheckTime, @ShiftID, @ShiftLast, @ShiftFirst, @testDate)", fromDateParameter, toDateParameter, stationIDParameter, checkTimeParameter, shiftIDParameter, shiftLastParameter, shiftFirstParameter, testDateParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_route_Table_CheckBtc")]
        public virtual IQueryable<cts_supervision_rpt_route_Table_CheckBtc_Result> cts_supervision_rpt_route_Table_CheckBtc(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> fromStationID, Nullable<int> toStationID, Nullable<int> fromLaneID, Nullable<int> toLaneID, Nullable<int> employeeID, string objectCode, Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<bool> conditionTime, Nullable<bool> conditionDayShift, Nullable<bool> conditionResultRouteAll, Nullable<bool> conditionResultRouteTrue, Nullable<bool> conditionResultRouteFalse)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var fromStationIDParameter = fromStationID.HasValue ?
                new ObjectParameter("fromStationID", fromStationID) :
                new ObjectParameter("fromStationID", typeof(int));
    
            var toStationIDParameter = toStationID.HasValue ?
                new ObjectParameter("toStationID", toStationID) :
                new ObjectParameter("toStationID", typeof(int));
    
            var fromLaneIDParameter = fromLaneID.HasValue ?
                new ObjectParameter("fromLaneID", fromLaneID) :
                new ObjectParameter("fromLaneID", typeof(int));
    
            var toLaneIDParameter = toLaneID.HasValue ?
                new ObjectParameter("toLaneID", toLaneID) :
                new ObjectParameter("toLaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var objectCodeParameter = objectCode != null ?
                new ObjectParameter("objectCode", objectCode) :
                new ObjectParameter("objectCode", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var conditionTimeParameter = conditionTime.HasValue ?
                new ObjectParameter("conditionTime", conditionTime) :
                new ObjectParameter("conditionTime", typeof(bool));
    
            var conditionDayShiftParameter = conditionDayShift.HasValue ?
                new ObjectParameter("conditionDayShift", conditionDayShift) :
                new ObjectParameter("conditionDayShift", typeof(bool));
    
            var conditionResultRouteAllParameter = conditionResultRouteAll.HasValue ?
                new ObjectParameter("conditionResultRouteAll", conditionResultRouteAll) :
                new ObjectParameter("conditionResultRouteAll", typeof(bool));
    
            var conditionResultRouteTrueParameter = conditionResultRouteTrue.HasValue ?
                new ObjectParameter("conditionResultRouteTrue", conditionResultRouteTrue) :
                new ObjectParameter("conditionResultRouteTrue", typeof(bool));
    
            var conditionResultRouteFalseParameter = conditionResultRouteFalse.HasValue ?
                new ObjectParameter("conditionResultRouteFalse", conditionResultRouteFalse) :
                new ObjectParameter("conditionResultRouteFalse", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_route_Table_CheckBtc_Result>("[HPEEntitiesNew].[cts_supervision_rpt_route_Table_CheckBtc](@fromdate, @toDate, @fromStationID, @toStationID, @fromLaneID, @toLaneID, @employeeID, @objectCode, @date, @shiftID, @conditionTime, @conditionDayShift, @conditionResultRouteAll, @conditionResultRouteTrue, @conditionResultRouteFalse)", fromdateParameter, toDateParameter, fromStationIDParameter, toStationIDParameter, fromLaneIDParameter, toLaneIDParameter, employeeIDParameter, objectCodeParameter, dateParameter, shiftIDParameter, conditionTimeParameter, conditionDayShiftParameter, conditionResultRouteAllParameter, conditionResultRouteTrueParameter, conditionResultRouteFalseParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_route_Table_CheckForceOpen")]
        public virtual IQueryable<cts_supervision_rpt_route_Table_CheckForceOpen_Result> cts_supervision_rpt_route_Table_CheckForceOpen(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> fromStationID, Nullable<int> toStationID, Nullable<int> fromLaneID, Nullable<int> toLaneID, Nullable<int> employeeID, string objectCode, Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<bool> conditionTime, Nullable<bool> conditionDayShift, Nullable<bool> conditionResultRouteAll, Nullable<bool> conditionResultRouteTrue, Nullable<bool> conditionResultRouteFalse)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var fromStationIDParameter = fromStationID.HasValue ?
                new ObjectParameter("fromStationID", fromStationID) :
                new ObjectParameter("fromStationID", typeof(int));
    
            var toStationIDParameter = toStationID.HasValue ?
                new ObjectParameter("toStationID", toStationID) :
                new ObjectParameter("toStationID", typeof(int));
    
            var fromLaneIDParameter = fromLaneID.HasValue ?
                new ObjectParameter("fromLaneID", fromLaneID) :
                new ObjectParameter("fromLaneID", typeof(int));
    
            var toLaneIDParameter = toLaneID.HasValue ?
                new ObjectParameter("toLaneID", toLaneID) :
                new ObjectParameter("toLaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var objectCodeParameter = objectCode != null ?
                new ObjectParameter("objectCode", objectCode) :
                new ObjectParameter("objectCode", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var conditionTimeParameter = conditionTime.HasValue ?
                new ObjectParameter("conditionTime", conditionTime) :
                new ObjectParameter("conditionTime", typeof(bool));
    
            var conditionDayShiftParameter = conditionDayShift.HasValue ?
                new ObjectParameter("conditionDayShift", conditionDayShift) :
                new ObjectParameter("conditionDayShift", typeof(bool));
    
            var conditionResultRouteAllParameter = conditionResultRouteAll.HasValue ?
                new ObjectParameter("conditionResultRouteAll", conditionResultRouteAll) :
                new ObjectParameter("conditionResultRouteAll", typeof(bool));
    
            var conditionResultRouteTrueParameter = conditionResultRouteTrue.HasValue ?
                new ObjectParameter("conditionResultRouteTrue", conditionResultRouteTrue) :
                new ObjectParameter("conditionResultRouteTrue", typeof(bool));
    
            var conditionResultRouteFalseParameter = conditionResultRouteFalse.HasValue ?
                new ObjectParameter("conditionResultRouteFalse", conditionResultRouteFalse) :
                new ObjectParameter("conditionResultRouteFalse", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_route_Table_CheckForceOpen_Result>("[HPEEntitiesNew].[cts_supervision_rpt_route_Table_CheckForceOpen](@fromdate, @toDate, @fromStationID, @toStationID, @fromLaneID, @toLaneID, @employeeID, @objectCode, @date, @shiftID, @conditionTime, @conditionDayShift, @conditionResultRouteAll, @conditionResultRouteTrue, @conditionResultRouteFalse)", fromdateParameter, toDateParameter, fromStationIDParameter, toStationIDParameter, fromLaneIDParameter, toLaneIDParameter, employeeIDParameter, objectCodeParameter, dateParameter, shiftIDParameter, conditionTimeParameter, conditionDayShiftParameter, conditionResultRouteAllParameter, conditionResultRouteTrueParameter, conditionResultRouteFalseParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_route_Table_CheckForceOpenGroup")]
        public virtual IQueryable<cts_supervision_rpt_route_Table_CheckForceOpenGroup_Result> cts_supervision_rpt_route_Table_CheckForceOpenGroup(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> fromStationID, Nullable<int> toStationID, Nullable<int> fromLaneID, Nullable<int> toLaneID, Nullable<int> employeeID, string objectCode, Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<bool> conditionTime, Nullable<bool> conditionDayShift, Nullable<bool> conditionResultRouteAll, Nullable<bool> conditionResultRouteTrue, Nullable<bool> conditionResultRouteFalse)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var fromStationIDParameter = fromStationID.HasValue ?
                new ObjectParameter("fromStationID", fromStationID) :
                new ObjectParameter("fromStationID", typeof(int));
    
            var toStationIDParameter = toStationID.HasValue ?
                new ObjectParameter("toStationID", toStationID) :
                new ObjectParameter("toStationID", typeof(int));
    
            var fromLaneIDParameter = fromLaneID.HasValue ?
                new ObjectParameter("fromLaneID", fromLaneID) :
                new ObjectParameter("fromLaneID", typeof(int));
    
            var toLaneIDParameter = toLaneID.HasValue ?
                new ObjectParameter("toLaneID", toLaneID) :
                new ObjectParameter("toLaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var objectCodeParameter = objectCode != null ?
                new ObjectParameter("objectCode", objectCode) :
                new ObjectParameter("objectCode", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var conditionTimeParameter = conditionTime.HasValue ?
                new ObjectParameter("conditionTime", conditionTime) :
                new ObjectParameter("conditionTime", typeof(bool));
    
            var conditionDayShiftParameter = conditionDayShift.HasValue ?
                new ObjectParameter("conditionDayShift", conditionDayShift) :
                new ObjectParameter("conditionDayShift", typeof(bool));
    
            var conditionResultRouteAllParameter = conditionResultRouteAll.HasValue ?
                new ObjectParameter("conditionResultRouteAll", conditionResultRouteAll) :
                new ObjectParameter("conditionResultRouteAll", typeof(bool));
    
            var conditionResultRouteTrueParameter = conditionResultRouteTrue.HasValue ?
                new ObjectParameter("conditionResultRouteTrue", conditionResultRouteTrue) :
                new ObjectParameter("conditionResultRouteTrue", typeof(bool));
    
            var conditionResultRouteFalseParameter = conditionResultRouteFalse.HasValue ?
                new ObjectParameter("conditionResultRouteFalse", conditionResultRouteFalse) :
                new ObjectParameter("conditionResultRouteFalse", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_route_Table_CheckForceOpenGroup_Result>("[HPEEntitiesNew].[cts_supervision_rpt_route_Table_CheckForceOpenGroup](@fromdate, @toDate, @fromStationID, @toStationID, @fromLaneID, @toLaneID, @employeeID, @objectCode, @date, @shiftID, @conditionTime, @conditionDayShift, @conditionResultRouteAll, @conditionResultRouteTrue, @conditionResultRouteFalse)", fromdateParameter, toDateParameter, fromStationIDParameter, toStationIDParameter, fromLaneIDParameter, toLaneIDParameter, employeeIDParameter, objectCodeParameter, dateParameter, shiftIDParameter, conditionTimeParameter, conditionDayShiftParameter, conditionResultRouteAllParameter, conditionResultRouteTrueParameter, conditionResultRouteFalseParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_route_Table_CheckObu")]
        public virtual IQueryable<cts_supervision_rpt_route_Table_CheckObu_Result> cts_supervision_rpt_route_Table_CheckObu(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> fromStationID, Nullable<int> toStationID, Nullable<int> fromLaneID, Nullable<int> toLaneID, Nullable<int> employeeID, string objectCode, Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<bool> conditionTime, Nullable<bool> conditionDayShift, Nullable<bool> conditionResultRouteAll, Nullable<bool> conditionResultRouteTrue, Nullable<bool> conditionResultRouteFalse)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var fromStationIDParameter = fromStationID.HasValue ?
                new ObjectParameter("fromStationID", fromStationID) :
                new ObjectParameter("fromStationID", typeof(int));
    
            var toStationIDParameter = toStationID.HasValue ?
                new ObjectParameter("toStationID", toStationID) :
                new ObjectParameter("toStationID", typeof(int));
    
            var fromLaneIDParameter = fromLaneID.HasValue ?
                new ObjectParameter("fromLaneID", fromLaneID) :
                new ObjectParameter("fromLaneID", typeof(int));
    
            var toLaneIDParameter = toLaneID.HasValue ?
                new ObjectParameter("toLaneID", toLaneID) :
                new ObjectParameter("toLaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var objectCodeParameter = objectCode != null ?
                new ObjectParameter("objectCode", objectCode) :
                new ObjectParameter("objectCode", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var conditionTimeParameter = conditionTime.HasValue ?
                new ObjectParameter("conditionTime", conditionTime) :
                new ObjectParameter("conditionTime", typeof(bool));
    
            var conditionDayShiftParameter = conditionDayShift.HasValue ?
                new ObjectParameter("conditionDayShift", conditionDayShift) :
                new ObjectParameter("conditionDayShift", typeof(bool));
    
            var conditionResultRouteAllParameter = conditionResultRouteAll.HasValue ?
                new ObjectParameter("conditionResultRouteAll", conditionResultRouteAll) :
                new ObjectParameter("conditionResultRouteAll", typeof(bool));
    
            var conditionResultRouteTrueParameter = conditionResultRouteTrue.HasValue ?
                new ObjectParameter("conditionResultRouteTrue", conditionResultRouteTrue) :
                new ObjectParameter("conditionResultRouteTrue", typeof(bool));
    
            var conditionResultRouteFalseParameter = conditionResultRouteFalse.HasValue ?
                new ObjectParameter("conditionResultRouteFalse", conditionResultRouteFalse) :
                new ObjectParameter("conditionResultRouteFalse", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_route_Table_CheckObu_Result>("[HPEEntitiesNew].[cts_supervision_rpt_route_Table_CheckObu](@fromdate, @toDate, @fromStationID, @toStationID, @fromLaneID, @toLaneID, @employeeID, @objectCode, @date, @shiftID, @conditionTime, @conditionDayShift, @conditionResultRouteAll, @conditionResultRouteTrue, @conditionResultRouteFalse)", fromdateParameter, toDateParameter, fromStationIDParameter, toStationIDParameter, fromLaneIDParameter, toLaneIDParameter, employeeIDParameter, objectCodeParameter, dateParameter, shiftIDParameter, conditionTimeParameter, conditionDayShiftParameter, conditionResultRouteAllParameter, conditionResultRouteTrueParameter, conditionResultRouteFalseParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_route_Table_CheckObuSmartCard")]
        public virtual IQueryable<cts_supervision_rpt_route_Table_CheckObuSmartCard_Result> cts_supervision_rpt_route_Table_CheckObuSmartCard(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> fromStationID, Nullable<int> toStationID, Nullable<int> fromLaneID, Nullable<int> toLaneID, Nullable<int> employeeID, string objectCode, Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<bool> conditionTime, Nullable<bool> conditionDayShift, Nullable<bool> conditionResultRouteAll, Nullable<bool> conditionResultRouteTrue, Nullable<bool> conditionResultRouteFalse)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var fromStationIDParameter = fromStationID.HasValue ?
                new ObjectParameter("fromStationID", fromStationID) :
                new ObjectParameter("fromStationID", typeof(int));
    
            var toStationIDParameter = toStationID.HasValue ?
                new ObjectParameter("toStationID", toStationID) :
                new ObjectParameter("toStationID", typeof(int));
    
            var fromLaneIDParameter = fromLaneID.HasValue ?
                new ObjectParameter("fromLaneID", fromLaneID) :
                new ObjectParameter("fromLaneID", typeof(int));
    
            var toLaneIDParameter = toLaneID.HasValue ?
                new ObjectParameter("toLaneID", toLaneID) :
                new ObjectParameter("toLaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var objectCodeParameter = objectCode != null ?
                new ObjectParameter("objectCode", objectCode) :
                new ObjectParameter("objectCode", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var conditionTimeParameter = conditionTime.HasValue ?
                new ObjectParameter("conditionTime", conditionTime) :
                new ObjectParameter("conditionTime", typeof(bool));
    
            var conditionDayShiftParameter = conditionDayShift.HasValue ?
                new ObjectParameter("conditionDayShift", conditionDayShift) :
                new ObjectParameter("conditionDayShift", typeof(bool));
    
            var conditionResultRouteAllParameter = conditionResultRouteAll.HasValue ?
                new ObjectParameter("conditionResultRouteAll", conditionResultRouteAll) :
                new ObjectParameter("conditionResultRouteAll", typeof(bool));
    
            var conditionResultRouteTrueParameter = conditionResultRouteTrue.HasValue ?
                new ObjectParameter("conditionResultRouteTrue", conditionResultRouteTrue) :
                new ObjectParameter("conditionResultRouteTrue", typeof(bool));
    
            var conditionResultRouteFalseParameter = conditionResultRouteFalse.HasValue ?
                new ObjectParameter("conditionResultRouteFalse", conditionResultRouteFalse) :
                new ObjectParameter("conditionResultRouteFalse", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_route_Table_CheckObuSmartCard_Result>("[HPEEntitiesNew].[cts_supervision_rpt_route_Table_CheckObuSmartCard](@fromdate, @toDate, @fromStationID, @toStationID, @fromLaneID, @toLaneID, @employeeID, @objectCode, @date, @shiftID, @conditionTime, @conditionDayShift, @conditionResultRouteAll, @conditionResultRouteTrue, @conditionResultRouteFalse)", fromdateParameter, toDateParameter, fromStationIDParameter, toStationIDParameter, fromLaneIDParameter, toLaneIDParameter, employeeIDParameter, objectCodeParameter, dateParameter, shiftIDParameter, conditionTimeParameter, conditionDayShiftParameter, conditionResultRouteAllParameter, conditionResultRouteTrueParameter, conditionResultRouteFalseParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_route_Table_CheckPeriodObu")]
        public virtual IQueryable<cts_supervision_rpt_route_Table_CheckPeriodObu_Result> cts_supervision_rpt_route_Table_CheckPeriodObu(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> fromStationID, Nullable<int> toStationID, Nullable<int> fromLaneID, Nullable<int> toLaneID, Nullable<int> employeeID, string objectCode, Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<bool> conditionTime, Nullable<bool> conditionDayShift, Nullable<bool> conditionResultRouteAll, Nullable<bool> conditionResultRouteTrue, Nullable<bool> conditionResultRouteFalse)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var fromStationIDParameter = fromStationID.HasValue ?
                new ObjectParameter("fromStationID", fromStationID) :
                new ObjectParameter("fromStationID", typeof(int));
    
            var toStationIDParameter = toStationID.HasValue ?
                new ObjectParameter("toStationID", toStationID) :
                new ObjectParameter("toStationID", typeof(int));
    
            var fromLaneIDParameter = fromLaneID.HasValue ?
                new ObjectParameter("fromLaneID", fromLaneID) :
                new ObjectParameter("fromLaneID", typeof(int));
    
            var toLaneIDParameter = toLaneID.HasValue ?
                new ObjectParameter("toLaneID", toLaneID) :
                new ObjectParameter("toLaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var objectCodeParameter = objectCode != null ?
                new ObjectParameter("objectCode", objectCode) :
                new ObjectParameter("objectCode", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var conditionTimeParameter = conditionTime.HasValue ?
                new ObjectParameter("conditionTime", conditionTime) :
                new ObjectParameter("conditionTime", typeof(bool));
    
            var conditionDayShiftParameter = conditionDayShift.HasValue ?
                new ObjectParameter("conditionDayShift", conditionDayShift) :
                new ObjectParameter("conditionDayShift", typeof(bool));
    
            var conditionResultRouteAllParameter = conditionResultRouteAll.HasValue ?
                new ObjectParameter("conditionResultRouteAll", conditionResultRouteAll) :
                new ObjectParameter("conditionResultRouteAll", typeof(bool));
    
            var conditionResultRouteTrueParameter = conditionResultRouteTrue.HasValue ?
                new ObjectParameter("conditionResultRouteTrue", conditionResultRouteTrue) :
                new ObjectParameter("conditionResultRouteTrue", typeof(bool));
    
            var conditionResultRouteFalseParameter = conditionResultRouteFalse.HasValue ?
                new ObjectParameter("conditionResultRouteFalse", conditionResultRouteFalse) :
                new ObjectParameter("conditionResultRouteFalse", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_route_Table_CheckPeriodObu_Result>("[HPEEntitiesNew].[cts_supervision_rpt_route_Table_CheckPeriodObu](@fromdate, @toDate, @fromStationID, @toStationID, @fromLaneID, @toLaneID, @employeeID, @objectCode, @date, @shiftID, @conditionTime, @conditionDayShift, @conditionResultRouteAll, @conditionResultRouteTrue, @conditionResultRouteFalse)", fromdateParameter, toDateParameter, fromStationIDParameter, toStationIDParameter, fromLaneIDParameter, toLaneIDParameter, employeeIDParameter, objectCodeParameter, dateParameter, shiftIDParameter, conditionTimeParameter, conditionDayShiftParameter, conditionResultRouteAllParameter, conditionResultRouteTrueParameter, conditionResultRouteFalseParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_route_Table_CheckPeriodTicket")]
        public virtual IQueryable<cts_supervision_rpt_route_Table_CheckPeriodTicket_Result> cts_supervision_rpt_route_Table_CheckPeriodTicket(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> fromStationID, Nullable<int> toStationID, Nullable<int> fromLaneID, Nullable<int> toLaneID, Nullable<int> employeeID, string objectCode, Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<bool> conditionTime, Nullable<bool> conditionDayShift, Nullable<bool> conditionResultRouteAll, Nullable<bool> conditionResultRouteTrue, Nullable<bool> conditionResultRouteFalse)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var fromStationIDParameter = fromStationID.HasValue ?
                new ObjectParameter("fromStationID", fromStationID) :
                new ObjectParameter("fromStationID", typeof(int));
    
            var toStationIDParameter = toStationID.HasValue ?
                new ObjectParameter("toStationID", toStationID) :
                new ObjectParameter("toStationID", typeof(int));
    
            var fromLaneIDParameter = fromLaneID.HasValue ?
                new ObjectParameter("fromLaneID", fromLaneID) :
                new ObjectParameter("fromLaneID", typeof(int));
    
            var toLaneIDParameter = toLaneID.HasValue ?
                new ObjectParameter("toLaneID", toLaneID) :
                new ObjectParameter("toLaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var objectCodeParameter = objectCode != null ?
                new ObjectParameter("objectCode", objectCode) :
                new ObjectParameter("objectCode", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var conditionTimeParameter = conditionTime.HasValue ?
                new ObjectParameter("conditionTime", conditionTime) :
                new ObjectParameter("conditionTime", typeof(bool));
    
            var conditionDayShiftParameter = conditionDayShift.HasValue ?
                new ObjectParameter("conditionDayShift", conditionDayShift) :
                new ObjectParameter("conditionDayShift", typeof(bool));
    
            var conditionResultRouteAllParameter = conditionResultRouteAll.HasValue ?
                new ObjectParameter("conditionResultRouteAll", conditionResultRouteAll) :
                new ObjectParameter("conditionResultRouteAll", typeof(bool));
    
            var conditionResultRouteTrueParameter = conditionResultRouteTrue.HasValue ?
                new ObjectParameter("conditionResultRouteTrue", conditionResultRouteTrue) :
                new ObjectParameter("conditionResultRouteTrue", typeof(bool));
    
            var conditionResultRouteFalseParameter = conditionResultRouteFalse.HasValue ?
                new ObjectParameter("conditionResultRouteFalse", conditionResultRouteFalse) :
                new ObjectParameter("conditionResultRouteFalse", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_route_Table_CheckPeriodTicket_Result>("[HPEEntitiesNew].[cts_supervision_rpt_route_Table_CheckPeriodTicket](@fromdate, @toDate, @fromStationID, @toStationID, @fromLaneID, @toLaneID, @employeeID, @objectCode, @date, @shiftID, @conditionTime, @conditionDayShift, @conditionResultRouteAll, @conditionResultRouteTrue, @conditionResultRouteFalse)", fromdateParameter, toDateParameter, fromStationIDParameter, toStationIDParameter, fromLaneIDParameter, toLaneIDParameter, employeeIDParameter, objectCodeParameter, dateParameter, shiftIDParameter, conditionTimeParameter, conditionDayShiftParameter, conditionResultRouteAllParameter, conditionResultRouteTrueParameter, conditionResultRouteFalseParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_route_Table_CheckSmartCard")]
        public virtual IQueryable<cts_supervision_rpt_route_Table_CheckSmartCard_Result> cts_supervision_rpt_route_Table_CheckSmartCard(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> fromStationID, Nullable<int> toStationID, Nullable<int> fromLaneID, Nullable<int> toLaneID, Nullable<int> employeeID, string objectCode, Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<bool> conditionTime, Nullable<bool> conditionDayShift, Nullable<bool> conditionResultRouteAll, Nullable<bool> conditionResultRouteTrue, Nullable<bool> conditionResultRouteFalse)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var fromStationIDParameter = fromStationID.HasValue ?
                new ObjectParameter("fromStationID", fromStationID) :
                new ObjectParameter("fromStationID", typeof(int));
    
            var toStationIDParameter = toStationID.HasValue ?
                new ObjectParameter("toStationID", toStationID) :
                new ObjectParameter("toStationID", typeof(int));
    
            var fromLaneIDParameter = fromLaneID.HasValue ?
                new ObjectParameter("fromLaneID", fromLaneID) :
                new ObjectParameter("fromLaneID", typeof(int));
    
            var toLaneIDParameter = toLaneID.HasValue ?
                new ObjectParameter("toLaneID", toLaneID) :
                new ObjectParameter("toLaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var objectCodeParameter = objectCode != null ?
                new ObjectParameter("objectCode", objectCode) :
                new ObjectParameter("objectCode", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var conditionTimeParameter = conditionTime.HasValue ?
                new ObjectParameter("conditionTime", conditionTime) :
                new ObjectParameter("conditionTime", typeof(bool));
    
            var conditionDayShiftParameter = conditionDayShift.HasValue ?
                new ObjectParameter("conditionDayShift", conditionDayShift) :
                new ObjectParameter("conditionDayShift", typeof(bool));
    
            var conditionResultRouteAllParameter = conditionResultRouteAll.HasValue ?
                new ObjectParameter("conditionResultRouteAll", conditionResultRouteAll) :
                new ObjectParameter("conditionResultRouteAll", typeof(bool));
    
            var conditionResultRouteTrueParameter = conditionResultRouteTrue.HasValue ?
                new ObjectParameter("conditionResultRouteTrue", conditionResultRouteTrue) :
                new ObjectParameter("conditionResultRouteTrue", typeof(bool));
    
            var conditionResultRouteFalseParameter = conditionResultRouteFalse.HasValue ?
                new ObjectParameter("conditionResultRouteFalse", conditionResultRouteFalse) :
                new ObjectParameter("conditionResultRouteFalse", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_route_Table_CheckSmartCard_Result>("[HPEEntitiesNew].[cts_supervision_rpt_route_Table_CheckSmartCard](@fromdate, @toDate, @fromStationID, @toStationID, @fromLaneID, @toLaneID, @employeeID, @objectCode, @date, @shiftID, @conditionTime, @conditionDayShift, @conditionResultRouteAll, @conditionResultRouteTrue, @conditionResultRouteFalse)", fromdateParameter, toDateParameter, fromStationIDParameter, toStationIDParameter, fromLaneIDParameter, toLaneIDParameter, employeeIDParameter, objectCodeParameter, dateParameter, shiftIDParameter, conditionTimeParameter, conditionDayShiftParameter, conditionResultRouteAllParameter, conditionResultRouteTrueParameter, conditionResultRouteFalseParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_route_Table_CheckTicket")]
        public virtual IQueryable<cts_supervision_rpt_route_Table_CheckTicket_Result> cts_supervision_rpt_route_Table_CheckTicket(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> fromStationID, Nullable<int> toStationID, Nullable<int> fromLaneID, Nullable<int> toLaneID, Nullable<int> employeeID, string objectCode, Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<bool> conditionTime, Nullable<bool> conditionDayShift, Nullable<bool> conditionResultRouteAll, Nullable<bool> conditionResultRouteTrue, Nullable<bool> conditionResultRouteFalse)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var fromStationIDParameter = fromStationID.HasValue ?
                new ObjectParameter("fromStationID", fromStationID) :
                new ObjectParameter("fromStationID", typeof(int));
    
            var toStationIDParameter = toStationID.HasValue ?
                new ObjectParameter("toStationID", toStationID) :
                new ObjectParameter("toStationID", typeof(int));
    
            var fromLaneIDParameter = fromLaneID.HasValue ?
                new ObjectParameter("fromLaneID", fromLaneID) :
                new ObjectParameter("fromLaneID", typeof(int));
    
            var toLaneIDParameter = toLaneID.HasValue ?
                new ObjectParameter("toLaneID", toLaneID) :
                new ObjectParameter("toLaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var objectCodeParameter = objectCode != null ?
                new ObjectParameter("objectCode", objectCode) :
                new ObjectParameter("objectCode", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var conditionTimeParameter = conditionTime.HasValue ?
                new ObjectParameter("conditionTime", conditionTime) :
                new ObjectParameter("conditionTime", typeof(bool));
    
            var conditionDayShiftParameter = conditionDayShift.HasValue ?
                new ObjectParameter("conditionDayShift", conditionDayShift) :
                new ObjectParameter("conditionDayShift", typeof(bool));
    
            var conditionResultRouteAllParameter = conditionResultRouteAll.HasValue ?
                new ObjectParameter("conditionResultRouteAll", conditionResultRouteAll) :
                new ObjectParameter("conditionResultRouteAll", typeof(bool));
    
            var conditionResultRouteTrueParameter = conditionResultRouteTrue.HasValue ?
                new ObjectParameter("conditionResultRouteTrue", conditionResultRouteTrue) :
                new ObjectParameter("conditionResultRouteTrue", typeof(bool));
    
            var conditionResultRouteFalseParameter = conditionResultRouteFalse.HasValue ?
                new ObjectParameter("conditionResultRouteFalse", conditionResultRouteFalse) :
                new ObjectParameter("conditionResultRouteFalse", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_route_Table_CheckTicket_Result>("[HPEEntitiesNew].[cts_supervision_rpt_route_Table_CheckTicket](@fromdate, @toDate, @fromStationID, @toStationID, @fromLaneID, @toLaneID, @employeeID, @objectCode, @date, @shiftID, @conditionTime, @conditionDayShift, @conditionResultRouteAll, @conditionResultRouteTrue, @conditionResultRouteFalse)", fromdateParameter, toDateParameter, fromStationIDParameter, toStationIDParameter, fromLaneIDParameter, toLaneIDParameter, employeeIDParameter, objectCodeParameter, dateParameter, shiftIDParameter, conditionTimeParameter, conditionDayShiftParameter, conditionResultRouteAllParameter, conditionResultRouteTrueParameter, conditionResultRouteFalseParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_Period_DayShift")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_Period_DayShift_Result> cts_supervision_rpt_Traffic_Period_DayShift(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_Period_DayShift_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_Period_DayShift](@date, @shiftID, @stationID)", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_Period_Time")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_Period_Time_Result> cts_supervision_rpt_Traffic_Period_Time(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_Period_Time_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_Period_Time](@fromdate, @toDate, @stationID)", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_PeriodAutoLane_DayShift")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_PeriodAutoLane_DayShift_Result> cts_supervision_rpt_Traffic_PeriodAutoLane_DayShift(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_PeriodAutoLane_DayShift_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_PeriodAutoLane_DayShift](@date, @shiftID, @stationID)", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_PeriodAutoLane_Time")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_PeriodAutoLane_Time_Result> cts_supervision_rpt_Traffic_PeriodAutoLane_Time(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_PeriodAutoLane_Time_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_PeriodAutoLane_Time](@fromdate, @toDate, @stationID)", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_SumFinal_DayShift")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_SumFinal_DayShift_Result> cts_supervision_rpt_Traffic_SumFinal_DayShift(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_SumFinal_DayShift_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_SumFinal_DayShift](@date, @shiftID, @stationID)", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_SumFinal_Time")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_SumFinal_Time_Result> cts_supervision_rpt_Traffic_SumFinal_Time(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_SumFinal_Time_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_SumFinal_Time](@fromdate, @toDate, @stationID)", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_SumTicketCounterAutoLane_DayShift")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_SumTicketCounterAutoLane_DayShift_Result> cts_supervision_rpt_Traffic_SumTicketCounterAutoLane_DayShift(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_SumTicketCounterAutoLane_DayShift_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_SumTicketCounterAutoLane_DayShift](@date, @shiftID, @stationID)", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_SumTicketCounterAutoLane_Time")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_SumTicketCounterAutoLane_Time_Result> cts_supervision_rpt_Traffic_SumTicketCounterAutoLane_Time(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_SumTicketCounterAutoLane_Time_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_SumTicketCounterAutoLane_Time](@fromdate, @toDate, @stationID)", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_SumTicketMonthAutoLane_DayShift")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_SumTicketMonthAutoLane_DayShift_Result> cts_supervision_rpt_Traffic_SumTicketMonthAutoLane_DayShift(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_SumTicketMonthAutoLane_DayShift_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_SumTicketMonthAutoLane_DayShift](@date, @shiftID, @stationID)", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_SumTicketMonthAutoLane_Time")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_SumTicketMonthAutoLane_Time_Result> cts_supervision_rpt_Traffic_SumTicketMonthAutoLane_Time(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_SumTicketMonthAutoLane_Time_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_SumTicketMonthAutoLane_Time](@fromdate, @toDate, @stationID)", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_SumTicketQLCounterAutoLane_DayShift")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_SumTicketQLCounterAutoLane_DayShift_Result> cts_supervision_rpt_Traffic_SumTicketQLCounterAutoLane_DayShift(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_SumTicketQLCounterAutoLane_DayShift_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_SumTicketQLCounterAutoLane_DayShift](@date, @shiftID, @stationID)", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_SumTicketQLCounterAutoLane_Time")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_SumTicketQLCounterAutoLane_Time_Result> cts_supervision_rpt_Traffic_SumTicketQLCounterAutoLane_Time(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_SumTicketQLCounterAutoLane_Time_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_SumTicketQLCounterAutoLane_Time](@fromdate, @toDate, @stationID)", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_SumTicketQuaterAutoLane_DayShift")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_SumTicketQuaterAutoLane_DayShift_Result> cts_supervision_rpt_Traffic_SumTicketQuaterAutoLane_DayShift(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_SumTicketQuaterAutoLane_DayShift_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_SumTicketQuaterAutoLane_DayShift](@date, @shiftID, @stationID)", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_SumTicketQuaterAutoLane_Time")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_SumTicketQuaterAutoLane_Time_Result> cts_supervision_rpt_Traffic_SumTicketQuaterAutoLane_Time(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_SumTicketQuaterAutoLane_Time_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_SumTicketQuaterAutoLane_Time](@fromdate, @toDate, @stationID)", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_TicketCounter_DayShift")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_TicketCounter_DayShift_Result> cts_supervision_rpt_Traffic_TicketCounter_DayShift(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_TicketCounter_DayShift_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_TicketCounter_DayShift](@date, @shiftID, @stationID)", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_TicketCounter_Time")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_TicketCounter_Time_Result> cts_supervision_rpt_Traffic_TicketCounter_Time(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_TicketCounter_Time_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_TicketCounter_Time](@fromdate, @toDate, @stationID)", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_TicketCounterAutoLane_DayShift")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_TicketCounterAutoLane_DayShift_Result> cts_supervision_rpt_Traffic_TicketCounterAutoLane_DayShift(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_TicketCounterAutoLane_DayShift_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_TicketCounterAutoLane_DayShift](@date, @shiftID, @stationID)", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_TicketCounterAutoLane_Time")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_TicketCounterAutoLane_Time_Result> cts_supervision_rpt_Traffic_TicketCounterAutoLane_Time(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_TicketCounterAutoLane_Time_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_TicketCounterAutoLane_Time](@fromdate, @toDate, @stationID)", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_TicketMonth_DayShift")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_TicketMonth_DayShift_Result> cts_supervision_rpt_Traffic_TicketMonth_DayShift(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_TicketMonth_DayShift_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_TicketMonth_DayShift](@date, @shiftID, @stationID)", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_TicketMonth_Time")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_TicketMonth_Time_Result> cts_supervision_rpt_Traffic_TicketMonth_Time(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_TicketMonth_Time_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_TicketMonth_Time](@fromdate, @toDate, @stationID)", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_TicketMonthAutoLane_DayShift")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_TicketMonthAutoLane_DayShift_Result> cts_supervision_rpt_Traffic_TicketMonthAutoLane_DayShift(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_TicketMonthAutoLane_DayShift_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_TicketMonthAutoLane_DayShift](@date, @shiftID, @stationID)", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_TicketMonthAutoLane_Time")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_TicketMonthAutoLane_Time_Result> cts_supervision_rpt_Traffic_TicketMonthAutoLane_Time(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_TicketMonthAutoLane_Time_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_TicketMonthAutoLane_Time](@fromdate, @toDate, @stationID)", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_TicketQLCounter_DayShift")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_TicketQLCounter_DayShift_Result> cts_supervision_rpt_Traffic_TicketQLCounter_DayShift(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_TicketQLCounter_DayShift_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_TicketQLCounter_DayShift](@date, @shiftID, @stationID)", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_TicketQLCounter_Time")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_TicketQLCounter_Time_Result> cts_supervision_rpt_Traffic_TicketQLCounter_Time(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_TicketQLCounter_Time_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_TicketQLCounter_Time](@fromdate, @toDate, @stationID)", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_TicketQLCounterAutoLane_DayShift")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_TicketQLCounterAutoLane_DayShift_Result> cts_supervision_rpt_Traffic_TicketQLCounterAutoLane_DayShift(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_TicketQLCounterAutoLane_DayShift_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_TicketQLCounterAutoLane_DayShift](@date, @shiftID, @stationID)", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_TicketQLCounterAutoLane_Time")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_TicketQLCounterAutoLane_Time_Result> cts_supervision_rpt_Traffic_TicketQLCounterAutoLane_Time(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_TicketQLCounterAutoLane_Time_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_TicketQLCounterAutoLane_Time](@fromdate, @toDate, @stationID)", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_TicketQuater_DayShift")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_TicketQuater_DayShift_Result> cts_supervision_rpt_Traffic_TicketQuater_DayShift(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_TicketQuater_DayShift_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_TicketQuater_DayShift](@date, @shiftID, @stationID)", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_TicketQuater_Time")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_TicketQuater_Time_Result> cts_supervision_rpt_Traffic_TicketQuater_Time(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_TicketQuater_Time_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_TicketQuater_Time](@fromdate, @toDate, @stationID)", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_TicketQuaterAutoLane_DayShift")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_TicketQuaterAutoLane_DayShift_Result> cts_supervision_rpt_Traffic_TicketQuaterAutoLane_DayShift(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_TicketQuaterAutoLane_DayShift_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_TicketQuaterAutoLane_DayShift](@date, @shiftID, @stationID)", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_rpt_Traffic_TicketQuaterAutoLane_Time")]
        public virtual IQueryable<cts_supervision_rpt_Traffic_TicketQuaterAutoLane_Time_Result> cts_supervision_rpt_Traffic_TicketQuaterAutoLane_Time(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_rpt_Traffic_TicketQuaterAutoLane_Time_Result>("[HPEEntitiesNew].[cts_supervision_rpt_Traffic_TicketQuaterAutoLane_Time](@fromdate, @toDate, @stationID)", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_Search_PostCheckAll_ForceOpenFunction")]
        public virtual IQueryable<cts_supervision_Search_PostCheckAll_ForceOpenFunction_Result> cts_supervision_Search_PostCheckAll_ForceOpenFunction(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT, string codeReceiptNo, string codedevide, string recogplatenumber, Nullable<int> laneID, Nullable<int> employeeID, Nullable<int> routeID, Nullable<short> transactionStatus, Nullable<short> recogResultType, Nullable<int> employeeCheck, Nullable<int> errorIDEmployee, Nullable<int> systemCheck, Nullable<int> checkradioEmployee, Nullable<int> checkradioSystem)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            var codeReceiptNoParameter = codeReceiptNo != null ?
                new ObjectParameter("codeReceiptNo", codeReceiptNo) :
                new ObjectParameter("codeReceiptNo", typeof(string));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var employeeCheckParameter = employeeCheck.HasValue ?
                new ObjectParameter("EmployeeCheck", employeeCheck) :
                new ObjectParameter("EmployeeCheck", typeof(int));
    
            var errorIDEmployeeParameter = errorIDEmployee.HasValue ?
                new ObjectParameter("ErrorIDEmployee", errorIDEmployee) :
                new ObjectParameter("ErrorIDEmployee", typeof(int));
    
            var systemCheckParameter = systemCheck.HasValue ?
                new ObjectParameter("SystemCheck", systemCheck) :
                new ObjectParameter("SystemCheck", typeof(int));
    
            var checkradioEmployeeParameter = checkradioEmployee.HasValue ?
                new ObjectParameter("CheckradioEmployee", checkradioEmployee) :
                new ObjectParameter("CheckradioEmployee", typeof(int));
    
            var checkradioSystemParameter = checkradioSystem.HasValue ?
                new ObjectParameter("CheckradioSystem", checkradioSystem) :
                new ObjectParameter("CheckradioSystem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_Search_PostCheckAll_ForceOpenFunction_Result>("[HPEEntitiesNew].[cts_supervision_Search_PostCheckAll_ForceOpenFunction](@CheckTime, @fromdate, @todate, @stationID, @ShiftID, @ShiftFirst, @ShiftLast, @ShiftTime, @ShiftT, @codeReceiptNo, @codedevide, @recogplatenumber, @LaneID, @EmployeeID, @RouteID, @TransactionStatus, @RecogResultType, @EmployeeCheck, @ErrorIDEmployee, @SystemCheck, @CheckradioEmployee, @CheckradioSystem)", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter, codeReceiptNoParameter, codedevideParameter, recogplatenumberParameter, laneIDParameter, employeeIDParameter, routeIDParameter, transactionStatusParameter, recogResultTypeParameter, employeeCheckParameter, errorIDEmployeeParameter, systemCheckParameter, checkradioEmployeeParameter, checkradioSystemParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_Search_PostCheckAll_ForceOpenFunction_TotalRecord")]
        public virtual IQueryable<cts_supervision_Search_PostCheckAll_ForceOpenFunction_TotalRecord_Result> cts_supervision_Search_PostCheckAll_ForceOpenFunction_TotalRecord(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT, string codeReceiptNo, string codedevide, string recogplatenumber, Nullable<int> laneID, Nullable<int> employeeID, Nullable<int> routeID, Nullable<short> transactionStatus, Nullable<short> recogResultType, Nullable<int> employeeCheck, Nullable<int> errorIDEmployee, Nullable<int> systemCheck, Nullable<int> checkradioEmployee, Nullable<int> checkradioSystem)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            var codeReceiptNoParameter = codeReceiptNo != null ?
                new ObjectParameter("codeReceiptNo", codeReceiptNo) :
                new ObjectParameter("codeReceiptNo", typeof(string));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var employeeCheckParameter = employeeCheck.HasValue ?
                new ObjectParameter("EmployeeCheck", employeeCheck) :
                new ObjectParameter("EmployeeCheck", typeof(int));
    
            var errorIDEmployeeParameter = errorIDEmployee.HasValue ?
                new ObjectParameter("ErrorIDEmployee", errorIDEmployee) :
                new ObjectParameter("ErrorIDEmployee", typeof(int));
    
            var systemCheckParameter = systemCheck.HasValue ?
                new ObjectParameter("SystemCheck", systemCheck) :
                new ObjectParameter("SystemCheck", typeof(int));
    
            var checkradioEmployeeParameter = checkradioEmployee.HasValue ?
                new ObjectParameter("CheckradioEmployee", checkradioEmployee) :
                new ObjectParameter("CheckradioEmployee", typeof(int));
    
            var checkradioSystemParameter = checkradioSystem.HasValue ?
                new ObjectParameter("CheckradioSystem", checkradioSystem) :
                new ObjectParameter("CheckradioSystem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_Search_PostCheckAll_ForceOpenFunction_TotalRecord_Result>("[HPEEntitiesNew].[cts_supervision_Search_PostCheckAll_ForceOpenFunction_TotalRecord](@CheckTime, @fromdate, @todate, @stationID, @ShiftID, @ShiftFirst, @ShiftLast, @ShiftTime, @ShiftT, @codeReceiptNo, @codedevide, @recogplatenumber, @LaneID, @EmployeeID, @RouteID, @TransactionStatus, @RecogResultType, @EmployeeCheck, @ErrorIDEmployee, @SystemCheck, @CheckradioEmployee, @CheckradioSystem)", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter, codeReceiptNoParameter, codedevideParameter, recogplatenumberParameter, laneIDParameter, employeeIDParameter, routeIDParameter, transactionStatusParameter, recogResultTypeParameter, employeeCheckParameter, errorIDEmployeeParameter, systemCheckParameter, checkradioEmployeeParameter, checkradioSystemParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_Search_PostCheckAll_ForceOpenGroupFunction")]
        public virtual IQueryable<cts_supervision_Search_PostCheckAll_ForceOpenGroupFunction_Result> cts_supervision_Search_PostCheckAll_ForceOpenGroupFunction(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT, string codeReceiptNo, string codedevide, string recogplatenumber, Nullable<int> laneID, Nullable<int> employeeID, Nullable<int> routeID, Nullable<short> transactionStatus, Nullable<short> recogResultType, Nullable<int> employeeCheck, Nullable<int> errorIDEmployee, Nullable<int> systemCheck, Nullable<int> checkradioEmployee, Nullable<int> checkradioSystem)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            var codeReceiptNoParameter = codeReceiptNo != null ?
                new ObjectParameter("codeReceiptNo", codeReceiptNo) :
                new ObjectParameter("codeReceiptNo", typeof(string));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var employeeCheckParameter = employeeCheck.HasValue ?
                new ObjectParameter("EmployeeCheck", employeeCheck) :
                new ObjectParameter("EmployeeCheck", typeof(int));
    
            var errorIDEmployeeParameter = errorIDEmployee.HasValue ?
                new ObjectParameter("ErrorIDEmployee", errorIDEmployee) :
                new ObjectParameter("ErrorIDEmployee", typeof(int));
    
            var systemCheckParameter = systemCheck.HasValue ?
                new ObjectParameter("SystemCheck", systemCheck) :
                new ObjectParameter("SystemCheck", typeof(int));
    
            var checkradioEmployeeParameter = checkradioEmployee.HasValue ?
                new ObjectParameter("CheckradioEmployee", checkradioEmployee) :
                new ObjectParameter("CheckradioEmployee", typeof(int));
    
            var checkradioSystemParameter = checkradioSystem.HasValue ?
                new ObjectParameter("CheckradioSystem", checkradioSystem) :
                new ObjectParameter("CheckradioSystem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_Search_PostCheckAll_ForceOpenGroupFunction_Result>("[HPEEntitiesNew].[cts_supervision_Search_PostCheckAll_ForceOpenGroupFunction](@CheckTime, @fromdate, @todate, @stationID, @ShiftID, @ShiftFirst, @ShiftLast, @ShiftTime, @ShiftT, @codeReceiptNo, @codedevide, @recogplatenumber, @LaneID, @EmployeeID, @RouteID, @TransactionStatus, @RecogResultType, @EmployeeCheck, @ErrorIDEmployee, @SystemCheck, @CheckradioEmployee, @CheckradioSystem)", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter, codeReceiptNoParameter, codedevideParameter, recogplatenumberParameter, laneIDParameter, employeeIDParameter, routeIDParameter, transactionStatusParameter, recogResultTypeParameter, employeeCheckParameter, errorIDEmployeeParameter, systemCheckParameter, checkradioEmployeeParameter, checkradioSystemParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_Search_PostCheckAll_ForceOpenGroupFunction_TotalRecord")]
        public virtual IQueryable<cts_supervision_Search_PostCheckAll_ForceOpenGroupFunction_TotalRecord_Result> cts_supervision_Search_PostCheckAll_ForceOpenGroupFunction_TotalRecord(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT, string codeReceiptNo, string codedevide, string recogplatenumber, Nullable<int> laneID, Nullable<int> employeeID, Nullable<int> routeID, Nullable<short> transactionStatus, Nullable<short> recogResultType, Nullable<int> employeeCheck, Nullable<int> errorIDEmployee, Nullable<int> systemCheck, Nullable<int> checkradioEmployee, Nullable<int> checkradioSystem)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            var codeReceiptNoParameter = codeReceiptNo != null ?
                new ObjectParameter("codeReceiptNo", codeReceiptNo) :
                new ObjectParameter("codeReceiptNo", typeof(string));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var employeeCheckParameter = employeeCheck.HasValue ?
                new ObjectParameter("EmployeeCheck", employeeCheck) :
                new ObjectParameter("EmployeeCheck", typeof(int));
    
            var errorIDEmployeeParameter = errorIDEmployee.HasValue ?
                new ObjectParameter("ErrorIDEmployee", errorIDEmployee) :
                new ObjectParameter("ErrorIDEmployee", typeof(int));
    
            var systemCheckParameter = systemCheck.HasValue ?
                new ObjectParameter("SystemCheck", systemCheck) :
                new ObjectParameter("SystemCheck", typeof(int));
    
            var checkradioEmployeeParameter = checkradioEmployee.HasValue ?
                new ObjectParameter("CheckradioEmployee", checkradioEmployee) :
                new ObjectParameter("CheckradioEmployee", typeof(int));
    
            var checkradioSystemParameter = checkradioSystem.HasValue ?
                new ObjectParameter("CheckradioSystem", checkradioSystem) :
                new ObjectParameter("CheckradioSystem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_Search_PostCheckAll_ForceOpenGroupFunction_TotalRecord_Result>("[HPEEntitiesNew].[cts_supervision_Search_PostCheckAll_ForceOpenGroupFunction_TotalRecord](@CheckTime, @fromdate, @todate, @stationID, @ShiftID, @ShiftFirst, @ShiftLast, @ShiftTime, @ShiftT, @codeReceiptNo, @codedevide, @recogplatenumber, @LaneID, @EmployeeID, @RouteID, @TransactionStatus, @RecogResultType, @EmployeeCheck, @ErrorIDEmployee, @SystemCheck, @CheckradioEmployee, @CheckradioSystem)", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter, codeReceiptNoParameter, codedevideParameter, recogplatenumberParameter, laneIDParameter, employeeIDParameter, routeIDParameter, transactionStatusParameter, recogResultTypeParameter, employeeCheckParameter, errorIDEmployeeParameter, systemCheckParameter, checkradioEmployeeParameter, checkradioSystemParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_sp_SearchPostCheckVehicleForceOpenFunction")]
        public virtual IQueryable<cts_supervision_sp_SearchPostCheckVehicleForceOpenFunction_Result> cts_supervision_sp_SearchPostCheckVehicleForceOpenFunction(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preResultNotpostcheck, Nullable<int> preWatchPostChekc, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_sp_SearchPostCheckVehicleForceOpenFunction_Result>("[HPEEntitiesNew].[cts_supervision_sp_SearchPostCheckVehicleForceOpenFunction](@fromdate, @todate, @dateShift, @shiftID, @stationID, @laneID, @employeetest, @codeVehicle, @regisplatenumber, @ticketID, @notPostCheck, @resultPostCheck, @resultNotPostCheck, @resultwatchpostcheck, @errorPostCheck, @notPrePostCheck, @PreResultPostCheck, @PreResultNotpostcheck, @PreWatchPostChekc, @pretestnull, @suptestnull, @testDate, @CheckTime, @ShiftFirst, @ShiftLast)", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preResultNotpostcheckParameter, preWatchPostChekcParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_sp_SearchPostCheckVehicleGroupForceOpenFunction")]
        public virtual IQueryable<cts_supervision_sp_SearchPostCheckVehicleGroupForceOpenFunction_Result> cts_supervision_sp_SearchPostCheckVehicleGroupForceOpenFunction(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preResultNotpostcheck, Nullable<int> preWatchPostChekc, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_sp_SearchPostCheckVehicleGroupForceOpenFunction_Result>("[HPEEntitiesNew].[cts_supervision_sp_SearchPostCheckVehicleGroupForceOpenFunction](@fromdate, @todate, @dateShift, @shiftID, @stationID, @laneID, @employeetest, @codeVehicle, @regisplatenumber, @ticketID, @notPostCheck, @resultPostCheck, @resultNotPostCheck, @resultwatchpostcheck, @errorPostCheck, @notPrePostCheck, @PreResultPostCheck, @PreResultNotpostcheck, @PreWatchPostChekc, @pretestnull, @suptestnull, @testDate, @CheckTime, @ShiftFirst, @ShiftLast)", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preResultNotpostcheckParameter, preWatchPostChekcParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_sp_SearchPostCheckVehicleOBUDecutedFunction")]
        public virtual IQueryable<cts_supervision_sp_SearchPostCheckVehicleOBUDecutedFunction_Result> cts_supervision_sp_SearchPostCheckVehicleOBUDecutedFunction(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> decuted, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var decutedParameter = decuted.HasValue ?
                new ObjectParameter("decuted", decuted) :
                new ObjectParameter("decuted", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_sp_SearchPostCheckVehicleOBUDecutedFunction_Result>("[HPEEntitiesNew].[cts_supervision_sp_SearchPostCheckVehicleOBUDecutedFunction](@fromdate, @todate, @dateShift, @shiftID, @stationID, @laneID, @employeetest, @codeVehicle, @regisplatenumber, @ticketID, @notPostCheck, @resultPostCheck, @resultNotPostCheck, @resultwatchpostcheck, @errorPostCheck, @notPrePostCheck, @PreResultPostCheck, @PreWatchPostChekc, @PreResultNotpostcheck, @pretestnull, @suptestnull, @testDate, @decuted, @CheckTime, @ShiftFirst, @ShiftLast)", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, decutedParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_sp_SearchPostCheckVehicleOBUSmartCardDecutedFunction")]
        public virtual IQueryable<cts_supervision_sp_SearchPostCheckVehicleOBUSmartCardDecutedFunction_Result> cts_supervision_sp_SearchPostCheckVehicleOBUSmartCardDecutedFunction(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> decuted, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var decutedParameter = decuted.HasValue ?
                new ObjectParameter("decuted", decuted) :
                new ObjectParameter("decuted", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_sp_SearchPostCheckVehicleOBUSmartCardDecutedFunction_Result>("[HPEEntitiesNew].[cts_supervision_sp_SearchPostCheckVehicleOBUSmartCardDecutedFunction](@fromdate, @todate, @dateShift, @shiftID, @stationID, @laneID, @employeetest, @codeVehicle, @regisplatenumber, @ticketID, @notPostCheck, @resultPostCheck, @resultNotPostCheck, @resultwatchpostcheck, @errorPostCheck, @notPrePostCheck, @PreResultPostCheck, @PreWatchPostChekc, @PreResultNotpostcheck, @pretestnull, @suptestnull, @testDate, @decuted, @CheckTime, @ShiftFirst, @ShiftLast)", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, decutedParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_sp_SearchPostCheckVehiclePiriodOBUFunction")]
        public virtual IQueryable<cts_supervision_sp_SearchPostCheckVehiclePiriodOBUFunction_Result> cts_supervision_sp_SearchPostCheckVehiclePiriodOBUFunction(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> typeTicket, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var typeTicketParameter = typeTicket.HasValue ?
                new ObjectParameter("typeTicket", typeTicket) :
                new ObjectParameter("typeTicket", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_sp_SearchPostCheckVehiclePiriodOBUFunction_Result>("[HPEEntitiesNew].[cts_supervision_sp_SearchPostCheckVehiclePiriodOBUFunction](@fromdate, @todate, @dateShift, @shiftID, @stationID, @laneID, @employeetest, @codeVehicle, @regisplatenumber, @ticketID, @notPostCheck, @resultPostCheck, @resultNotPostCheck, @resultwatchpostcheck, @errorPostCheck, @notPrePostCheck, @PreResultPostCheck, @PreWatchPostChekc, @PreResultNotpostcheck, @pretestnull, @suptestnull, @testDate, @typeTicket, @CheckTime, @ShiftFirst, @ShiftLast)", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, typeTicketParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_sp_SearchPostCheckVehiclePiriodSmartCardFunction")]
        public virtual IQueryable<cts_supervision_sp_SearchPostCheckVehiclePiriodSmartCardFunction_Result> cts_supervision_sp_SearchPostCheckVehiclePiriodSmartCardFunction(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> typeTicket, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var typeTicketParameter = typeTicket.HasValue ?
                new ObjectParameter("typeTicket", typeTicket) :
                new ObjectParameter("typeTicket", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_sp_SearchPostCheckVehiclePiriodSmartCardFunction_Result>("[HPEEntitiesNew].[cts_supervision_sp_SearchPostCheckVehiclePiriodSmartCardFunction](@fromdate, @todate, @dateShift, @shiftID, @stationID, @laneID, @employeetest, @codeVehicle, @regisplatenumber, @ticketID, @notPostCheck, @resultPostCheck, @resultNotPostCheck, @resultwatchpostcheck, @errorPostCheck, @notPrePostCheck, @PreResultPostCheck, @PreWatchPostChekc, @PreResultNotpostcheck, @pretestnull, @suptestnull, @testDate, @typeTicket, @CheckTime, @ShiftFirst, @ShiftLast)", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, typeTicketParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_sp_SearchPostCheckVehiclePiriodTicketFunction")]
        public virtual IQueryable<cts_supervision_sp_SearchPostCheckVehiclePiriodTicketFunction_Result> cts_supervision_sp_SearchPostCheckVehiclePiriodTicketFunction(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> typeTicket, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var typeTicketParameter = typeTicket.HasValue ?
                new ObjectParameter("typeTicket", typeTicket) :
                new ObjectParameter("typeTicket", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_sp_SearchPostCheckVehiclePiriodTicketFunction_Result>("[HPEEntitiesNew].[cts_supervision_sp_SearchPostCheckVehiclePiriodTicketFunction](@fromdate, @todate, @dateShift, @shiftID, @stationID, @laneID, @employeetest, @codeVehicle, @regisplatenumber, @ticketID, @notPostCheck, @resultPostCheck, @resultNotPostCheck, @resultwatchpostcheck, @errorPostCheck, @notPrePostCheck, @PreResultPostCheck, @PreWatchPostChekc, @PreResultNotpostcheck, @pretestnull, @suptestnull, @testDate, @typeTicket, @CheckTime, @ShiftFirst, @ShiftLast)", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, typeTicketParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_sp_SearchPostCheckVehicleSmartCardDecutedFunction")]
        public virtual IQueryable<cts_supervision_sp_SearchPostCheckVehicleSmartCardDecutedFunction_Result> cts_supervision_sp_SearchPostCheckVehicleSmartCardDecutedFunction(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> decuted, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var decutedParameter = decuted.HasValue ?
                new ObjectParameter("decuted", decuted) :
                new ObjectParameter("decuted", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_sp_SearchPostCheckVehicleSmartCardDecutedFunction_Result>("[HPEEntitiesNew].[cts_supervision_sp_SearchPostCheckVehicleSmartCardDecutedFunction](@fromdate, @todate, @dateShift, @shiftID, @stationID, @laneID, @employeetest, @codeVehicle, @regisplatenumber, @ticketID, @notPostCheck, @resultPostCheck, @resultNotPostCheck, @resultwatchpostcheck, @errorPostCheck, @notPrePostCheck, @PreResultPostCheck, @PreWatchPostChekc, @PreResultNotpostcheck, @pretestnull, @suptestnull, @testDate, @decuted, @CheckTime, @ShiftFirst, @ShiftLast)", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, decutedParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_sp_SearchPostCheckVehicleSmartCardFunction")]
        public virtual IQueryable<cts_supervision_sp_SearchPostCheckVehicleSmartCardFunction_Result> cts_supervision_sp_SearchPostCheckVehicleSmartCardFunction(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preResultNotpostcheck, Nullable<int> preWatchPostChekc, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_sp_SearchPostCheckVehicleSmartCardFunction_Result>("[HPEEntitiesNew].[cts_supervision_sp_SearchPostCheckVehicleSmartCardFunction](@fromdate, @todate, @dateShift, @shiftID, @stationID, @laneID, @employeetest, @codeVehicle, @regisplatenumber, @ticketID, @notPostCheck, @resultPostCheck, @resultNotPostCheck, @resultwatchpostcheck, @errorPostCheck, @notPrePostCheck, @PreResultPostCheck, @PreResultNotpostcheck, @PreWatchPostChekc, @pretestnull, @suptestnull, @testDate, @CheckTime, @ShiftFirst, @ShiftLast)", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preResultNotpostcheckParameter, preWatchPostChekcParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_sp_SearchPostCheckVehicleTicketCounterFunction")]
        public virtual IQueryable<cts_supervision_sp_SearchPostCheckVehicleTicketCounterFunction_Result> cts_supervision_sp_SearchPostCheckVehicleTicketCounterFunction(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preResultNotpostcheck, Nullable<int> preWatchPostChekc, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_sp_SearchPostCheckVehicleTicketCounterFunction_Result>("[HPEEntitiesNew].[cts_supervision_sp_SearchPostCheckVehicleTicketCounterFunction](@fromdate, @todate, @dateShift, @shiftID, @stationID, @laneID, @employeetest, @codeVehicle, @regisplatenumber, @ticketID, @notPostCheck, @resultPostCheck, @resultNotPostCheck, @resultwatchpostcheck, @errorPostCheck, @notPrePostCheck, @PreResultPostCheck, @PreResultNotpostcheck, @PreWatchPostChekc, @pretestnull, @suptestnull, @testDate, @CheckTime, @ShiftFirst, @ShiftLast)", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preResultNotpostcheckParameter, preWatchPostChekcParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_sp_TrafficFunction")]
        public virtual IQueryable<cts_supervision_sp_TrafficFunction_Result> cts_supervision_sp_TrafficFunction(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> station, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_sp_TrafficFunction_Result>("[HPEEntitiesNew].[cts_supervision_sp_TrafficFunction](@CheckTime, @FromDate, @ToDate, @Station, @ShiftID, @ShiftFirst, @ShiftLast, @ShiftTime, @ShiftT)", checkTimeParameter, fromDateParameter, toDateParameter, stationParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_sp_TrafficFunction_old")]
        public virtual IQueryable<cts_supervision_sp_TrafficFunction_old_Result> cts_supervision_sp_TrafficFunction_old(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> station, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_sp_TrafficFunction_old_Result>("[HPEEntitiesNew].[cts_supervision_sp_TrafficFunction_old](@CheckTime, @FromDate, @ToDate, @Station, @ShiftID, @ShiftFirst, @ShiftLast, @ShiftTime, @ShiftT)", checkTimeParameter, fromDateParameter, toDateParameter, stationParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "cts_supervision_sp_TrafficFunction_TrafficVol")]
        public virtual IQueryable<cts_supervision_sp_TrafficFunction_TrafficVol_Result> cts_supervision_sp_TrafficFunction_TrafficVol(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> station, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<cts_supervision_sp_TrafficFunction_TrafficVol_Result>("[HPEEntitiesNew].[cts_supervision_sp_TrafficFunction_TrafficVol](@CheckTime, @FromDate, @ToDate, @Station, @ShiftID, @ShiftFirst, @ShiftLast, @ShiftTime, @ShiftT)", checkTimeParameter, fromDateParameter, toDateParameter, stationParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "fnCSVStr2Table")]
        public virtual IQueryable<fnCSVStr2Table_Result> fnCSVStr2Table(string cSVStr)
        {
            var cSVStrParameter = cSVStr != null ?
                new ObjectParameter("CSVStr", cSVStr) :
                new ObjectParameter("CSVStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnCSVStr2Table_Result>("[HPEEntitiesNew].[fnCSVStr2Table](@CSVStr)", cSVStrParameter);
        }
    
        [DbFunction("HPEEntitiesNew", "sp_TrackingDeviceTransaction")]
        public virtual IQueryable<sp_TrackingDeviceTransaction_Result> sp_TrackingDeviceTransaction(string str)
        {
            var strParameter = str != null ?
                new ObjectParameter("str", str) :
                new ObjectParameter("str", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<sp_TrackingDeviceTransaction_Result>("[HPEEntitiesNew].[sp_TrackingDeviceTransaction](@str)", strParameter);
        }
    
        public virtual ObjectResult<f_sp_IN_CheckSmartCard_GetByCardIDAndSortTransactionID_Result> f_sp_IN_CheckSmartCard_GetByCardIDAndSortTransactionID(string cardID, string transactionID)
        {
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_sp_IN_CheckSmartCard_GetByCardIDAndSortTransactionID_Result>("f_sp_IN_CheckSmartCard_GetByCardIDAndSortTransactionID", cardIDParameter, transactionIDParameter);
        }
    
        public virtual ObjectResult<BaoCaoDoanhThuTongHop_Result> BaoCaoDoanhThuTongHop(Nullable<int> station, Nullable<int> shiftID, Nullable<System.DateTime> date)
        {
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BaoCaoDoanhThuTongHop_Result>("BaoCaoDoanhThuTongHop", stationParameter, shiftIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<BaoCaoDoanhThuTongHopTai_Tram_Result> BaoCaoDoanhThuTongHopTai_Tram(Nullable<int> station, Nullable<int> shiftID, Nullable<System.DateTime> date)
        {
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BaoCaoDoanhThuTongHopTai_Tram_Result>("BaoCaoDoanhThuTongHopTai_Tram", stationParameter, shiftIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<BaoCaoDoanhThuTongHopTai_Tram_ThangVaNam_Result> BaoCaoDoanhThuTongHopTai_Tram_ThangVaNam(Nullable<int> station, Nullable<int> month, Nullable<int> year)
        {
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BaoCaoDoanhThuTongHopTai_Tram_ThangVaNam_Result>("BaoCaoDoanhThuTongHopTai_Tram_ThangVaNam", stationParameter, monthParameter, yearParameter);
        }
    
        public virtual ObjectResult<BaoCaoDoanhThuTongHopTai_Tram_TuNgayDenNgay_Result> BaoCaoDoanhThuTongHopTai_Tram_TuNgayDenNgay(Nullable<int> station, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BaoCaoDoanhThuTongHopTai_Tram_TuNgayDenNgay_Result>("BaoCaoDoanhThuTongHopTai_Tram_TuNgayDenNgay", stationParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<BaoCaoDoanhThuTongHopTai_TrungTam_Result> BaoCaoDoanhThuTongHopTai_TrungTam(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BaoCaoDoanhThuTongHopTai_TrungTam_Result>("BaoCaoDoanhThuTongHopTai_TrungTam", dateParameter);
        }
    
        public virtual int BaoCaoDoanhThuTongHopTaiTram_Nam(Nullable<int> station, Nullable<int> year)
        {
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BaoCaoDoanhThuTongHopTaiTram_Nam", stationParameter, yearParameter);
        }
    
        public virtual int BaoCaoTongHopDoanhThuNam(Nullable<int> station, Nullable<int> year)
        {
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BaoCaoTongHopDoanhThuNam", stationParameter, yearParameter);
        }
    
        public virtual int CopyData(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CopyData", fromDateParameter, toDateParameter);
        }
    
        public virtual int Create_Partion_From_Table(string table, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Create_Partion_From_Table", tableParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int CreateLog(string msg, Nullable<bool> start)
        {
            var msgParameter = msg != null ?
                new ObjectParameter("Msg", msg) :
                new ObjectParameter("Msg", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateLog", msgParameter, startParameter);
        }
    
        public virtual int CreateView_From_Partition(string table, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateView_From_Partition", tableParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int CreateView_From_Partition_2(string table, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string viewNameId)
        {
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var viewNameIdParameter = viewNameId != null ?
                new ObjectParameter("ViewNameId", viewNameId) :
                new ObjectParameter("ViewNameId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateView_From_Partition_2", tableParameter, fromDateParameter, toDateParameter, viewNameIdParameter);
        }
    
        public virtual int crosstab(string select, string sumfunc, string pivot, string table)
        {
            var selectParameter = select != null ?
                new ObjectParameter("select", select) :
                new ObjectParameter("select", typeof(string));
    
            var sumfuncParameter = sumfunc != null ?
                new ObjectParameter("sumfunc", sumfunc) :
                new ObjectParameter("sumfunc", typeof(string));
    
            var pivotParameter = pivot != null ?
                new ObjectParameter("pivot", pivot) :
                new ObjectParameter("pivot", typeof(string));
    
            var tableParameter = table != null ?
                new ObjectParameter("table", table) :
                new ObjectParameter("table", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("crosstab", selectParameter, sumfuncParameter, pivotParameter, tableParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> cts_supervision_GetStationNum(Nullable<int> stationID, Nullable<int> checklanetype)
        {
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var checklanetypeParameter = checklanetype.HasValue ?
                new ObjectParameter("checklanetype", checklanetype) :
                new ObjectParameter("checklanetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("cts_supervision_GetStationNum", stationIDParameter, checklanetypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> cts_supervision_PostCheckGroup(string tablename, Nullable<System.Guid> groupid)
        {
            var tablenameParameter = tablename != null ?
                new ObjectParameter("tablename", tablename) :
                new ObjectParameter("tablename", typeof(string));
    
            var groupidParameter = groupid.HasValue ?
                new ObjectParameter("groupid", groupid) :
                new ObjectParameter("groupid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("cts_supervision_PostCheckGroup", tablenameParameter, groupidParameter);
        }
    
        public virtual ObjectResult<cts_supervision_rpt_Traffic_Result> cts_supervision_rpt_Traffic(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> station, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> mAX_IN, Nullable<int> mAX_OUT)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var mAX_INParameter = mAX_IN.HasValue ?
                new ObjectParameter("MAX_IN", mAX_IN) :
                new ObjectParameter("MAX_IN", typeof(int));
    
            var mAX_OUTParameter = mAX_OUT.HasValue ?
                new ObjectParameter("MAX_OUT", mAX_OUT) :
                new ObjectParameter("MAX_OUT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_rpt_Traffic_Result>("cts_supervision_rpt_Traffic", checkTimeParameter, fromDateParameter, toDateParameter, stationParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, mAX_INParameter, mAX_OUTParameter);
        }
    
        public virtual ObjectResult<cts_supervision_Search_OverTimeCard_Result> cts_supervision_Search_OverTimeCard(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT, string codedevide, string recogplatenumber, Nullable<int> laneID, Nullable<int> limitedTime, Nullable<long> pageNumber, Nullable<int> recordsPerPage)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var limitedTimeParameter = limitedTime.HasValue ?
                new ObjectParameter("LimitedTime", limitedTime) :
                new ObjectParameter("LimitedTime", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_Search_OverTimeCard_Result>("cts_supervision_Search_OverTimeCard", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter, codedevideParameter, recogplatenumberParameter, laneIDParameter, limitedTimeParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> cts_supervision_Search_OverTimeCard_TotalRecord(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT, string codedevide, string recogplatenumber, Nullable<int> laneID, Nullable<int> limitedTime)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var limitedTimeParameter = limitedTime.HasValue ?
                new ObjectParameter("LimitedTime", limitedTime) :
                new ObjectParameter("LimitedTime", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("cts_supervision_Search_OverTimeCard_TotalRecord", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter, codedevideParameter, recogplatenumberParameter, laneIDParameter, limitedTimeParameter);
        }
    
        public virtual int cts_supervision_Search_PostCheckAll(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT, string codeReceiptNo, string codedevide, string recogplatenumber, Nullable<int> laneID, Nullable<int> employeeID, Nullable<int> routeID, Nullable<short> transactionStatus, Nullable<short> recogResultType, Nullable<int> employeeCheck, Nullable<int> errorIDEmployee, Nullable<int> systemCheck, Nullable<int> checkradioEmployee, Nullable<int> checkradioSystem, Nullable<long> pageNumber, Nullable<int> recordsPerPage, Nullable<int> transactionType)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            var codeReceiptNoParameter = codeReceiptNo != null ?
                new ObjectParameter("codeReceiptNo", codeReceiptNo) :
                new ObjectParameter("codeReceiptNo", typeof(string));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var employeeCheckParameter = employeeCheck.HasValue ?
                new ObjectParameter("EmployeeCheck", employeeCheck) :
                new ObjectParameter("EmployeeCheck", typeof(int));
    
            var errorIDEmployeeParameter = errorIDEmployee.HasValue ?
                new ObjectParameter("ErrorIDEmployee", errorIDEmployee) :
                new ObjectParameter("ErrorIDEmployee", typeof(int));
    
            var systemCheckParameter = systemCheck.HasValue ?
                new ObjectParameter("SystemCheck", systemCheck) :
                new ObjectParameter("SystemCheck", typeof(int));
    
            var checkradioEmployeeParameter = checkradioEmployee.HasValue ?
                new ObjectParameter("CheckradioEmployee", checkradioEmployee) :
                new ObjectParameter("CheckradioEmployee", typeof(int));
    
            var checkradioSystemParameter = checkradioSystem.HasValue ?
                new ObjectParameter("CheckradioSystem", checkradioSystem) :
                new ObjectParameter("CheckradioSystem", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_Search_PostCheckAll", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter, codeReceiptNoParameter, codedevideParameter, recogplatenumberParameter, laneIDParameter, employeeIDParameter, routeIDParameter, transactionStatusParameter, recogResultTypeParameter, employeeCheckParameter, errorIDEmployeeParameter, systemCheckParameter, checkradioEmployeeParameter, checkradioSystemParameter, pageNumberParameter, recordsPerPageParameter, transactionTypeParameter);
        }
    
        public virtual int cts_supervision_Search_PostCheckAll_TotalRecord(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT, string codeReceiptNo, string codedevide, string recogplatenumber, Nullable<int> laneID, Nullable<int> employeeID, Nullable<int> routeID, Nullable<short> transactionStatus, Nullable<short> recogResultType, Nullable<int> employeeCheck, Nullable<int> errorIDEmployee, Nullable<int> systemCheck, Nullable<int> checkradioEmployee, Nullable<int> checkradioSystem, Nullable<int> transactionType)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            var codeReceiptNoParameter = codeReceiptNo != null ?
                new ObjectParameter("codeReceiptNo", codeReceiptNo) :
                new ObjectParameter("codeReceiptNo", typeof(string));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var employeeCheckParameter = employeeCheck.HasValue ?
                new ObjectParameter("EmployeeCheck", employeeCheck) :
                new ObjectParameter("EmployeeCheck", typeof(int));
    
            var errorIDEmployeeParameter = errorIDEmployee.HasValue ?
                new ObjectParameter("ErrorIDEmployee", errorIDEmployee) :
                new ObjectParameter("ErrorIDEmployee", typeof(int));
    
            var systemCheckParameter = systemCheck.HasValue ?
                new ObjectParameter("SystemCheck", systemCheck) :
                new ObjectParameter("SystemCheck", typeof(int));
    
            var checkradioEmployeeParameter = checkradioEmployee.HasValue ?
                new ObjectParameter("CheckradioEmployee", checkradioEmployee) :
                new ObjectParameter("CheckradioEmployee", typeof(int));
    
            var checkradioSystemParameter = checkradioSystem.HasValue ?
                new ObjectParameter("CheckradioSystem", checkradioSystem) :
                new ObjectParameter("CheckradioSystem", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_Search_PostCheckAll_TotalRecord", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter, codeReceiptNoParameter, codedevideParameter, recogplatenumberParameter, laneIDParameter, employeeIDParameter, routeIDParameter, transactionStatusParameter, recogResultTypeParameter, employeeCheckParameter, errorIDEmployeeParameter, systemCheckParameter, checkradioEmployeeParameter, checkradioSystemParameter, transactionTypeParameter);
        }
    
        public virtual int cts_supervision_Search_PrepaidCard_Info_InOut(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT, string codeReceiptNo, string codedevide, string recogplatenumber, Nullable<int> laneID, Nullable<int> employeeID, Nullable<int> routeID, Nullable<short> transactionStatus, Nullable<short> recogResultType, Nullable<int> employeeCheck, Nullable<int> errorIDEmployee, Nullable<int> systemCheck, Nullable<int> checkradioEmployee, Nullable<int> checkradioSystem, Nullable<long> pageNumber, Nullable<int> recordsPerPage)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            var codeReceiptNoParameter = codeReceiptNo != null ?
                new ObjectParameter("codeReceiptNo", codeReceiptNo) :
                new ObjectParameter("codeReceiptNo", typeof(string));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var employeeCheckParameter = employeeCheck.HasValue ?
                new ObjectParameter("EmployeeCheck", employeeCheck) :
                new ObjectParameter("EmployeeCheck", typeof(int));
    
            var errorIDEmployeeParameter = errorIDEmployee.HasValue ?
                new ObjectParameter("ErrorIDEmployee", errorIDEmployee) :
                new ObjectParameter("ErrorIDEmployee", typeof(int));
    
            var systemCheckParameter = systemCheck.HasValue ?
                new ObjectParameter("SystemCheck", systemCheck) :
                new ObjectParameter("SystemCheck", typeof(int));
    
            var checkradioEmployeeParameter = checkradioEmployee.HasValue ?
                new ObjectParameter("CheckradioEmployee", checkradioEmployee) :
                new ObjectParameter("CheckradioEmployee", typeof(int));
    
            var checkradioSystemParameter = checkradioSystem.HasValue ?
                new ObjectParameter("CheckradioSystem", checkradioSystem) :
                new ObjectParameter("CheckradioSystem", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_Search_PrepaidCard_Info_InOut", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter, codeReceiptNoParameter, codedevideParameter, recogplatenumberParameter, laneIDParameter, employeeIDParameter, routeIDParameter, transactionStatusParameter, recogResultTypeParameter, employeeCheckParameter, errorIDEmployeeParameter, systemCheckParameter, checkradioEmployeeParameter, checkradioSystemParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<cts_supervision_Search_PrepaidCard_Info_InOut_For_Report_Result> cts_supervision_Search_PrepaidCard_Info_InOut_For_Report(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT, string codeReceiptNo, string codedevide, string recogplatenumber, Nullable<int> laneID, Nullable<int> employeeID, Nullable<int> routeID, Nullable<short> transactionStatus, Nullable<short> recogResultType, Nullable<int> employeeCheck, Nullable<int> errorIDEmployee, Nullable<int> systemCheck, Nullable<int> checkradioEmployee, Nullable<int> checkradioSystem)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            var codeReceiptNoParameter = codeReceiptNo != null ?
                new ObjectParameter("codeReceiptNo", codeReceiptNo) :
                new ObjectParameter("codeReceiptNo", typeof(string));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var employeeCheckParameter = employeeCheck.HasValue ?
                new ObjectParameter("EmployeeCheck", employeeCheck) :
                new ObjectParameter("EmployeeCheck", typeof(int));
    
            var errorIDEmployeeParameter = errorIDEmployee.HasValue ?
                new ObjectParameter("ErrorIDEmployee", errorIDEmployee) :
                new ObjectParameter("ErrorIDEmployee", typeof(int));
    
            var systemCheckParameter = systemCheck.HasValue ?
                new ObjectParameter("SystemCheck", systemCheck) :
                new ObjectParameter("SystemCheck", typeof(int));
    
            var checkradioEmployeeParameter = checkradioEmployee.HasValue ?
                new ObjectParameter("CheckradioEmployee", checkradioEmployee) :
                new ObjectParameter("CheckradioEmployee", typeof(int));
    
            var checkradioSystemParameter = checkradioSystem.HasValue ?
                new ObjectParameter("CheckradioSystem", checkradioSystem) :
                new ObjectParameter("CheckradioSystem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_Search_PrepaidCard_Info_InOut_For_Report_Result>("cts_supervision_Search_PrepaidCard_Info_InOut_For_Report", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter, codeReceiptNoParameter, codedevideParameter, recogplatenumberParameter, laneIDParameter, employeeIDParameter, routeIDParameter, transactionStatusParameter, recogResultTypeParameter, employeeCheckParameter, errorIDEmployeeParameter, systemCheckParameter, checkradioEmployeeParameter, checkradioSystemParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> cts_supervision_Search_PrepaidCard_Info_InOut_TotalRecord(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT, string codeReceiptNo, string codedevide, string recogplatenumber, Nullable<int> laneID, Nullable<int> employeeID, Nullable<int> routeID, Nullable<short> transactionStatus, Nullable<short> recogResultType, Nullable<int> employeeCheck, Nullable<int> errorIDEmployee, Nullable<int> systemCheck, Nullable<int> checkradioEmployee, Nullable<int> checkradioSystem)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            var codeReceiptNoParameter = codeReceiptNo != null ?
                new ObjectParameter("codeReceiptNo", codeReceiptNo) :
                new ObjectParameter("codeReceiptNo", typeof(string));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var employeeCheckParameter = employeeCheck.HasValue ?
                new ObjectParameter("EmployeeCheck", employeeCheck) :
                new ObjectParameter("EmployeeCheck", typeof(int));
    
            var errorIDEmployeeParameter = errorIDEmployee.HasValue ?
                new ObjectParameter("ErrorIDEmployee", errorIDEmployee) :
                new ObjectParameter("ErrorIDEmployee", typeof(int));
    
            var systemCheckParameter = systemCheck.HasValue ?
                new ObjectParameter("SystemCheck", systemCheck) :
                new ObjectParameter("SystemCheck", typeof(int));
    
            var checkradioEmployeeParameter = checkradioEmployee.HasValue ?
                new ObjectParameter("CheckradioEmployee", checkradioEmployee) :
                new ObjectParameter("CheckradioEmployee", typeof(int));
    
            var checkradioSystemParameter = checkradioSystem.HasValue ?
                new ObjectParameter("CheckradioSystem", checkradioSystem) :
                new ObjectParameter("CheckradioSystem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("cts_supervision_Search_PrepaidCard_Info_InOut_TotalRecord", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter, codeReceiptNoParameter, codedevideParameter, recogplatenumberParameter, laneIDParameter, employeeIDParameter, routeIDParameter, transactionStatusParameter, recogResultTypeParameter, employeeCheckParameter, errorIDEmployeeParameter, systemCheckParameter, checkradioEmployeeParameter, checkradioSystemParameter);
        }
    
        public virtual ObjectResult<cts_supervision_Search_Sample_Result> cts_supervision_Search_Sample(Nullable<int> pageNumber, Nullable<int> recordsPerPage)
        {
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_Search_Sample_Result>("cts_supervision_Search_Sample", pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual int cts_supervision_Search_SmartCard_Info_InOut(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationIDIn, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT, string codeReceiptNo, string codedevide, string recogplatenumber, Nullable<int> laneID, Nullable<int> vehicleTypeID, Nullable<int> employeeID, Nullable<int> routeID, Nullable<short> transactionStatus, Nullable<short> recogResultType, Nullable<int> employeeCheck, Nullable<int> errorIDEmployee, Nullable<int> systemCheck, Nullable<int> checkradioEmployee, Nullable<int> checkradioSystem, string computerName, Nullable<long> pageNumber, Nullable<int> recordsPerPage)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDInParameter = stationIDIn.HasValue ?
                new ObjectParameter("stationIDIn", stationIDIn) :
                new ObjectParameter("stationIDIn", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            var codeReceiptNoParameter = codeReceiptNo != null ?
                new ObjectParameter("codeReceiptNo", codeReceiptNo) :
                new ObjectParameter("codeReceiptNo", typeof(string));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var employeeCheckParameter = employeeCheck.HasValue ?
                new ObjectParameter("EmployeeCheck", employeeCheck) :
                new ObjectParameter("EmployeeCheck", typeof(int));
    
            var errorIDEmployeeParameter = errorIDEmployee.HasValue ?
                new ObjectParameter("ErrorIDEmployee", errorIDEmployee) :
                new ObjectParameter("ErrorIDEmployee", typeof(int));
    
            var systemCheckParameter = systemCheck.HasValue ?
                new ObjectParameter("SystemCheck", systemCheck) :
                new ObjectParameter("SystemCheck", typeof(int));
    
            var checkradioEmployeeParameter = checkradioEmployee.HasValue ?
                new ObjectParameter("CheckradioEmployee", checkradioEmployee) :
                new ObjectParameter("CheckradioEmployee", typeof(int));
    
            var checkradioSystemParameter = checkradioSystem.HasValue ?
                new ObjectParameter("CheckradioSystem", checkradioSystem) :
                new ObjectParameter("CheckradioSystem", typeof(int));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_Search_SmartCard_Info_InOut", checkTimeParameter, fromdateParameter, todateParameter, stationIDInParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter, codeReceiptNoParameter, codedevideParameter, recogplatenumberParameter, laneIDParameter, vehicleTypeIDParameter, employeeIDParameter, routeIDParameter, transactionStatusParameter, recogResultTypeParameter, employeeCheckParameter, errorIDEmployeeParameter, systemCheckParameter, checkradioEmployeeParameter, checkradioSystemParameter, computerNameParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual int cts_supervision_Search_SmartCard_Info_InOut_IsVehicleInfoManual_(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT, string codeReceiptNo, string codedevide, string recogplatenumber, Nullable<int> laneID, Nullable<int> employeeID, Nullable<int> routeID, Nullable<short> transactionStatus, Nullable<short> recogResultType, Nullable<int> employeeCheck, Nullable<int> errorIDEmployee, Nullable<int> systemCheck, Nullable<int> checkradioEmployee, Nullable<int> checkradioSystem, Nullable<long> pageNumber, Nullable<int> recordsPerPage)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            var codeReceiptNoParameter = codeReceiptNo != null ?
                new ObjectParameter("codeReceiptNo", codeReceiptNo) :
                new ObjectParameter("codeReceiptNo", typeof(string));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var employeeCheckParameter = employeeCheck.HasValue ?
                new ObjectParameter("EmployeeCheck", employeeCheck) :
                new ObjectParameter("EmployeeCheck", typeof(int));
    
            var errorIDEmployeeParameter = errorIDEmployee.HasValue ?
                new ObjectParameter("ErrorIDEmployee", errorIDEmployee) :
                new ObjectParameter("ErrorIDEmployee", typeof(int));
    
            var systemCheckParameter = systemCheck.HasValue ?
                new ObjectParameter("SystemCheck", systemCheck) :
                new ObjectParameter("SystemCheck", typeof(int));
    
            var checkradioEmployeeParameter = checkradioEmployee.HasValue ?
                new ObjectParameter("CheckradioEmployee", checkradioEmployee) :
                new ObjectParameter("CheckradioEmployee", typeof(int));
    
            var checkradioSystemParameter = checkradioSystem.HasValue ?
                new ObjectParameter("CheckradioSystem", checkradioSystem) :
                new ObjectParameter("CheckradioSystem", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_Search_SmartCard_Info_InOut_IsVehicleInfoManual_", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter, codeReceiptNoParameter, codedevideParameter, recogplatenumberParameter, laneIDParameter, employeeIDParameter, routeIDParameter, transactionStatusParameter, recogResultTypeParameter, employeeCheckParameter, errorIDEmployeeParameter, systemCheckParameter, checkradioEmployeeParameter, checkradioSystemParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<cts_supervision_Search_SmartCard_Info_InOut_For_Report_Result> cts_supervision_Search_SmartCard_Info_InOut_For_Report(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationIDIn, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT, string codeReceiptNo, string codedevide, string recogplatenumber, Nullable<int> laneID, Nullable<int> vehicleTypeID, Nullable<int> employeeID, Nullable<int> routeID, Nullable<short> transactionStatus, Nullable<short> recogResultType, Nullable<int> employeeCheck, Nullable<int> errorIDEmployee, Nullable<int> systemCheck, Nullable<int> checkradioEmployee, Nullable<int> checkradioSystem)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDInParameter = stationIDIn.HasValue ?
                new ObjectParameter("stationIDIn", stationIDIn) :
                new ObjectParameter("stationIDIn", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            var codeReceiptNoParameter = codeReceiptNo != null ?
                new ObjectParameter("codeReceiptNo", codeReceiptNo) :
                new ObjectParameter("codeReceiptNo", typeof(string));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var employeeCheckParameter = employeeCheck.HasValue ?
                new ObjectParameter("EmployeeCheck", employeeCheck) :
                new ObjectParameter("EmployeeCheck", typeof(int));
    
            var errorIDEmployeeParameter = errorIDEmployee.HasValue ?
                new ObjectParameter("ErrorIDEmployee", errorIDEmployee) :
                new ObjectParameter("ErrorIDEmployee", typeof(int));
    
            var systemCheckParameter = systemCheck.HasValue ?
                new ObjectParameter("SystemCheck", systemCheck) :
                new ObjectParameter("SystemCheck", typeof(int));
    
            var checkradioEmployeeParameter = checkradioEmployee.HasValue ?
                new ObjectParameter("CheckradioEmployee", checkradioEmployee) :
                new ObjectParameter("CheckradioEmployee", typeof(int));
    
            var checkradioSystemParameter = checkradioSystem.HasValue ?
                new ObjectParameter("CheckradioSystem", checkradioSystem) :
                new ObjectParameter("CheckradioSystem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_Search_SmartCard_Info_InOut_For_Report_Result>("cts_supervision_Search_SmartCard_Info_InOut_For_Report", checkTimeParameter, fromdateParameter, todateParameter, stationIDInParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter, codeReceiptNoParameter, codedevideParameter, recogplatenumberParameter, laneIDParameter, vehicleTypeIDParameter, employeeIDParameter, routeIDParameter, transactionStatusParameter, recogResultTypeParameter, employeeCheckParameter, errorIDEmployeeParameter, systemCheckParameter, checkradioEmployeeParameter, checkradioSystemParameter);
        }
    
        public virtual ObjectResult<cts_supervision_Search_SmartCard_Info_InOut_For_Report_IsVehicleInfoManual__Result> cts_supervision_Search_SmartCard_Info_InOut_For_Report_IsVehicleInfoManual_(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT, string codeReceiptNo, string codedevide, string recogplatenumber, Nullable<int> laneID, Nullable<int> employeeID, Nullable<int> routeID, Nullable<bool> isVehicleInfoManual, Nullable<short> transactionStatus, Nullable<short> recogResultType, Nullable<int> employeeCheck, Nullable<int> errorIDEmployee, Nullable<int> systemCheck, Nullable<int> checkradioEmployee, Nullable<int> checkradioSystem)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            var codeReceiptNoParameter = codeReceiptNo != null ?
                new ObjectParameter("codeReceiptNo", codeReceiptNo) :
                new ObjectParameter("codeReceiptNo", typeof(string));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var isVehicleInfoManualParameter = isVehicleInfoManual.HasValue ?
                new ObjectParameter("IsVehicleInfoManual", isVehicleInfoManual) :
                new ObjectParameter("IsVehicleInfoManual", typeof(bool));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var employeeCheckParameter = employeeCheck.HasValue ?
                new ObjectParameter("EmployeeCheck", employeeCheck) :
                new ObjectParameter("EmployeeCheck", typeof(int));
    
            var errorIDEmployeeParameter = errorIDEmployee.HasValue ?
                new ObjectParameter("ErrorIDEmployee", errorIDEmployee) :
                new ObjectParameter("ErrorIDEmployee", typeof(int));
    
            var systemCheckParameter = systemCheck.HasValue ?
                new ObjectParameter("SystemCheck", systemCheck) :
                new ObjectParameter("SystemCheck", typeof(int));
    
            var checkradioEmployeeParameter = checkradioEmployee.HasValue ?
                new ObjectParameter("CheckradioEmployee", checkradioEmployee) :
                new ObjectParameter("CheckradioEmployee", typeof(int));
    
            var checkradioSystemParameter = checkradioSystem.HasValue ?
                new ObjectParameter("CheckradioSystem", checkradioSystem) :
                new ObjectParameter("CheckradioSystem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_Search_SmartCard_Info_InOut_For_Report_IsVehicleInfoManual__Result>("cts_supervision_Search_SmartCard_Info_InOut_For_Report_IsVehicleInfoManual_", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter, codeReceiptNoParameter, codedevideParameter, recogplatenumberParameter, laneIDParameter, employeeIDParameter, routeIDParameter, isVehicleInfoManualParameter, transactionStatusParameter, recogResultTypeParameter, employeeCheckParameter, errorIDEmployeeParameter, systemCheckParameter, checkradioEmployeeParameter, checkradioSystemParameter);
        }
    
        public virtual int cts_supervision_Search_SmartCard_Info_InOut_TotalRecord(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationIDIn, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT, string codeReceiptNo, string codedevide, string recogplatenumber, Nullable<int> laneID, Nullable<int> vehicleTypeID, Nullable<int> employeeID, Nullable<int> routeID, Nullable<short> transactionStatus, Nullable<short> paperCard, Nullable<short> recogResultType, Nullable<int> employeeCheck, Nullable<int> errorIDEmployee, Nullable<int> systemCheck, Nullable<int> checkradioEmployee, Nullable<int> checkradioSystem, string computerName)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDInParameter = stationIDIn.HasValue ?
                new ObjectParameter("stationIDIn", stationIDIn) :
                new ObjectParameter("stationIDIn", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            var codeReceiptNoParameter = codeReceiptNo != null ?
                new ObjectParameter("codeReceiptNo", codeReceiptNo) :
                new ObjectParameter("codeReceiptNo", typeof(string));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var paperCardParameter = paperCard.HasValue ?
                new ObjectParameter("PaperCard", paperCard) :
                new ObjectParameter("PaperCard", typeof(short));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var employeeCheckParameter = employeeCheck.HasValue ?
                new ObjectParameter("EmployeeCheck", employeeCheck) :
                new ObjectParameter("EmployeeCheck", typeof(int));
    
            var errorIDEmployeeParameter = errorIDEmployee.HasValue ?
                new ObjectParameter("ErrorIDEmployee", errorIDEmployee) :
                new ObjectParameter("ErrorIDEmployee", typeof(int));
    
            var systemCheckParameter = systemCheck.HasValue ?
                new ObjectParameter("SystemCheck", systemCheck) :
                new ObjectParameter("SystemCheck", typeof(int));
    
            var checkradioEmployeeParameter = checkradioEmployee.HasValue ?
                new ObjectParameter("CheckradioEmployee", checkradioEmployee) :
                new ObjectParameter("CheckradioEmployee", typeof(int));
    
            var checkradioSystemParameter = checkradioSystem.HasValue ?
                new ObjectParameter("CheckradioSystem", checkradioSystem) :
                new ObjectParameter("CheckradioSystem", typeof(int));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_Search_SmartCard_Info_InOut_TotalRecord", checkTimeParameter, fromdateParameter, todateParameter, stationIDInParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter, codeReceiptNoParameter, codedevideParameter, recogplatenumberParameter, laneIDParameter, vehicleTypeIDParameter, employeeIDParameter, routeIDParameter, transactionStatusParameter, paperCardParameter, recogResultTypeParameter, employeeCheckParameter, errorIDEmployeeParameter, systemCheckParameter, checkradioEmployeeParameter, checkradioSystemParameter, computerNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> cts_supervision_Search_SmartCard_Info_InOut_TotalRecord_IsVehicleInfoManual_(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT, string codeReceiptNo, string codedevide, string recogplatenumber, Nullable<int> laneID, Nullable<int> employeeID, Nullable<int> routeID, Nullable<bool> isVehicleInfoManual, Nullable<short> transactionStatus, Nullable<short> recogResultType, Nullable<int> employeeCheck, Nullable<int> errorIDEmployee, Nullable<int> systemCheck, Nullable<int> checkradioEmployee, Nullable<int> checkradioSystem)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            var codeReceiptNoParameter = codeReceiptNo != null ?
                new ObjectParameter("codeReceiptNo", codeReceiptNo) :
                new ObjectParameter("codeReceiptNo", typeof(string));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var isVehicleInfoManualParameter = isVehicleInfoManual.HasValue ?
                new ObjectParameter("IsVehicleInfoManual", isVehicleInfoManual) :
                new ObjectParameter("IsVehicleInfoManual", typeof(bool));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var employeeCheckParameter = employeeCheck.HasValue ?
                new ObjectParameter("EmployeeCheck", employeeCheck) :
                new ObjectParameter("EmployeeCheck", typeof(int));
    
            var errorIDEmployeeParameter = errorIDEmployee.HasValue ?
                new ObjectParameter("ErrorIDEmployee", errorIDEmployee) :
                new ObjectParameter("ErrorIDEmployee", typeof(int));
    
            var systemCheckParameter = systemCheck.HasValue ?
                new ObjectParameter("SystemCheck", systemCheck) :
                new ObjectParameter("SystemCheck", typeof(int));
    
            var checkradioEmployeeParameter = checkradioEmployee.HasValue ?
                new ObjectParameter("CheckradioEmployee", checkradioEmployee) :
                new ObjectParameter("CheckradioEmployee", typeof(int));
    
            var checkradioSystemParameter = checkradioSystem.HasValue ?
                new ObjectParameter("CheckradioSystem", checkradioSystem) :
                new ObjectParameter("CheckradioSystem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("cts_supervision_Search_SmartCard_Info_InOut_TotalRecord_IsVehicleInfoManual_", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter, codeReceiptNoParameter, codedevideParameter, recogplatenumberParameter, laneIDParameter, employeeIDParameter, routeIDParameter, isVehicleInfoManualParameter, transactionStatusParameter, recogResultTypeParameter, employeeCheckParameter, errorIDEmployeeParameter, systemCheckParameter, checkradioEmployeeParameter, checkradioSystemParameter);
        }
    
        public virtual int cts_supervision_Search_VehicleInfo_InOut(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, string codedevide, string recogplatenumber, Nullable<int> checkvehiclenumber, Nullable<int> checkvehicletype)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var checkvehiclenumberParameter = checkvehiclenumber.HasValue ?
                new ObjectParameter("checkvehiclenumber", checkvehiclenumber) :
                new ObjectParameter("checkvehiclenumber", typeof(int));
    
            var checkvehicletypeParameter = checkvehicletype.HasValue ?
                new ObjectParameter("checkvehicletype", checkvehicletype) :
                new ObjectParameter("checkvehicletype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_Search_VehicleInfo_InOut", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, codedevideParameter, recogplatenumberParameter, checkvehiclenumberParameter, checkvehicletypeParameter);
        }
    
        public virtual ObjectResult<cts_supervision_Search_VehicleInfo_InOut_1_Result> cts_supervision_Search_VehicleInfo_InOut_1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, string codedevide, string recogplatenumber, Nullable<int> checkvehiclenumber, Nullable<int> checkvehicletype, Nullable<int> pageNumber, Nullable<int> recordePerPage)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var checkvehiclenumberParameter = checkvehiclenumber.HasValue ?
                new ObjectParameter("checkvehiclenumber", checkvehiclenumber) :
                new ObjectParameter("checkvehiclenumber", typeof(int));
    
            var checkvehicletypeParameter = checkvehicletype.HasValue ?
                new ObjectParameter("checkvehicletype", checkvehicletype) :
                new ObjectParameter("checkvehicletype", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordePerPageParameter = recordePerPage.HasValue ?
                new ObjectParameter("RecordePerPage", recordePerPage) :
                new ObjectParameter("RecordePerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_Search_VehicleInfo_InOut_1_Result>("cts_supervision_Search_VehicleInfo_InOut_1", fromdateParameter, todateParameter, stationIDParameter, codedevideParameter, recogplatenumberParameter, checkvehiclenumberParameter, checkvehicletypeParameter, pageNumberParameter, recordePerPageParameter);
        }
    
        public virtual ObjectResult<cts_supervision_Search_VehicleInfo_InOut_In_Result> cts_supervision_Search_VehicleInfo_InOut_In(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, string codedevide, string recogplatenumber, Nullable<int> checkvehiclenumber, Nullable<int> checkvehicletype)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var checkvehiclenumberParameter = checkvehiclenumber.HasValue ?
                new ObjectParameter("checkvehiclenumber", checkvehiclenumber) :
                new ObjectParameter("checkvehiclenumber", typeof(int));
    
            var checkvehicletypeParameter = checkvehicletype.HasValue ?
                new ObjectParameter("checkvehicletype", checkvehicletype) :
                new ObjectParameter("checkvehicletype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_Search_VehicleInfo_InOut_In_Result>("cts_supervision_Search_VehicleInfo_InOut_In", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, codedevideParameter, recogplatenumberParameter, checkvehiclenumberParameter, checkvehicletypeParameter);
        }
    
        public virtual ObjectResult<cts_supervision_Search_VehicleInfo_InOut_Out_Result> cts_supervision_Search_VehicleInfo_InOut_Out(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, string codedevide, string recogplatenumber, Nullable<int> checkvehiclenumber, Nullable<int> checkvehicletype)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var checkvehiclenumberParameter = checkvehiclenumber.HasValue ?
                new ObjectParameter("checkvehiclenumber", checkvehiclenumber) :
                new ObjectParameter("checkvehiclenumber", typeof(int));
    
            var checkvehicletypeParameter = checkvehicletype.HasValue ?
                new ObjectParameter("checkvehicletype", checkvehicletype) :
                new ObjectParameter("checkvehicletype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_Search_VehicleInfo_InOut_Out_Result>("cts_supervision_Search_VehicleInfo_InOut_Out", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, codedevideParameter, recogplatenumberParameter, checkvehiclenumberParameter, checkvehicletypeParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_BlackList_Result> cts_supervision_sp_BlackList(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> station, Nullable<int> type, string deviceCode, Nullable<int> employee, string plateNumber, Nullable<long> pageNumber, Nullable<int> recordsPerPage)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var employeeParameter = employee.HasValue ?
                new ObjectParameter("employee", employee) :
                new ObjectParameter("employee", typeof(int));
    
            var plateNumberParameter = plateNumber != null ?
                new ObjectParameter("PlateNumber", plateNumber) :
                new ObjectParameter("PlateNumber", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_BlackList_Result>("cts_supervision_sp_BlackList", fromDateParameter, toDateParameter, stationParameter, typeParameter, deviceCodeParameter, employeeParameter, plateNumberParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual int cts_supervision_sp_BlackList_Lock(string productID, Nullable<int> type, Nullable<int> employeeID, Nullable<int> stationID, Nullable<System.DateTime> updateDate, Nullable<short> status, Nullable<int> reasonID, string note)
        {
            var productIDParameter = productID != null ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(short));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_sp_BlackList_Lock", productIDParameter, typeParameter, employeeIDParameter, stationIDParameter, updateDateParameter, statusParameter, reasonIDParameter, noteParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> cts_supervision_sp_BlackList_Total(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> station, Nullable<int> type, string deviceCode, Nullable<int> employee, string plateNumber)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var employeeParameter = employee.HasValue ?
                new ObjectParameter("employee", employee) :
                new ObjectParameter("employee", typeof(int));
    
            var plateNumberParameter = plateNumber != null ?
                new ObjectParameter("PlateNumber", plateNumber) :
                new ObjectParameter("PlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("cts_supervision_sp_BlackList_Total", fromDateParameter, toDateParameter, stationParameter, typeParameter, deviceCodeParameter, employeeParameter, plateNumberParameter);
        }
    
        public virtual int cts_supervision_sp_BlackList_UnLock(string productID)
        {
            var productIDParameter = productID != null ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_sp_BlackList_UnLock", productIDParameter);
        }
    
        public virtual int cts_supervision_sp_CheckInForOut(Nullable<System.Guid> outCheckSmartCardID, Nullable<int> entryLaneID, string entryPlateNumber, string note)
        {
            var outCheckSmartCardIDParameter = outCheckSmartCardID.HasValue ?
                new ObjectParameter("OutCheckSmartCardID", outCheckSmartCardID) :
                new ObjectParameter("OutCheckSmartCardID", typeof(System.Guid));
    
            var entryLaneIDParameter = entryLaneID.HasValue ?
                new ObjectParameter("EntryLaneID", entryLaneID) :
                new ObjectParameter("EntryLaneID", typeof(int));
    
            var entryPlateNumberParameter = entryPlateNumber != null ?
                new ObjectParameter("EntryPlateNumber", entryPlateNumber) :
                new ObjectParameter("EntryPlateNumber", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_sp_CheckInForOut", outCheckSmartCardIDParameter, entryLaneIDParameter, entryPlateNumberParameter, noteParameter);
        }
    
        public virtual int cts_supervision_sp_CheckVehicle(string regisPlateNumber, string regisPlateNumberEncode, Nullable<int> vehicleTypeID, ObjectParameter result)
        {
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("regisPlateNumber", regisPlateNumber) :
                new ObjectParameter("regisPlateNumber", typeof(string));
    
            var regisPlateNumberEncodeParameter = regisPlateNumberEncode != null ?
                new ObjectParameter("regisPlateNumberEncode", regisPlateNumberEncode) :
                new ObjectParameter("regisPlateNumberEncode", typeof(string));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("vehicleTypeID", vehicleTypeID) :
                new ObjectParameter("vehicleTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_sp_CheckVehicle", regisPlateNumberParameter, regisPlateNumberEncodeParameter, vehicleTypeIDParameter, result);
        }
    
        public virtual ObjectResult<cts_supervision_sp_DeviceTransaction_Result> cts_supervision_sp_DeviceTransaction(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> hour, Nullable<int> typeSearch, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT, Nullable<int> lane, Nullable<int> station, string deviceCode, Nullable<int> employee, string plateNumber, Nullable<long> pageNumber, Nullable<int> recordsPerPage, string data, Nullable<int> transactionStatus)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var hourParameter = hour.HasValue ?
                new ObjectParameter("Hour", hour) :
                new ObjectParameter("Hour", typeof(int));
    
            var typeSearchParameter = typeSearch.HasValue ?
                new ObjectParameter("TypeSearch", typeSearch) :
                new ObjectParameter("TypeSearch", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            var laneParameter = lane.HasValue ?
                new ObjectParameter("Lane", lane) :
                new ObjectParameter("Lane", typeof(int));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var employeeParameter = employee.HasValue ?
                new ObjectParameter("employee", employee) :
                new ObjectParameter("employee", typeof(int));
    
            var plateNumberParameter = plateNumber != null ?
                new ObjectParameter("PlateNumber", plateNumber) :
                new ObjectParameter("PlateNumber", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            var dataParameter = data != null ?
                new ObjectParameter("Data", data) :
                new ObjectParameter("Data", typeof(string));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_DeviceTransaction_Result>("cts_supervision_sp_DeviceTransaction", checkTimeParameter, fromDateParameter, toDateParameter, hourParameter, typeSearchParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter, laneParameter, stationParameter, deviceCodeParameter, employeeParameter, plateNumberParameter, pageNumberParameter, recordsPerPageParameter, dataParameter, transactionStatusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> cts_supervision_sp_DeviceTransaction_Total(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> hour, Nullable<int> typeSearch, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT, Nullable<int> lane, Nullable<int> station, string deviceCode, Nullable<int> employee, string plateNumber, Nullable<int> transactionStatus)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var hourParameter = hour.HasValue ?
                new ObjectParameter("Hour", hour) :
                new ObjectParameter("Hour", typeof(int));
    
            var typeSearchParameter = typeSearch.HasValue ?
                new ObjectParameter("TypeSearch", typeSearch) :
                new ObjectParameter("TypeSearch", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            var laneParameter = lane.HasValue ?
                new ObjectParameter("Lane", lane) :
                new ObjectParameter("Lane", typeof(int));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var employeeParameter = employee.HasValue ?
                new ObjectParameter("employee", employee) :
                new ObjectParameter("employee", typeof(int));
    
            var plateNumberParameter = plateNumber != null ?
                new ObjectParameter("PlateNumber", plateNumber) :
                new ObjectParameter("PlateNumber", typeof(string));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("cts_supervision_sp_DeviceTransaction_Total", checkTimeParameter, fromDateParameter, toDateParameter, hourParameter, typeSearchParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter, laneParameter, stationParameter, deviceCodeParameter, employeeParameter, plateNumberParameter, transactionStatusParameter);
        }
    
        public virtual ObjectResult<string> cts_supervision_sp_GetTransactionID_InOut(Nullable<int> tableName, string incheckID)
        {
            var tableNameParameter = tableName.HasValue ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(int));
    
            var incheckIDParameter = incheckID != null ?
                new ObjectParameter("IncheckID", incheckID) :
                new ObjectParameter("IncheckID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("cts_supervision_sp_GetTransactionID_InOut", tableNameParameter, incheckIDParameter);
        }
    
        public virtual int cts_supervision_sp_InsertUpdateVehicleInformation(string regisPlateNumber, string areaCode, Nullable<int> vehicleTypeID, Nullable<int> ticketTypeID, Nullable<int> amount, Nullable<System.DateTime> regisDate, string owners, string address, Nullable<int> seats, Nullable<int> vehicleLoad, Nullable<int> tRLgMooc, Nullable<int> employeeID, Nullable<System.DateTime> modifyDate, ObjectParameter result)
        {
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("RegisPlateNumber", regisPlateNumber) :
                new ObjectParameter("RegisPlateNumber", typeof(string));
    
            var areaCodeParameter = areaCode != null ?
                new ObjectParameter("AreaCode", areaCode) :
                new ObjectParameter("AreaCode", typeof(string));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var ticketTypeIDParameter = ticketTypeID.HasValue ?
                new ObjectParameter("TicketTypeID", ticketTypeID) :
                new ObjectParameter("TicketTypeID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var regisDateParameter = regisDate.HasValue ?
                new ObjectParameter("RegisDate", regisDate) :
                new ObjectParameter("RegisDate", typeof(System.DateTime));
    
            var ownersParameter = owners != null ?
                new ObjectParameter("Owners", owners) :
                new ObjectParameter("Owners", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var seatsParameter = seats.HasValue ?
                new ObjectParameter("Seats", seats) :
                new ObjectParameter("Seats", typeof(int));
    
            var vehicleLoadParameter = vehicleLoad.HasValue ?
                new ObjectParameter("VehicleLoad", vehicleLoad) :
                new ObjectParameter("VehicleLoad", typeof(int));
    
            var tRLgMoocParameter = tRLgMooc.HasValue ?
                new ObjectParameter("TRLgMooc", tRLgMooc) :
                new ObjectParameter("TRLgMooc", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var modifyDateParameter = modifyDate.HasValue ?
                new ObjectParameter("ModifyDate", modifyDate) :
                new ObjectParameter("ModifyDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_sp_InsertUpdateVehicleInformation", regisPlateNumberParameter, areaCodeParameter, vehicleTypeIDParameter, ticketTypeIDParameter, amountParameter, regisDateParameter, ownersParameter, addressParameter, seatsParameter, vehicleLoadParameter, tRLgMoocParameter, employeeIDParameter, modifyDateParameter, result);
        }
    
        public virtual ObjectResult<cts_supervision_sp_LoadVehicle_Result> cts_supervision_sp_LoadVehicle(string regisplatenumber, string regisplatenumber1)
        {
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var regisplatenumber1Parameter = regisplatenumber1 != null ?
                new ObjectParameter("regisplatenumber1", regisplatenumber1) :
                new ObjectParameter("regisplatenumber1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_LoadVehicle_Result>("cts_supervision_sp_LoadVehicle", regisplatenumberParameter, regisplatenumber1Parameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_GetListAllInOut_Result> cts_supervision_sp_rpt_GetListAllInOut()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_GetListAllInOut_Result>("cts_supervision_sp_rpt_GetListAllInOut");
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_GetListInfomationCompany_Result> cts_supervision_sp_rpt_GetListInfomationCompany(Nullable<int> stationID)
        {
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_GetListInfomationCompany_Result>("cts_supervision_sp_rpt_GetListInfomationCompany", stationIDParameter);
        }
    
        public virtual int cts_supervision_sp_rpt_ProductQuatity_DayHour_report(Nullable<System.DateTime> fromdate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_sp_rpt_ProductQuatity_DayHour_report", fromdateParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_ProductQuatity_DayHour_to_DayHour_report_Result> cts_supervision_sp_rpt_ProductQuatity_DayHour_to_DayHour_report(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_ProductQuatity_DayHour_to_DayHour_report_Result>("cts_supervision_sp_rpt_ProductQuatity_DayHour_to_DayHour_report", fromdateParameter, todateParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_ProductQuatity_DayHour_to_DayHour_SmartCard_report_Result> cts_supervision_sp_rpt_ProductQuatity_DayHour_to_DayHour_SmartCard_report(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_ProductQuatity_DayHour_to_DayHour_SmartCard_report_Result>("cts_supervision_sp_rpt_ProductQuatity_DayHour_to_DayHour_SmartCard_report", fromdateParameter, todateParameter, stationIDParameter);
        }
    
        public virtual int cts_supervision_sp_rpt_ProductQuatity_DayShift_report(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_sp_rpt_ProductQuatity_DayShift_report", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_ProductQuatity_SmartCard_In_report_Result> cts_supervision_sp_rpt_ProductQuatity_SmartCard_In_report(Nullable<int> stationID, Nullable<System.DateTime> dateTime)
        {
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_ProductQuatity_SmartCard_In_report_Result>("cts_supervision_sp_rpt_ProductQuatity_SmartCard_In_report", stationIDParameter, dateTimeParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_ProductQuatity_SmartCard_Out_report_Result> cts_supervision_sp_rpt_ProductQuatity_SmartCard_Out_report(Nullable<int> stationID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> shiftID)
        {
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_ProductQuatity_SmartCard_Out_report_Result>("cts_supervision_sp_rpt_ProductQuatity_SmartCard_Out_report", stationIDParameter, fromdateParameter, todateParameter, shiftIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_ProductQuatity_SmartCard_report_Result> cts_supervision_sp_rpt_ProductQuatity_SmartCard_report(Nullable<int> stationID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> shiftID)
        {
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_ProductQuatity_SmartCard_report_Result>("cts_supervision_sp_rpt_ProductQuatity_SmartCard_report", stationIDParameter, fromdateParameter, todateParameter, shiftIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Revenue_Chart_DayMonth_Result> cts_supervision_sp_rpt_Revenue_Chart_DayMonth(Nullable<int> month, Nullable<int> year, Nullable<int> stationID)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Revenue_Chart_DayMonth_Result>("cts_supervision_sp_rpt_Revenue_Chart_DayMonth", monthParameter, yearParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Revenue_Chart_DayWeek_Result> cts_supervision_sp_rpt_Revenue_Chart_DayWeek(Nullable<int> week, Nullable<int> month, Nullable<int> year, Nullable<int> stationID)
        {
            var weekParameter = week.HasValue ?
                new ObjectParameter("week", week) :
                new ObjectParameter("week", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Revenue_Chart_DayWeek_Result>("cts_supervision_sp_rpt_Revenue_Chart_DayWeek", weekParameter, monthParameter, yearParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Revenue_Chart_LaneOfDay_Result> cts_supervision_sp_rpt_Revenue_Chart_LaneOfDay(Nullable<System.DateTime> dateTime, Nullable<int> stationID)
        {
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Revenue_Chart_LaneOfDay_Result>("cts_supervision_sp_rpt_Revenue_Chart_LaneOfDay", dateTimeParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Revenue_Chart_MonthYear_Result> cts_supervision_sp_rpt_Revenue_Chart_MonthYear(Nullable<int> year, Nullable<int> stationID)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Revenue_Chart_MonthYear_Result>("cts_supervision_sp_rpt_Revenue_Chart_MonthYear", yearParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Revenue_Chart_QuaterYear_Result> cts_supervision_sp_rpt_Revenue_Chart_QuaterYear(Nullable<int> quater, Nullable<int> year, Nullable<int> stationID)
        {
            var quaterParameter = quater.HasValue ?
                new ObjectParameter("quater", quater) :
                new ObjectParameter("quater", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Revenue_Chart_QuaterYear_Result>("cts_supervision_sp_rpt_Revenue_Chart_QuaterYear", quaterParameter, yearParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Revenue_DayShift_Result> cts_supervision_sp_rpt_Revenue_DayShift(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Revenue_DayShift_Result>("cts_supervision_sp_rpt_Revenue_DayShift", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Revenue_SumDayShift_Result> cts_supervision_sp_rpt_Revenue_SumDayShift(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Revenue_SumDayShift_Result>("cts_supervision_sp_rpt_Revenue_SumDayShift", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Revenue_SumTime_Result> cts_supervision_sp_rpt_Revenue_SumTime(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Revenue_SumTime_Result>("cts_supervision_sp_rpt_Revenue_SumTime", fromDateParameter, toDateParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Revenue_Time_Result> cts_supervision_sp_rpt_Revenue_Time(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> stationID, Nullable<int> checkTime, Nullable<int> shiftID, Nullable<int> shiftLast, Nullable<int> shiftFirst, Nullable<int> testDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Revenue_Time_Result>("cts_supervision_sp_rpt_Revenue_Time", fromDateParameter, toDateParameter, stationIDParameter, checkTimeParameter, shiftIDParameter, shiftLastParameter, shiftFirstParameter, testDateParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_route_Result> cts_supervision_sp_rpt_route(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> fromStationID, Nullable<int> toStationID, Nullable<int> fromLaneID, Nullable<int> toLaneID, Nullable<int> employeeID, string objectCode, Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<bool> conditionTime, Nullable<bool> conditionDayShift, Nullable<bool> conditionResultRouteAll, Nullable<bool> conditionResultRouteTrue, Nullable<bool> conditionResultRouteFalse)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var fromStationIDParameter = fromStationID.HasValue ?
                new ObjectParameter("fromStationID", fromStationID) :
                new ObjectParameter("fromStationID", typeof(int));
    
            var toStationIDParameter = toStationID.HasValue ?
                new ObjectParameter("toStationID", toStationID) :
                new ObjectParameter("toStationID", typeof(int));
    
            var fromLaneIDParameter = fromLaneID.HasValue ?
                new ObjectParameter("fromLaneID", fromLaneID) :
                new ObjectParameter("fromLaneID", typeof(int));
    
            var toLaneIDParameter = toLaneID.HasValue ?
                new ObjectParameter("toLaneID", toLaneID) :
                new ObjectParameter("toLaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var objectCodeParameter = objectCode != null ?
                new ObjectParameter("objectCode", objectCode) :
                new ObjectParameter("objectCode", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var conditionTimeParameter = conditionTime.HasValue ?
                new ObjectParameter("conditionTime", conditionTime) :
                new ObjectParameter("conditionTime", typeof(bool));
    
            var conditionDayShiftParameter = conditionDayShift.HasValue ?
                new ObjectParameter("conditionDayShift", conditionDayShift) :
                new ObjectParameter("conditionDayShift", typeof(bool));
    
            var conditionResultRouteAllParameter = conditionResultRouteAll.HasValue ?
                new ObjectParameter("conditionResultRouteAll", conditionResultRouteAll) :
                new ObjectParameter("conditionResultRouteAll", typeof(bool));
    
            var conditionResultRouteTrueParameter = conditionResultRouteTrue.HasValue ?
                new ObjectParameter("conditionResultRouteTrue", conditionResultRouteTrue) :
                new ObjectParameter("conditionResultRouteTrue", typeof(bool));
    
            var conditionResultRouteFalseParameter = conditionResultRouteFalse.HasValue ?
                new ObjectParameter("conditionResultRouteFalse", conditionResultRouteFalse) :
                new ObjectParameter("conditionResultRouteFalse", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_route_Result>("cts_supervision_sp_rpt_route", fromdateParameter, toDateParameter, fromStationIDParameter, toStationIDParameter, fromLaneIDParameter, toLaneIDParameter, employeeIDParameter, objectCodeParameter, dateParameter, shiftIDParameter, conditionTimeParameter, conditionDayShiftParameter, conditionResultRouteAllParameter, conditionResultRouteTrueParameter, conditionResultRouteFalseParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Routed_Result> cts_supervision_sp_rpt_Routed(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> fromStation, Nullable<int> toStation, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, string objectCode, Nullable<int> employee, Nullable<long> pageNumber, Nullable<int> recordsPerPage)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var fromStationParameter = fromStation.HasValue ?
                new ObjectParameter("FromStation", fromStation) :
                new ObjectParameter("FromStation", typeof(int));
    
            var toStationParameter = toStation.HasValue ?
                new ObjectParameter("ToStation", toStation) :
                new ObjectParameter("ToStation", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var objectCodeParameter = objectCode != null ?
                new ObjectParameter("ObjectCode", objectCode) :
                new ObjectParameter("ObjectCode", typeof(string));
    
            var employeeParameter = employee.HasValue ?
                new ObjectParameter("employee", employee) :
                new ObjectParameter("employee", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Routed_Result>("cts_supervision_sp_rpt_Routed", checkTimeParameter, fromDateParameter, toDateParameter, fromStationParameter, toStationParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, objectCodeParameter, employeeParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Routed_phat_Result> cts_supervision_sp_rpt_Routed_phat(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> fromStation, Nullable<int> toStation, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, string objectCode, Nullable<int> employee, Nullable<long> pageNumber, Nullable<int> recordsPerPage)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var fromStationParameter = fromStation.HasValue ?
                new ObjectParameter("FromStation", fromStation) :
                new ObjectParameter("FromStation", typeof(int));
    
            var toStationParameter = toStation.HasValue ?
                new ObjectParameter("ToStation", toStation) :
                new ObjectParameter("ToStation", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var objectCodeParameter = objectCode != null ?
                new ObjectParameter("ObjectCode", objectCode) :
                new ObjectParameter("ObjectCode", typeof(string));
    
            var employeeParameter = employee.HasValue ?
                new ObjectParameter("employee", employee) :
                new ObjectParameter("employee", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Routed_phat_Result>("cts_supervision_sp_rpt_Routed_phat", checkTimeParameter, fromDateParameter, toDateParameter, fromStationParameter, toStationParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, objectCodeParameter, employeeParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Routed_Report_Result> cts_supervision_sp_rpt_Routed_Report(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> fromStation, Nullable<int> toStation, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, string objectCode, Nullable<int> employee)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var fromStationParameter = fromStation.HasValue ?
                new ObjectParameter("FromStation", fromStation) :
                new ObjectParameter("FromStation", typeof(int));
    
            var toStationParameter = toStation.HasValue ?
                new ObjectParameter("ToStation", toStation) :
                new ObjectParameter("ToStation", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var objectCodeParameter = objectCode != null ?
                new ObjectParameter("ObjectCode", objectCode) :
                new ObjectParameter("ObjectCode", typeof(string));
    
            var employeeParameter = employee.HasValue ?
                new ObjectParameter("employee", employee) :
                new ObjectParameter("employee", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Routed_Report_Result>("cts_supervision_sp_rpt_Routed_Report", checkTimeParameter, fromDateParameter, toDateParameter, fromStationParameter, toStationParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, objectCodeParameter, employeeParameter);
        }
    
        public virtual int cts_supervision_sp_rpt_Routed_TotalRow(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> fromStation, Nullable<int> toStation, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, string objectCode, Nullable<int> employee, ObjectParameter recordsCount)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var fromStationParameter = fromStation.HasValue ?
                new ObjectParameter("FromStation", fromStation) :
                new ObjectParameter("FromStation", typeof(int));
    
            var toStationParameter = toStation.HasValue ?
                new ObjectParameter("ToStation", toStation) :
                new ObjectParameter("ToStation", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var objectCodeParameter = objectCode != null ?
                new ObjectParameter("ObjectCode", objectCode) :
                new ObjectParameter("ObjectCode", typeof(string));
    
            var employeeParameter = employee.HasValue ?
                new ObjectParameter("employee", employee) :
                new ObjectParameter("employee", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_sp_rpt_Routed_TotalRow", checkTimeParameter, fromDateParameter, toDateParameter, fromStationParameter, toStationParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, objectCodeParameter, employeeParameter, recordsCount);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Routed_TuanTest_Result> cts_supervision_sp_rpt_Routed_TuanTest(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> fromStation, Nullable<int> toStation, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, string objectCode, Nullable<int> employee, Nullable<long> pageNumber, Nullable<int> recordsPerPage)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var fromStationParameter = fromStation.HasValue ?
                new ObjectParameter("FromStation", fromStation) :
                new ObjectParameter("FromStation", typeof(int));
    
            var toStationParameter = toStation.HasValue ?
                new ObjectParameter("ToStation", toStation) :
                new ObjectParameter("ToStation", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var objectCodeParameter = objectCode != null ?
                new ObjectParameter("ObjectCode", objectCode) :
                new ObjectParameter("ObjectCode", typeof(string));
    
            var employeeParameter = employee.HasValue ?
                new ObjectParameter("employee", employee) :
                new ObjectParameter("employee", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Routed_TuanTest_Result>("cts_supervision_sp_rpt_Routed_TuanTest", checkTimeParameter, fromDateParameter, toDateParameter, fromStationParameter, toStationParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, objectCodeParameter, employeeParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_TollManagement_Result> cts_supervision_sp_rpt_TollManagement(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> station, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_TollManagement_Result>("cts_supervision_sp_rpt_TollManagement", checkTimeParameter, fromDateParameter, toDateParameter, stationParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_Result> cts_supervision_sp_rpt_Traffic(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> station, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_Result>("cts_supervision_sp_rpt_Traffic", checkTimeParameter, fromDateParameter, toDateParameter, stationParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_Chart_DayMonth_Result> cts_supervision_sp_rpt_Traffic_Chart_DayMonth(Nullable<int> month, Nullable<int> year, Nullable<int> stationID)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_Chart_DayMonth_Result>("cts_supervision_sp_rpt_Traffic_Chart_DayMonth", monthParameter, yearParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_Chart_LaneOfDay_Result> cts_supervision_sp_rpt_Traffic_Chart_LaneOfDay(Nullable<System.DateTime> dateTime, Nullable<int> stationID)
        {
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_Chart_LaneOfDay_Result>("cts_supervision_sp_rpt_Traffic_Chart_LaneOfDay", dateTimeParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_Chart_MonthYear_Result> cts_supervision_sp_rpt_Traffic_Chart_MonthYear(Nullable<int> year, Nullable<int> stationID)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_Chart_MonthYear_Result>("cts_supervision_sp_rpt_Traffic_Chart_MonthYear", yearParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_Chart_QuaterYear_Result> cts_supervision_sp_rpt_Traffic_Chart_QuaterYear(Nullable<int> quater, Nullable<int> year, Nullable<int> stationID)
        {
            var quaterParameter = quater.HasValue ?
                new ObjectParameter("quater", quater) :
                new ObjectParameter("quater", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_Chart_QuaterYear_Result>("cts_supervision_sp_rpt_Traffic_Chart_QuaterYear", quaterParameter, yearParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_DayShift_Result> cts_supervision_sp_rpt_Traffic_DayShift(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_DayShift_Result>("cts_supervision_sp_rpt_Traffic_DayShift", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_DayShift_TicketCounter_Result> cts_supervision_sp_rpt_Traffic_DayShift_TicketCounter(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_DayShift_TicketCounter_Result>("cts_supervision_sp_rpt_Traffic_DayShift_TicketCounter", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_DayShift_TicketCouterSum_Result> cts_supervision_sp_rpt_Traffic_DayShift_TicketCouterSum(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_DayShift_TicketCouterSum_Result>("cts_supervision_sp_rpt_Traffic_DayShift_TicketCouterSum", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_DayShift_TicketMonth_Result> cts_supervision_sp_rpt_Traffic_DayShift_TicketMonth(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_DayShift_TicketMonth_Result>("cts_supervision_sp_rpt_Traffic_DayShift_TicketMonth", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_DayShift_TicketMonthSum_Result> cts_supervision_sp_rpt_Traffic_DayShift_TicketMonthSum(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_DayShift_TicketMonthSum_Result>("cts_supervision_sp_rpt_Traffic_DayShift_TicketMonthSum", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_DayShift_TicketPeriod_Result> cts_supervision_sp_rpt_Traffic_DayShift_TicketPeriod(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_DayShift_TicketPeriod_Result>("cts_supervision_sp_rpt_Traffic_DayShift_TicketPeriod", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_DayShift_TicketQLCounterSum_Result> cts_supervision_sp_rpt_Traffic_DayShift_TicketQLCounterSum(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_DayShift_TicketQLCounterSum_Result>("cts_supervision_sp_rpt_Traffic_DayShift_TicketQLCounterSum", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_DayShift_TicketQuater_Result> cts_supervision_sp_rpt_Traffic_DayShift_TicketQuater(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_DayShift_TicketQuater_Result>("cts_supervision_sp_rpt_Traffic_DayShift_TicketQuater", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_DayShift_TicketQuaterSum_Result> cts_supervision_sp_rpt_Traffic_DayShift_TicketQuaterSum(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_DayShift_TicketQuaterSum_Result>("cts_supervision_sp_rpt_Traffic_DayShift_TicketQuaterSum", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_DayShift_TotalSum_Result> cts_supervision_sp_rpt_Traffic_DayShift_TotalSum(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_DayShift_TotalSum_Result>("cts_supervision_sp_rpt_Traffic_DayShift_TotalSum", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_DayShiftTwo_Result> cts_supervision_sp_rpt_Traffic_DayShiftTwo(Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_DayShiftTwo_Result>("cts_supervision_sp_rpt_Traffic_DayShiftTwo", dateParameter, shiftIDParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_Report_Result> cts_supervision_sp_rpt_Traffic_Report(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> station, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_Report_Result>("cts_supervision_sp_rpt_Traffic_Report", checkTimeParameter, fromDateParameter, toDateParameter, stationParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_Time_Result> cts_supervision_sp_rpt_Traffic_Time(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_Time_Result>("cts_supervision_sp_rpt_Traffic_Time", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_Time_TicketCounter_Result> cts_supervision_sp_rpt_Traffic_Time_TicketCounter(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_Time_TicketCounter_Result>("cts_supervision_sp_rpt_Traffic_Time_TicketCounter", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_Time_TicketCounterSum_Result> cts_supervision_sp_rpt_Traffic_Time_TicketCounterSum(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_Time_TicketCounterSum_Result>("cts_supervision_sp_rpt_Traffic_Time_TicketCounterSum", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_Time_TicketMonth_Result> cts_supervision_sp_rpt_Traffic_Time_TicketMonth(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_Time_TicketMonth_Result>("cts_supervision_sp_rpt_Traffic_Time_TicketMonth", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_Time_TicketMonthSum_Result> cts_supervision_sp_rpt_Traffic_Time_TicketMonthSum(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_Time_TicketMonthSum_Result>("cts_supervision_sp_rpt_Traffic_Time_TicketMonthSum", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_Time_TicketPeriod_Result> cts_supervision_sp_rpt_Traffic_Time_TicketPeriod(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_Time_TicketPeriod_Result>("cts_supervision_sp_rpt_Traffic_Time_TicketPeriod", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_Time_TicketQLCounterSum_Result> cts_supervision_sp_rpt_Traffic_Time_TicketQLCounterSum(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_Time_TicketQLCounterSum_Result>("cts_supervision_sp_rpt_Traffic_Time_TicketQLCounterSum", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_Time_TicketQuater_Result> cts_supervision_sp_rpt_Traffic_Time_TicketQuater(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_Time_TicketQuater_Result>("cts_supervision_sp_rpt_Traffic_Time_TicketQuater", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_Time_TicketQuaterSum_Result> cts_supervision_sp_rpt_Traffic_Time_TicketQuaterSum(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_Time_TicketQuaterSum_Result>("cts_supervision_sp_rpt_Traffic_Time_TicketQuaterSum", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_Time_TimeTwo_Result> cts_supervision_sp_rpt_Traffic_Time_TimeTwo(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_Time_TimeTwo_Result>("cts_supervision_sp_rpt_Traffic_Time_TimeTwo", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_Time_TotalSum_Result> cts_supervision_sp_rpt_Traffic_Time_TotalSum(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_Time_TotalSum_Result>("cts_supervision_sp_rpt_Traffic_Time_TotalSum", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_Traffic_Tuan_Result> cts_supervision_sp_rpt_Traffic_Tuan(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> station, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> mAX_IN, Nullable<int> mAX_OUT)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var mAX_INParameter = mAX_IN.HasValue ?
                new ObjectParameter("MAX_IN", mAX_IN) :
                new ObjectParameter("MAX_IN", typeof(int));
    
            var mAX_OUTParameter = mAX_OUT.HasValue ?
                new ObjectParameter("MAX_OUT", mAX_OUT) :
                new ObjectParameter("MAX_OUT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_Traffic_Tuan_Result>("cts_supervision_sp_rpt_Traffic_Tuan", checkTimeParameter, fromDateParameter, toDateParameter, stationParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, mAX_INParameter, mAX_OUTParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Device_OBU_IN_Result> cts_supervision_sp_rpt_VehicelTurn_Device_OBU_IN(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string mathietbi, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var mathietbiParameter = mathietbi != null ?
                new ObjectParameter("mathietbi", mathietbi) :
                new ObjectParameter("mathietbi", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Device_OBU_IN_Result>("cts_supervision_sp_rpt_VehicelTurn_Device_OBU_IN", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, mathietbiParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Device_OBU_OUT_Result> cts_supervision_sp_rpt_VehicelTurn_Device_OBU_OUT(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string mathietbi, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var mathietbiParameter = mathietbi != null ?
                new ObjectParameter("mathietbi", mathietbi) :
                new ObjectParameter("mathietbi", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Device_OBU_OUT_Result>("cts_supervision_sp_rpt_VehicelTurn_Device_OBU_OUT", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, mathietbiParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Device_OBU2Piece_IN_Result> cts_supervision_sp_rpt_VehicelTurn_Device_OBU2Piece_IN(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string mathietbi, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var mathietbiParameter = mathietbi != null ?
                new ObjectParameter("mathietbi", mathietbi) :
                new ObjectParameter("mathietbi", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Device_OBU2Piece_IN_Result>("cts_supervision_sp_rpt_VehicelTurn_Device_OBU2Piece_IN", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, mathietbiParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Device_OBU2Piece_OUT_Result> cts_supervision_sp_rpt_VehicelTurn_Device_OBU2Piece_OUT(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string mathietbi, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var mathietbiParameter = mathietbi != null ?
                new ObjectParameter("mathietbi", mathietbi) :
                new ObjectParameter("mathietbi", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Device_OBU2Piece_OUT_Result>("cts_supervision_sp_rpt_VehicelTurn_Device_OBU2Piece_OUT", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, mathietbiParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Device_OBUQui_IN_Result> cts_supervision_sp_rpt_VehicelTurn_Device_OBUQui_IN(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string mathietbi, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var mathietbiParameter = mathietbi != null ?
                new ObjectParameter("mathietbi", mathietbi) :
                new ObjectParameter("mathietbi", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Device_OBUQui_IN_Result>("cts_supervision_sp_rpt_VehicelTurn_Device_OBUQui_IN", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, mathietbiParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Device_OBUQui_OUT_Result> cts_supervision_sp_rpt_VehicelTurn_Device_OBUQui_OUT(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string mathietbi, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var mathietbiParameter = mathietbi != null ?
                new ObjectParameter("mathietbi", mathietbi) :
                new ObjectParameter("mathietbi", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Device_OBUQui_OUT_Result>("cts_supervision_sp_rpt_VehicelTurn_Device_OBUQui_OUT", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, mathietbiParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Device_OBUThang_IN_Result> cts_supervision_sp_rpt_VehicelTurn_Device_OBUThang_IN(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string mathietbi, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var mathietbiParameter = mathietbi != null ?
                new ObjectParameter("mathietbi", mathietbi) :
                new ObjectParameter("mathietbi", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Device_OBUThang_IN_Result>("cts_supervision_sp_rpt_VehicelTurn_Device_OBUThang_IN", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, mathietbiParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Device_OBUThang_OUT_Result> cts_supervision_sp_rpt_VehicelTurn_Device_OBUThang_OUT(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string mathietbi, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var mathietbiParameter = mathietbi != null ?
                new ObjectParameter("mathietbi", mathietbi) :
                new ObjectParameter("mathietbi", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Device_OBUThang_OUT_Result>("cts_supervision_sp_rpt_VehicelTurn_Device_OBUThang_OUT", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, mathietbiParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Device_SmartCard_IN_Result> cts_supervision_sp_rpt_VehicelTurn_Device_SmartCard_IN(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string mathietbi, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var mathietbiParameter = mathietbi != null ?
                new ObjectParameter("mathietbi", mathietbi) :
                new ObjectParameter("mathietbi", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Device_SmartCard_IN_Result>("cts_supervision_sp_rpt_VehicelTurn_Device_SmartCard_IN", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, mathietbiParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Device_SmartCard_OUT_Result> cts_supervision_sp_rpt_VehicelTurn_Device_SmartCard_OUT(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string mathietbi, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var mathietbiParameter = mathietbi != null ?
                new ObjectParameter("mathietbi", mathietbi) :
                new ObjectParameter("mathietbi", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Device_SmartCard_OUT_Result>("cts_supervision_sp_rpt_VehicelTurn_Device_SmartCard_OUT", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, mathietbiParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Others_BTC_IN_Result> cts_supervision_sp_rpt_VehicelTurn_Others_BTC_IN(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string matheuutien, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var matheuutienParameter = matheuutien != null ?
                new ObjectParameter("matheuutien", matheuutien) :
                new ObjectParameter("matheuutien", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Others_BTC_IN_Result>("cts_supervision_sp_rpt_VehicelTurn_Others_BTC_IN", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, matheuutienParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Others_BTC_OUT_Result> cts_supervision_sp_rpt_VehicelTurn_Others_BTC_OUT(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string matheuutien, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var matheuutienParameter = matheuutien != null ?
                new ObjectParameter("matheuutien", matheuutien) :
                new ObjectParameter("matheuutien", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Others_BTC_OUT_Result>("cts_supervision_sp_rpt_VehicelTurn_Others_BTC_OUT", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, matheuutienParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Others_Co1Xe_IN_Result> cts_supervision_sp_rpt_VehicelTurn_Others_Co1Xe_IN(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string matheuutien, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var matheuutienParameter = matheuutien != null ?
                new ObjectParameter("matheuutien", matheuutien) :
                new ObjectParameter("matheuutien", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Others_Co1Xe_IN_Result>("cts_supervision_sp_rpt_VehicelTurn_Others_Co1Xe_IN", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, matheuutienParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Others_Co1Xe_OUT_Result> cts_supervision_sp_rpt_VehicelTurn_Others_Co1Xe_OUT(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string matheuutien, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var matheuutienParameter = matheuutien != null ?
                new ObjectParameter("matheuutien", matheuutien) :
                new ObjectParameter("matheuutien", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Others_Co1Xe_OUT_Result>("cts_supervision_sp_rpt_VehicelTurn_Others_Co1Xe_OUT", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, matheuutienParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Others_CoDoanXe_IN_Result> cts_supervision_sp_rpt_VehicelTurn_Others_CoDoanXe_IN(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string matheuutien, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var matheuutienParameter = matheuutien != null ?
                new ObjectParameter("matheuutien", matheuutien) :
                new ObjectParameter("matheuutien", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Others_CoDoanXe_IN_Result>("cts_supervision_sp_rpt_VehicelTurn_Others_CoDoanXe_IN", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, matheuutienParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Others_CoDoanXe_OUT_Result> cts_supervision_sp_rpt_VehicelTurn_Others_CoDoanXe_OUT(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string matheuutien, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var matheuutienParameter = matheuutien != null ?
                new ObjectParameter("matheuutien", matheuutien) :
                new ObjectParameter("matheuutien", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Others_CoDoanXe_OUT_Result>("cts_supervision_sp_rpt_VehicelTurn_Others_CoDoanXe_OUT", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, matheuutienParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Period_IN_Result> cts_supervision_sp_rpt_VehicelTurn_Period_IN(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string mave, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var maveParameter = mave != null ?
                new ObjectParameter("mave", mave) :
                new ObjectParameter("mave", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Period_IN_Result>("cts_supervision_sp_rpt_VehicelTurn_Period_IN", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, maveParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Period_OUT_Result> cts_supervision_sp_rpt_VehicelTurn_Period_OUT(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string mave, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var maveParameter = mave != null ?
                new ObjectParameter("mave", mave) :
                new ObjectParameter("mave", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Period_OUT_Result>("cts_supervision_sp_rpt_VehicelTurn_Period_OUT", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, maveParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Priority_1Xe_IN_Result> cts_supervision_sp_rpt_VehicelTurn_Priority_1Xe_IN(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string matheuutien, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var matheuutienParameter = matheuutien != null ?
                new ObjectParameter("matheuutien", matheuutien) :
                new ObjectParameter("matheuutien", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Priority_1Xe_IN_Result>("cts_supervision_sp_rpt_VehicelTurn_Priority_1Xe_IN", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, matheuutienParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Priority_1Xe_OUT_Result> cts_supervision_sp_rpt_VehicelTurn_Priority_1Xe_OUT(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string matheuutien, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var matheuutienParameter = matheuutien != null ?
                new ObjectParameter("matheuutien", matheuutien) :
                new ObjectParameter("matheuutien", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Priority_1Xe_OUT_Result>("cts_supervision_sp_rpt_VehicelTurn_Priority_1Xe_OUT", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, matheuutienParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Priority_DoanXe_IN_Result> cts_supervision_sp_rpt_VehicelTurn_Priority_DoanXe_IN(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string matheuutien, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var matheuutienParameter = matheuutien != null ?
                new ObjectParameter("matheuutien", matheuutien) :
                new ObjectParameter("matheuutien", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Priority_DoanXe_IN_Result>("cts_supervision_sp_rpt_VehicelTurn_Priority_DoanXe_IN", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, matheuutienParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Priority_DoanXe_OUT_Result> cts_supervision_sp_rpt_VehicelTurn_Priority_DoanXe_OUT(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string matheuutien, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var matheuutienParameter = matheuutien != null ?
                new ObjectParameter("matheuutien", matheuutien) :
                new ObjectParameter("matheuutien", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Priority_DoanXe_OUT_Result>("cts_supervision_sp_rpt_VehicelTurn_Priority_DoanXe_OUT", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, matheuutienParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Turn_IN_Result> cts_supervision_sp_rpt_VehicelTurn_Turn_IN(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string mave, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var maveParameter = mave != null ?
                new ObjectParameter("mave", mave) :
                new ObjectParameter("mave", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Turn_IN_Result>("cts_supervision_sp_rpt_VehicelTurn_Turn_IN", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, maveParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicelTurn_Turn_OUT_Result> cts_supervision_sp_rpt_VehicelTurn_Turn_OUT(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeeID, string soxe, string mave, Nullable<int> menhgia, Nullable<bool> isNVHK, Nullable<int> nVDanhGiaID, Nullable<int> nVErrorID, Nullable<bool> isHTHK, Nullable<int> hTDanhGiaID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var soxeParameter = soxe != null ?
                new ObjectParameter("soxe", soxe) :
                new ObjectParameter("soxe", typeof(string));
    
            var maveParameter = mave != null ?
                new ObjectParameter("mave", mave) :
                new ObjectParameter("mave", typeof(string));
    
            var menhgiaParameter = menhgia.HasValue ?
                new ObjectParameter("menhgia", menhgia) :
                new ObjectParameter("menhgia", typeof(int));
    
            var isNVHKParameter = isNVHK.HasValue ?
                new ObjectParameter("isNVHK", isNVHK) :
                new ObjectParameter("isNVHK", typeof(bool));
    
            var nVDanhGiaIDParameter = nVDanhGiaID.HasValue ?
                new ObjectParameter("NVDanhGiaID", nVDanhGiaID) :
                new ObjectParameter("NVDanhGiaID", typeof(int));
    
            var nVErrorIDParameter = nVErrorID.HasValue ?
                new ObjectParameter("NVErrorID", nVErrorID) :
                new ObjectParameter("NVErrorID", typeof(int));
    
            var isHTHKParameter = isHTHK.HasValue ?
                new ObjectParameter("isHTHK", isHTHK) :
                new ObjectParameter("isHTHK", typeof(bool));
    
            var hTDanhGiaIDParameter = hTDanhGiaID.HasValue ?
                new ObjectParameter("HTDanhGiaID", hTDanhGiaID) :
                new ObjectParameter("HTDanhGiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicelTurn_Turn_OUT_Result>("cts_supervision_sp_rpt_VehicelTurn_Turn_OUT", fromdateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeeIDParameter, soxeParameter, maveParameter, menhgiaParameter, isNVHKParameter, nVDanhGiaIDParameter, nVErrorIDParameter, isHTHKParameter, hTDanhGiaIDParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicleLane_Btc_Result> cts_supervision_sp_rpt_VehicleLane_Btc(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, string vehID, Nullable<int> empID, string tickID, Nullable<short> statusIn, Nullable<short> statusOut, Nullable<short> rowNo, Nullable<short> stepNo)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var vehIDParameter = vehID != null ?
                new ObjectParameter("vehID", vehID) :
                new ObjectParameter("vehID", typeof(string));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var tickIDParameter = tickID != null ?
                new ObjectParameter("tickID", tickID) :
                new ObjectParameter("tickID", typeof(string));
    
            var statusInParameter = statusIn.HasValue ?
                new ObjectParameter("statusIn", statusIn) :
                new ObjectParameter("statusIn", typeof(short));
    
            var statusOutParameter = statusOut.HasValue ?
                new ObjectParameter("statusOut", statusOut) :
                new ObjectParameter("statusOut", typeof(short));
    
            var rowNoParameter = rowNo.HasValue ?
                new ObjectParameter("rowNo", rowNo) :
                new ObjectParameter("rowNo", typeof(short));
    
            var stepNoParameter = stepNo.HasValue ?
                new ObjectParameter("stepNo", stepNo) :
                new ObjectParameter("stepNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicleLane_Btc_Result>("cts_supervision_sp_rpt_VehicleLane_Btc", fromDateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, vehIDParameter, empIDParameter, tickIDParameter, statusInParameter, statusOutParameter, rowNoParameter, stepNoParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicleLane_ForceOpen_Result> cts_supervision_sp_rpt_VehicleLane_ForceOpen(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, string vehID, Nullable<int> empID, string tickID, Nullable<short> statusIn, Nullable<short> statusOut)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var vehIDParameter = vehID != null ?
                new ObjectParameter("vehID", vehID) :
                new ObjectParameter("vehID", typeof(string));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var tickIDParameter = tickID != null ?
                new ObjectParameter("tickID", tickID) :
                new ObjectParameter("tickID", typeof(string));
    
            var statusInParameter = statusIn.HasValue ?
                new ObjectParameter("statusIn", statusIn) :
                new ObjectParameter("statusIn", typeof(short));
    
            var statusOutParameter = statusOut.HasValue ?
                new ObjectParameter("statusOut", statusOut) :
                new ObjectParameter("statusOut", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicleLane_ForceOpen_Result>("cts_supervision_sp_rpt_VehicleLane_ForceOpen", fromDateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, vehIDParameter, empIDParameter, tickIDParameter, statusInParameter, statusOutParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicleLane_ForceOpenGroup_Result> cts_supervision_sp_rpt_VehicleLane_ForceOpenGroup(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, string vehID, Nullable<int> empID, string tickID, Nullable<short> statusIn, Nullable<short> statusOut)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var vehIDParameter = vehID != null ?
                new ObjectParameter("vehID", vehID) :
                new ObjectParameter("vehID", typeof(string));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var tickIDParameter = tickID != null ?
                new ObjectParameter("tickID", tickID) :
                new ObjectParameter("tickID", typeof(string));
    
            var statusInParameter = statusIn.HasValue ?
                new ObjectParameter("statusIn", statusIn) :
                new ObjectParameter("statusIn", typeof(short));
    
            var statusOutParameter = statusOut.HasValue ?
                new ObjectParameter("statusOut", statusOut) :
                new ObjectParameter("statusOut", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicleLane_ForceOpenGroup_Result>("cts_supervision_sp_rpt_VehicleLane_ForceOpenGroup", fromDateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, vehIDParameter, empIDParameter, tickIDParameter, statusInParameter, statusOutParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicleLane_Obu_Result> cts_supervision_sp_rpt_VehicleLane_Obu(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, string vehID, Nullable<int> empID, string tickID, Nullable<short> statusIn, Nullable<short> statusOut, Nullable<int> price)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var vehIDParameter = vehID != null ?
                new ObjectParameter("vehID", vehID) :
                new ObjectParameter("vehID", typeof(string));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var tickIDParameter = tickID != null ?
                new ObjectParameter("tickID", tickID) :
                new ObjectParameter("tickID", typeof(string));
    
            var statusInParameter = statusIn.HasValue ?
                new ObjectParameter("statusIn", statusIn) :
                new ObjectParameter("statusIn", typeof(short));
    
            var statusOutParameter = statusOut.HasValue ?
                new ObjectParameter("statusOut", statusOut) :
                new ObjectParameter("statusOut", typeof(short));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicleLane_Obu_Result>("cts_supervision_sp_rpt_VehicleLane_Obu", fromDateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, vehIDParameter, empIDParameter, tickIDParameter, statusInParameter, statusOutParameter, priceParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicleLane_ObuSmartCard_Result> cts_supervision_sp_rpt_VehicleLane_ObuSmartCard(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, string vehID, Nullable<int> empID, string tickID, Nullable<short> statusIn, Nullable<short> statusOut, Nullable<int> price)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var vehIDParameter = vehID != null ?
                new ObjectParameter("vehID", vehID) :
                new ObjectParameter("vehID", typeof(string));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var tickIDParameter = tickID != null ?
                new ObjectParameter("tickID", tickID) :
                new ObjectParameter("tickID", typeof(string));
    
            var statusInParameter = statusIn.HasValue ?
                new ObjectParameter("statusIn", statusIn) :
                new ObjectParameter("statusIn", typeof(short));
    
            var statusOutParameter = statusOut.HasValue ?
                new ObjectParameter("statusOut", statusOut) :
                new ObjectParameter("statusOut", typeof(short));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicleLane_ObuSmartCard_Result>("cts_supervision_sp_rpt_VehicleLane_ObuSmartCard", fromDateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, vehIDParameter, empIDParameter, tickIDParameter, statusInParameter, statusOutParameter, priceParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicleLane_PeriodObu_Result> cts_supervision_sp_rpt_VehicleLane_PeriodObu(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, string vehID, Nullable<int> empID, string tickID, Nullable<short> statusIn, Nullable<short> statusOut, Nullable<int> price)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var vehIDParameter = vehID != null ?
                new ObjectParameter("vehID", vehID) :
                new ObjectParameter("vehID", typeof(string));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var tickIDParameter = tickID != null ?
                new ObjectParameter("tickID", tickID) :
                new ObjectParameter("tickID", typeof(string));
    
            var statusInParameter = statusIn.HasValue ?
                new ObjectParameter("statusIn", statusIn) :
                new ObjectParameter("statusIn", typeof(short));
    
            var statusOutParameter = statusOut.HasValue ?
                new ObjectParameter("statusOut", statusOut) :
                new ObjectParameter("statusOut", typeof(short));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicleLane_PeriodObu_Result>("cts_supervision_sp_rpt_VehicleLane_PeriodObu", fromDateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, vehIDParameter, empIDParameter, tickIDParameter, statusInParameter, statusOutParameter, priceParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicleLane_PeriodTicket_Result> cts_supervision_sp_rpt_VehicleLane_PeriodTicket(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, string vehID, Nullable<int> empID, string tickID, Nullable<short> statusIn, Nullable<short> statusOut, Nullable<int> price)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var vehIDParameter = vehID != null ?
                new ObjectParameter("vehID", vehID) :
                new ObjectParameter("vehID", typeof(string));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var tickIDParameter = tickID != null ?
                new ObjectParameter("tickID", tickID) :
                new ObjectParameter("tickID", typeof(string));
    
            var statusInParameter = statusIn.HasValue ?
                new ObjectParameter("statusIn", statusIn) :
                new ObjectParameter("statusIn", typeof(short));
    
            var statusOutParameter = statusOut.HasValue ?
                new ObjectParameter("statusOut", statusOut) :
                new ObjectParameter("statusOut", typeof(short));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicleLane_PeriodTicket_Result>("cts_supervision_sp_rpt_VehicleLane_PeriodTicket", fromDateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, vehIDParameter, empIDParameter, tickIDParameter, statusInParameter, statusOutParameter, priceParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicleLane_SmartCard_Result> cts_supervision_sp_rpt_VehicleLane_SmartCard(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, string vehID, Nullable<int> empID, string tickID, Nullable<short> statusIn, Nullable<short> statusOut, Nullable<int> price)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var vehIDParameter = vehID != null ?
                new ObjectParameter("vehID", vehID) :
                new ObjectParameter("vehID", typeof(string));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var tickIDParameter = tickID != null ?
                new ObjectParameter("tickID", tickID) :
                new ObjectParameter("tickID", typeof(string));
    
            var statusInParameter = statusIn.HasValue ?
                new ObjectParameter("statusIn", statusIn) :
                new ObjectParameter("statusIn", typeof(short));
    
            var statusOutParameter = statusOut.HasValue ?
                new ObjectParameter("statusOut", statusOut) :
                new ObjectParameter("statusOut", typeof(short));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicleLane_SmartCard_Result>("cts_supervision_sp_rpt_VehicleLane_SmartCard", fromDateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, vehIDParameter, empIDParameter, tickIDParameter, statusInParameter, statusOutParameter, priceParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_rpt_VehicleLane_Ticket_Result> cts_supervision_sp_rpt_VehicleLane_Ticket(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, string vehID, Nullable<int> empID, string tickID, Nullable<short> statusIn, Nullable<short> statusOut, Nullable<int> price)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var vehIDParameter = vehID != null ?
                new ObjectParameter("vehID", vehID) :
                new ObjectParameter("vehID", typeof(string));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var tickIDParameter = tickID != null ?
                new ObjectParameter("tickID", tickID) :
                new ObjectParameter("tickID", typeof(string));
    
            var statusInParameter = statusIn.HasValue ?
                new ObjectParameter("statusIn", statusIn) :
                new ObjectParameter("statusIn", typeof(short));
    
            var statusOutParameter = statusOut.HasValue ?
                new ObjectParameter("statusOut", statusOut) :
                new ObjectParameter("statusOut", typeof(short));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_rpt_VehicleLane_Ticket_Result>("cts_supervision_sp_rpt_VehicleLane_Ticket", fromDateParameter, toDateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, vehIDParameter, empIDParameter, tickIDParameter, statusInParameter, statusOutParameter, priceParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchDevice_Result> cts_supervision_sp_SearchDevice(Nullable<int> deviceType, string deviceCode, string regisPlateNumber, string customerName, Nullable<long> pageNumber, Nullable<int> recordsPerPage)
        {
            var deviceTypeParameter = deviceType.HasValue ?
                new ObjectParameter("DeviceType", deviceType) :
                new ObjectParameter("DeviceType", typeof(int));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("regisPlateNumber", regisPlateNumber) :
                new ObjectParameter("regisPlateNumber", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchDevice_Result>("cts_supervision_sp_SearchDevice", deviceTypeParameter, deviceCodeParameter, regisPlateNumberParameter, customerNameParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> cts_supervision_sp_SearchDevice_ToTal(Nullable<int> deviceType, string deviceCode, string regisPlateNumber, string customerName)
        {
            var deviceTypeParameter = deviceType.HasValue ?
                new ObjectParameter("DeviceType", deviceType) :
                new ObjectParameter("DeviceType", typeof(int));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("regisPlateNumber", regisPlateNumber) :
                new ObjectParameter("regisPlateNumber", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("cts_supervision_sp_SearchDevice_ToTal", deviceTypeParameter, deviceCodeParameter, regisPlateNumberParameter, customerNameParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckBtc_Result> cts_supervision_sp_SearchPostCheckBtc(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckBtc_Result>("cts_supervision_sp_SearchPostCheckBtc", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckBtc1_Result> cts_supervision_sp_SearchPostCheckBtc1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckBtc1_Result>("cts_supervision_sp_SearchPostCheckBtc1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckDecutedSmartCard_Result> cts_supervision_sp_SearchPostCheckDecutedSmartCard(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckDecutedSmartCard_Result>("cts_supervision_sp_SearchPostCheckDecutedSmartCard", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckDecutedSmartCard1_Result> cts_supervision_sp_SearchPostCheckDecutedSmartCard1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckDecutedSmartCard1_Result>("cts_supervision_sp_SearchPostCheckDecutedSmartCard1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckDetail_Result> cts_supervision_sp_SearchPostCheckDetail(string tableName, Nullable<System.Guid> incheckid)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var incheckidParameter = incheckid.HasValue ?
                new ObjectParameter("incheckid", incheckid) :
                new ObjectParameter("incheckid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckDetail_Result>("cts_supervision_sp_SearchPostCheckDetail", tableNameParameter, incheckidParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckEmployee_Result> cts_supervision_sp_SearchPostCheckEmployee(string tableName, Nullable<System.Guid> incheckid, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultWatchPostCheck, Nullable<int> notresultPostCheck, Nullable<int> testnull, Nullable<int> errorPostCheck)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var incheckidParameter = incheckid.HasValue ?
                new ObjectParameter("incheckid", incheckid) :
                new ObjectParameter("incheckid", typeof(System.Guid));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultWatchPostCheckParameter = resultWatchPostCheck.HasValue ?
                new ObjectParameter("resultWatchPostCheck", resultWatchPostCheck) :
                new ObjectParameter("resultWatchPostCheck", typeof(int));
    
            var notresultPostCheckParameter = notresultPostCheck.HasValue ?
                new ObjectParameter("notresultPostCheck", notresultPostCheck) :
                new ObjectParameter("notresultPostCheck", typeof(int));
    
            var testnullParameter = testnull.HasValue ?
                new ObjectParameter("testnull", testnull) :
                new ObjectParameter("testnull", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckEmployee_Result>("cts_supervision_sp_SearchPostCheckEmployee", tableNameParameter, incheckidParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultWatchPostCheckParameter, notresultPostCheckParameter, testnullParameter, errorPostCheckParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckForceOpen_Result> cts_supervision_sp_SearchPostCheckForceOpen(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckForceOpen_Result>("cts_supervision_sp_SearchPostCheckForceOpen", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckForceOpen1_Result> cts_supervision_sp_SearchPostCheckForceOpen1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> routeID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("routeID", routeID) :
                new ObjectParameter("routeID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckForceOpen1_Result>("cts_supervision_sp_SearchPostCheckForceOpen1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, routeIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> cts_supervision_sp_SearchPostCheckGroup(string tablename, Nullable<System.Guid> groupid)
        {
            var tablenameParameter = tablename != null ?
                new ObjectParameter("tablename", tablename) :
                new ObjectParameter("tablename", typeof(string));
    
            var groupidParameter = groupid.HasValue ?
                new ObjectParameter("groupid", groupid) :
                new ObjectParameter("groupid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("cts_supervision_sp_SearchPostCheckGroup", tablenameParameter, groupidParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckGroupForceOpen_Result> cts_supervision_sp_SearchPostCheckGroupForceOpen(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> routeID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("routeID", routeID) :
                new ObjectParameter("routeID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckGroupForceOpen_Result>("cts_supervision_sp_SearchPostCheckGroupForceOpen", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, routeIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckGroupForceOpen1_Result> cts_supervision_sp_SearchPostCheckGroupForceOpen1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckGroupForceOpen1_Result>("cts_supervision_sp_SearchPostCheckGroupForceOpen1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckOBU_Result> cts_supervision_sp_SearchPostCheckOBU(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckOBU_Result>("cts_supervision_sp_SearchPostCheckOBU", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckOBU1_Result> cts_supervision_sp_SearchPostCheckOBU1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckOBU1_Result>("cts_supervision_sp_SearchPostCheckOBU1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckOBUSmartCard_Result> cts_supervision_sp_SearchPostCheckOBUSmartCard(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckOBUSmartCard_Result>("cts_supervision_sp_SearchPostCheckOBUSmartCard", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckOBUSmartCard1_Result> cts_supervision_sp_SearchPostCheckOBUSmartCard1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckOBUSmartCard1_Result>("cts_supervision_sp_SearchPostCheckOBUSmartCard1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckOBUSmartCardtemp_Result> cts_supervision_sp_SearchPostCheckOBUSmartCardtemp(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckOBUSmartCardtemp_Result>("cts_supervision_sp_SearchPostCheckOBUSmartCardtemp", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckPiriodOBU_Result> cts_supervision_sp_SearchPostCheckPiriodOBU(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckPiriodOBU_Result>("cts_supervision_sp_SearchPostCheckPiriodOBU", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckPiriodOBU1_Result> cts_supervision_sp_SearchPostCheckPiriodOBU1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckPiriodOBU1_Result>("cts_supervision_sp_SearchPostCheckPiriodOBU1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckPiriodSmartCard_Result> cts_supervision_sp_SearchPostCheckPiriodSmartCard(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckPiriodSmartCard_Result>("cts_supervision_sp_SearchPostCheckPiriodSmartCard", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckPiriodSmartCard1_Result> cts_supervision_sp_SearchPostCheckPiriodSmartCard1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckPiriodSmartCard1_Result>("cts_supervision_sp_SearchPostCheckPiriodSmartCard1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckPiriodTicket_Result> cts_supervision_sp_SearchPostCheckPiriodTicket(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckPiriodTicket_Result>("cts_supervision_sp_SearchPostCheckPiriodTicket", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckPiriodTicket1_Result> cts_supervision_sp_SearchPostCheckPiriodTicket1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckPiriodTicket1_Result>("cts_supervision_sp_SearchPostCheckPiriodTicket1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckSmartCard_Result> cts_supervision_sp_SearchPostCheckSmartCard(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckSmartCard_Result>("cts_supervision_sp_SearchPostCheckSmartCard", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckSmartCard1_Result> cts_supervision_sp_SearchPostCheckSmartCard1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> routeID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("routeID", routeID) :
                new ObjectParameter("routeID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckSmartCard1_Result>("cts_supervision_sp_SearchPostCheckSmartCard1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, routeIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckTicketCounter_Result> cts_supervision_sp_SearchPostCheckTicketCounter(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckTicketCounter_Result>("cts_supervision_sp_SearchPostCheckTicketCounter", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckTicketCounter1_Result> cts_supervision_sp_SearchPostCheckTicketCounter1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckTicketCounter1_Result>("cts_supervision_sp_SearchPostCheckTicketCounter1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckTicketCounterTemp_Result> cts_supervision_sp_SearchPostCheckTicketCounterTemp(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> employeePostcheck, Nullable<int> shiftidPostcheck, Nullable<System.DateTime> datepostCheck, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var employeePostcheckParameter = employeePostcheck.HasValue ?
                new ObjectParameter("employeePostcheck", employeePostcheck) :
                new ObjectParameter("employeePostcheck", typeof(int));
    
            var shiftidPostcheckParameter = shiftidPostcheck.HasValue ?
                new ObjectParameter("shiftidPostcheck", shiftidPostcheck) :
                new ObjectParameter("shiftidPostcheck", typeof(int));
    
            var datepostCheckParameter = datepostCheck.HasValue ?
                new ObjectParameter("datepostCheck", datepostCheck) :
                new ObjectParameter("datepostCheck", typeof(System.DateTime));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckTicketCounterTemp_Result>("cts_supervision_sp_SearchPostCheckTicketCounterTemp", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, employeePostcheckParameter, shiftidPostcheckParameter, datepostCheckParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter);
        }
    
        public virtual int cts_supervision_sp_SearchPostCheckUpdate(string tableName, Nullable<short> precheckStatus, Nullable<short> preSuperStatus, Nullable<int> errorID, string id)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("precheckStatus", precheckStatus) :
                new ObjectParameter("precheckStatus", typeof(short));
    
            var preSuperStatusParameter = preSuperStatus.HasValue ?
                new ObjectParameter("preSuperStatus", preSuperStatus) :
                new ObjectParameter("preSuperStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("errorID", errorID) :
                new ObjectParameter("errorID", typeof(int));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_sp_SearchPostCheckUpdate", tableNameParameter, precheckStatusParameter, preSuperStatusParameter, errorIDParameter, idParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehicleDecutedMain_Result> cts_supervision_sp_SearchPostCheckVehicleDecutedMain(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testCheck, Nullable<int> decuted, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<long> pageNumber, Nullable<int> recordsPerPage)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testCheckParameter = testCheck.HasValue ?
                new ObjectParameter("testCheck", testCheck) :
                new ObjectParameter("testCheck", typeof(int));
    
            var decutedParameter = decuted.HasValue ?
                new ObjectParameter("decuted", decuted) :
                new ObjectParameter("decuted", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehicleDecutedMain_Result>("cts_supervision_sp_SearchPostCheckVehicleDecutedMain", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testCheckParameter, decutedParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual int cts_supervision_sp_SearchPostCheckVehicleDecutedMainTotal(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testCheck, Nullable<int> decuted, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast, ObjectParameter recordsCount)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testCheckParameter = testCheck.HasValue ?
                new ObjectParameter("testCheck", testCheck) :
                new ObjectParameter("testCheck", typeof(int));
    
            var decutedParameter = decuted.HasValue ?
                new ObjectParameter("decuted", decuted) :
                new ObjectParameter("decuted", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_sp_SearchPostCheckVehicleDecutedMainTotal", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testCheckParameter, decutedParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter, recordsCount);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehicleDecutedSmartCard_Result> cts_supervision_sp_SearchPostCheckVehicleDecutedSmartCard(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> decuted)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var decutedParameter = decuted.HasValue ?
                new ObjectParameter("decuted", decuted) :
                new ObjectParameter("decuted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehicleDecutedSmartCard_Result>("cts_supervision_sp_SearchPostCheckVehicleDecutedSmartCard", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, decutedParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehicleDecutedSmartCard1_Result> cts_supervision_sp_SearchPostCheckVehicleDecutedSmartCard1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> decuted, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var decutedParameter = decuted.HasValue ?
                new ObjectParameter("decuted", decuted) :
                new ObjectParameter("decuted", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehicleDecutedSmartCard1_Result>("cts_supervision_sp_SearchPostCheckVehicleDecutedSmartCard1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, decutedParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehicleForceMain_Result> cts_supervision_sp_SearchPostCheckVehicleForceMain(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preResultNotpostcheck, Nullable<int> preWatchPostChekc, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testCheck, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<long> pageNumber, Nullable<int> recordsPerPage)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testCheckParameter = testCheck.HasValue ?
                new ObjectParameter("testCheck", testCheck) :
                new ObjectParameter("testCheck", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehicleForceMain_Result>("cts_supervision_sp_SearchPostCheckVehicleForceMain", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preResultNotpostcheckParameter, preWatchPostChekcParameter, pretestnullParameter, suptestnullParameter, testCheckParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual int cts_supervision_sp_SearchPostCheckVehicleForceMainTotal(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testCheck, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast, ObjectParameter recordsCount)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testCheckParameter = testCheck.HasValue ?
                new ObjectParameter("testCheck", testCheck) :
                new ObjectParameter("testCheck", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_sp_SearchPostCheckVehicleForceMainTotal", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testCheckParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter, recordsCount);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehicleForceOpen_Result> cts_supervision_sp_SearchPostCheckVehicleForceOpen(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehicleForceOpen_Result>("cts_supervision_sp_SearchPostCheckVehicleForceOpen", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehicleForceOpen1_Result> cts_supervision_sp_SearchPostCheckVehicleForceOpen1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, string cardId, Nullable<int> ticketID, Nullable<int> crossStation, Nullable<short> recogResultType, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var cardIdParameter = cardId != null ?
                new ObjectParameter("cardId", cardId) :
                new ObjectParameter("cardId", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var crossStationParameter = crossStation.HasValue ?
                new ObjectParameter("crossStation", crossStation) :
                new ObjectParameter("crossStation", typeof(int));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehicleForceOpen1_Result>("cts_supervision_sp_SearchPostCheckVehicleForceOpen1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, cardIdParameter, ticketIDParameter, crossStationParameter, recogResultTypeParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehicleGroupDetailForceOpen_Result> cts_supervision_sp_SearchPostCheckVehicleGroupDetailForceOpen(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehicleGroupDetailForceOpen_Result>("cts_supervision_sp_SearchPostCheckVehicleGroupDetailForceOpen", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehicleGroupForceOpen_Result> cts_supervision_sp_SearchPostCheckVehicleGroupForceOpen(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehicleGroupForceOpen_Result>("cts_supervision_sp_SearchPostCheckVehicleGroupForceOpen", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehicleGroupForceOpen1_Result> cts_supervision_sp_SearchPostCheckVehicleGroupForceOpen1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehicleGroupForceOpen1_Result>("cts_supervision_sp_SearchPostCheckVehicleGroupForceOpen1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter);
        }
    
        public virtual int cts_supervision_sp_SearchPostCheckVehicleMain(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preResultNotpostcheck, Nullable<int> preWatchPostChekc, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testCheck, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<long> pageNumber, Nullable<int> recordsPerPage)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testCheckParameter = testCheck.HasValue ?
                new ObjectParameter("testCheck", testCheck) :
                new ObjectParameter("testCheck", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_sp_SearchPostCheckVehicleMain", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preResultNotpostcheckParameter, preWatchPostChekcParameter, pretestnullParameter, suptestnullParameter, testCheckParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual int cts_supervision_sp_SearchPostCheckVehicleMainTotal(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preResultNotpostcheck, Nullable<int> preWatchPostChekc, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testCheck, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast, ObjectParameter recordsCount)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testCheckParameter = testCheck.HasValue ?
                new ObjectParameter("testCheck", testCheck) :
                new ObjectParameter("testCheck", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_sp_SearchPostCheckVehicleMainTotal", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preResultNotpostcheckParameter, preWatchPostChekcParameter, pretestnullParameter, suptestnullParameter, testCheckParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter, recordsCount);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehicleOBU_Result> cts_supervision_sp_SearchPostCheckVehicleOBU(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> decuted)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var decutedParameter = decuted.HasValue ?
                new ObjectParameter("decuted", decuted) :
                new ObjectParameter("decuted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehicleOBU_Result>("cts_supervision_sp_SearchPostCheckVehicleOBU", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, decutedParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehicleOBU1_Result> cts_supervision_sp_SearchPostCheckVehicleOBU1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> decuted, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var decutedParameter = decuted.HasValue ?
                new ObjectParameter("decuted", decuted) :
                new ObjectParameter("decuted", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehicleOBU1_Result>("cts_supervision_sp_SearchPostCheckVehicleOBU1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, decutedParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehicleOBUSmartCard_Result> cts_supervision_sp_SearchPostCheckVehicleOBUSmartCard(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> decuted)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var decutedParameter = decuted.HasValue ?
                new ObjectParameter("decuted", decuted) :
                new ObjectParameter("decuted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehicleOBUSmartCard_Result>("cts_supervision_sp_SearchPostCheckVehicleOBUSmartCard", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, decutedParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehicleOBUSmartCard1_Result> cts_supervision_sp_SearchPostCheckVehicleOBUSmartCard1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> decuted, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var decutedParameter = decuted.HasValue ?
                new ObjectParameter("decuted", decuted) :
                new ObjectParameter("decuted", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehicleOBUSmartCard1_Result>("cts_supervision_sp_SearchPostCheckVehicleOBUSmartCard1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, decutedParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehiclePiriodMain_Result> cts_supervision_sp_SearchPostCheckVehiclePiriodMain(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testCheck, Nullable<int> typeTicket, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<long> pageNumber, Nullable<int> recordsPerPage)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testCheckParameter = testCheck.HasValue ?
                new ObjectParameter("testCheck", testCheck) :
                new ObjectParameter("testCheck", typeof(int));
    
            var typeTicketParameter = typeTicket.HasValue ?
                new ObjectParameter("typeTicket", typeTicket) :
                new ObjectParameter("typeTicket", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehiclePiriodMain_Result>("cts_supervision_sp_SearchPostCheckVehiclePiriodMain", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testCheckParameter, typeTicketParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual int cts_supervision_sp_SearchPostCheckVehiclePiriodMainTotal(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testCheck, Nullable<int> typeTicket, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast, ObjectParameter recordsCount)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testCheckParameter = testCheck.HasValue ?
                new ObjectParameter("testCheck", testCheck) :
                new ObjectParameter("testCheck", typeof(int));
    
            var typeTicketParameter = typeTicket.HasValue ?
                new ObjectParameter("typeTicket", typeTicket) :
                new ObjectParameter("typeTicket", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_sp_SearchPostCheckVehiclePiriodMainTotal", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testCheckParameter, typeTicketParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter, recordsCount);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehiclePiriodOBU_Result> cts_supervision_sp_SearchPostCheckVehiclePiriodOBU(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> typeTicket)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var typeTicketParameter = typeTicket.HasValue ?
                new ObjectParameter("typeTicket", typeTicket) :
                new ObjectParameter("typeTicket", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehiclePiriodOBU_Result>("cts_supervision_sp_SearchPostCheckVehiclePiriodOBU", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, typeTicketParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehiclePiriodOBU1_Result> cts_supervision_sp_SearchPostCheckVehiclePiriodOBU1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> typeTicket, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var typeTicketParameter = typeTicket.HasValue ?
                new ObjectParameter("typeTicket", typeTicket) :
                new ObjectParameter("typeTicket", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehiclePiriodOBU1_Result>("cts_supervision_sp_SearchPostCheckVehiclePiriodOBU1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, typeTicketParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehiclePiriodOBUTemp_Result> cts_supervision_sp_SearchPostCheckVehiclePiriodOBUTemp(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> typeTicket)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var typeTicketParameter = typeTicket.HasValue ?
                new ObjectParameter("typeTicket", typeTicket) :
                new ObjectParameter("typeTicket", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehiclePiriodOBUTemp_Result>("cts_supervision_sp_SearchPostCheckVehiclePiriodOBUTemp", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, typeTicketParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehiclePiriodSmartCard_Result> cts_supervision_sp_SearchPostCheckVehiclePiriodSmartCard(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> typeTicket)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var typeTicketParameter = typeTicket.HasValue ?
                new ObjectParameter("typeTicket", typeTicket) :
                new ObjectParameter("typeTicket", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehiclePiriodSmartCard_Result>("cts_supervision_sp_SearchPostCheckVehiclePiriodSmartCard", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, typeTicketParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehiclePiriodSmartCard1_Result> cts_supervision_sp_SearchPostCheckVehiclePiriodSmartCard1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> typeTicket, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var typeTicketParameter = typeTicket.HasValue ?
                new ObjectParameter("typeTicket", typeTicket) :
                new ObjectParameter("typeTicket", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehiclePiriodSmartCard1_Result>("cts_supervision_sp_SearchPostCheckVehiclePiriodSmartCard1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, typeTicketParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehiclePiriodTicket_Result> cts_supervision_sp_SearchPostCheckVehiclePiriodTicket(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> typeTicket)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var typeTicketParameter = typeTicket.HasValue ?
                new ObjectParameter("typeTicket", typeTicket) :
                new ObjectParameter("typeTicket", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehiclePiriodTicket_Result>("cts_supervision_sp_SearchPostCheckVehiclePiriodTicket", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, typeTicketParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehiclePiriodTicket1_Result> cts_supervision_sp_SearchPostCheckVehiclePiriodTicket1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> typeTicket, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var typeTicketParameter = typeTicket.HasValue ?
                new ObjectParameter("typeTicket", typeTicket) :
                new ObjectParameter("typeTicket", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehiclePiriodTicket1_Result>("cts_supervision_sp_SearchPostCheckVehiclePiriodTicket1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, typeTicketParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehicleSmartCard_Result> cts_supervision_sp_SearchPostCheckVehicleSmartCard(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehicleSmartCard_Result>("cts_supervision_sp_SearchPostCheckVehicleSmartCard", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehicleSmartCard1_Result> cts_supervision_sp_SearchPostCheckVehicleSmartCard1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehicleSmartCard1_Result>("cts_supervision_sp_SearchPostCheckVehicleSmartCard1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehicleTicketCounter_Result> cts_supervision_sp_SearchPostCheckVehicleTicketCounter(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehicleTicketCounter_Result>("cts_supervision_sp_SearchPostCheckVehicleTicketCounter", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehicleTicketCounter1_Result> cts_supervision_sp_SearchPostCheckVehicleTicketCounter1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehicleTicketCounter1_Result>("cts_supervision_sp_SearchPostCheckVehicleTicketCounter1", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual int cts_supervision_sp_SearchPostCheckVehicleTicketCounterMain(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, string numberbill, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preResultNotpostcheck, Nullable<int> preWatchPostChekc, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<long> pageNumber, Nullable<int> recordsPerPage)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var numberbillParameter = numberbill != null ?
                new ObjectParameter("numberbill", numberbill) :
                new ObjectParameter("numberbill", typeof(string));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_sp_SearchPostCheckVehicleTicketCounterMain", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, numberbillParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preResultNotpostcheckParameter, preWatchPostChekcParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual int cts_supervision_sp_SearchPostCheckVehicleTicketCounterMainToTal(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, string numberbill, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preResultNotpostcheck, Nullable<int> preWatchPostChekc, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast, ObjectParameter recordsCount)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var numberbillParameter = numberbill != null ?
                new ObjectParameter("numberbill", numberbill) :
                new ObjectParameter("numberbill", typeof(string));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_sp_SearchPostCheckVehicleTicketCounterMainToTal", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, numberbillParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preResultNotpostcheckParameter, preWatchPostChekcParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter, recordsCount);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchPostCheckVehicleTicketCounterReport_Result> cts_supervision_sp_SearchPostCheckVehicleTicketCounterReport(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preResultNotpostcheck, Nullable<int> preWatchPostChekc, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate, Nullable<int> checkTime, Nullable<int> shiftFirst, Nullable<int> shiftLast)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchPostCheckVehicleTicketCounterReport_Result>("cts_supervision_sp_SearchPostCheckVehicleTicketCounterReport", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preResultNotpostcheckParameter, preWatchPostChekcParameter, pretestnullParameter, suptestnullParameter, testDateParameter, checkTimeParameter, shiftFirstParameter, shiftLastParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchVehicleInformation_Result> cts_supervision_sp_SearchVehicleInformation(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string regisplatenumber, string areacode, Nullable<int> vihicletype, Nullable<int> vehicleload, string address, string owners, Nullable<int> amount, Nullable<int> test)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var areacodeParameter = areacode != null ?
                new ObjectParameter("areacode", areacode) :
                new ObjectParameter("areacode", typeof(string));
    
            var vihicletypeParameter = vihicletype.HasValue ?
                new ObjectParameter("vihicletype", vihicletype) :
                new ObjectParameter("vihicletype", typeof(int));
    
            var vehicleloadParameter = vehicleload.HasValue ?
                new ObjectParameter("vehicleload", vehicleload) :
                new ObjectParameter("vehicleload", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var ownersParameter = owners != null ?
                new ObjectParameter("owners", owners) :
                new ObjectParameter("owners", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var testParameter = test.HasValue ?
                new ObjectParameter("test", test) :
                new ObjectParameter("test", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchVehicleInformation_Result>("cts_supervision_sp_SearchVehicleInformation", fromdateParameter, todateParameter, regisplatenumberParameter, areacodeParameter, vihicletypeParameter, vehicleloadParameter, addressParameter, ownersParameter, amountParameter, testParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchVehicleInformationManual_Result> cts_supervision_sp_SearchVehicleInformationManual(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string regisplatenumber, string areacode, Nullable<int> vihicletype, Nullable<int> vehicleload, string address, string owners, Nullable<int> amount, Nullable<int> isforce, Nullable<int> isnormal, Nullable<int> isban, Nullable<int> test)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var areacodeParameter = areacode != null ?
                new ObjectParameter("areacode", areacode) :
                new ObjectParameter("areacode", typeof(string));
    
            var vihicletypeParameter = vihicletype.HasValue ?
                new ObjectParameter("vihicletype", vihicletype) :
                new ObjectParameter("vihicletype", typeof(int));
    
            var vehicleloadParameter = vehicleload.HasValue ?
                new ObjectParameter("vehicleload", vehicleload) :
                new ObjectParameter("vehicleload", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var ownersParameter = owners != null ?
                new ObjectParameter("owners", owners) :
                new ObjectParameter("owners", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var isforceParameter = isforce.HasValue ?
                new ObjectParameter("isforce", isforce) :
                new ObjectParameter("isforce", typeof(int));
    
            var isnormalParameter = isnormal.HasValue ?
                new ObjectParameter("isnormal", isnormal) :
                new ObjectParameter("isnormal", typeof(int));
    
            var isbanParameter = isban.HasValue ?
                new ObjectParameter("isban", isban) :
                new ObjectParameter("isban", typeof(int));
    
            var testParameter = test.HasValue ?
                new ObjectParameter("test", test) :
                new ObjectParameter("test", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchVehicleInformationManual_Result>("cts_supervision_sp_SearchVehicleInformationManual", fromdateParameter, todateParameter, regisplatenumberParameter, areacodeParameter, vihicletypeParameter, vehicleloadParameter, addressParameter, ownersParameter, amountParameter, isforceParameter, isnormalParameter, isbanParameter, testParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchVehicleInformationManualToTal_Result> cts_supervision_sp_SearchVehicleInformationManualToTal(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string regisplatenumber, string areacode, Nullable<int> vihicletype, Nullable<int> vehicleload, string address, string owners, Nullable<int> amount, Nullable<int> isforce, Nullable<int> isnormal, Nullable<int> isban, Nullable<int> test, Nullable<int> testData, Nullable<long> pageNumber, Nullable<int> recordsPerPage)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var areacodeParameter = areacode != null ?
                new ObjectParameter("areacode", areacode) :
                new ObjectParameter("areacode", typeof(string));
    
            var vihicletypeParameter = vihicletype.HasValue ?
                new ObjectParameter("vihicletype", vihicletype) :
                new ObjectParameter("vihicletype", typeof(int));
    
            var vehicleloadParameter = vehicleload.HasValue ?
                new ObjectParameter("vehicleload", vehicleload) :
                new ObjectParameter("vehicleload", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var ownersParameter = owners != null ?
                new ObjectParameter("owners", owners) :
                new ObjectParameter("owners", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var isforceParameter = isforce.HasValue ?
                new ObjectParameter("isforce", isforce) :
                new ObjectParameter("isforce", typeof(int));
    
            var isnormalParameter = isnormal.HasValue ?
                new ObjectParameter("isnormal", isnormal) :
                new ObjectParameter("isnormal", typeof(int));
    
            var isbanParameter = isban.HasValue ?
                new ObjectParameter("isban", isban) :
                new ObjectParameter("isban", typeof(int));
    
            var testParameter = test.HasValue ?
                new ObjectParameter("test", test) :
                new ObjectParameter("test", typeof(int));
    
            var testDataParameter = testData.HasValue ?
                new ObjectParameter("testData", testData) :
                new ObjectParameter("testData", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchVehicleInformationManualToTal_Result>("cts_supervision_sp_SearchVehicleInformationManualToTal", fromdateParameter, todateParameter, regisplatenumberParameter, areacodeParameter, vihicletypeParameter, vehicleloadParameter, addressParameter, ownersParameter, amountParameter, isforceParameter, isnormalParameter, isbanParameter, testParameter, testDataParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> cts_supervision_sp_SearchVehicleInformationManualToTal_Sum(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string regisplatenumber, string areacode, Nullable<int> vihicletype, Nullable<int> vehicleload, string address, string owners, Nullable<int> amount, Nullable<int> isforce, Nullable<int> isnormal, Nullable<int> isban, Nullable<int> test, Nullable<int> testData)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var areacodeParameter = areacode != null ?
                new ObjectParameter("areacode", areacode) :
                new ObjectParameter("areacode", typeof(string));
    
            var vihicletypeParameter = vihicletype.HasValue ?
                new ObjectParameter("vihicletype", vihicletype) :
                new ObjectParameter("vihicletype", typeof(int));
    
            var vehicleloadParameter = vehicleload.HasValue ?
                new ObjectParameter("vehicleload", vehicleload) :
                new ObjectParameter("vehicleload", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var ownersParameter = owners != null ?
                new ObjectParameter("owners", owners) :
                new ObjectParameter("owners", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var isforceParameter = isforce.HasValue ?
                new ObjectParameter("isforce", isforce) :
                new ObjectParameter("isforce", typeof(int));
    
            var isnormalParameter = isnormal.HasValue ?
                new ObjectParameter("isnormal", isnormal) :
                new ObjectParameter("isnormal", typeof(int));
    
            var isbanParameter = isban.HasValue ?
                new ObjectParameter("isban", isban) :
                new ObjectParameter("isban", typeof(int));
    
            var testParameter = test.HasValue ?
                new ObjectParameter("test", test) :
                new ObjectParameter("test", typeof(int));
    
            var testDataParameter = testData.HasValue ?
                new ObjectParameter("testData", testData) :
                new ObjectParameter("testData", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("cts_supervision_sp_SearchVehicleInformationManualToTal_Sum", fromdateParameter, todateParameter, regisplatenumberParameter, areacodeParameter, vihicletypeParameter, vehicleloadParameter, addressParameter, ownersParameter, amountParameter, isforceParameter, isnormalParameter, isbanParameter, testParameter, testDataParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchVehicleIsforceGroupDetail_Result> cts_supervision_sp_SearchVehicleIsforceGroupDetail(string tableName, Nullable<System.Guid> incheckid)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var incheckidParameter = incheckid.HasValue ?
                new ObjectParameter("incheckid", incheckid) :
                new ObjectParameter("incheckid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchVehicleIsforceGroupDetail_Result>("cts_supervision_sp_SearchVehicleIsforceGroupDetail", tableNameParameter, incheckidParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_SearchVehiclePostCheckDetail_Result> cts_supervision_sp_SearchVehiclePostCheckDetail(string tableName, Nullable<System.Guid> incheckid)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var incheckidParameter = incheckid.HasValue ?
                new ObjectParameter("incheckid", incheckid) :
                new ObjectParameter("incheckid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_SearchVehiclePostCheckDetail_Result>("cts_supervision_sp_SearchVehiclePostCheckDetail", tableNameParameter, incheckidParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_VehicleInformation_Result> cts_supervision_sp_VehicleInformation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_VehicleInformation_Result>("cts_supervision_sp_VehicleInformation");
        }
    
        public virtual ObjectResult<cts_supervision_sp_VehicleInformation_InOut_Result> cts_supervision_sp_VehicleInformation_InOut(string plateVehicle)
        {
            var plateVehicleParameter = plateVehicle != null ?
                new ObjectParameter("PlateVehicle", plateVehicle) :
                new ObjectParameter("PlateVehicle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_VehicleInformation_InOut_Result>("cts_supervision_sp_VehicleInformation_InOut", plateVehicleParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_VehicleInformation_Standard_Result> cts_supervision_sp_VehicleInformation_Standard(string vehiclePlate)
        {
            var vehiclePlateParameter = vehiclePlate != null ?
                new ObjectParameter("VehiclePlate", vehiclePlate) :
                new ObjectParameter("VehiclePlate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_VehicleInformation_Standard_Result>("cts_supervision_sp_VehicleInformation_Standard", vehiclePlateParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_VehicleInformationManual_Result> cts_supervision_sp_VehicleInformationManual(string plateNumber, Nullable<short> vehicleGroup)
        {
            var plateNumberParameter = plateNumber != null ?
                new ObjectParameter("PlateNumber", plateNumber) :
                new ObjectParameter("PlateNumber", typeof(string));
    
            var vehicleGroupParameter = vehicleGroup.HasValue ?
                new ObjectParameter("VehicleGroup", vehicleGroup) :
                new ObjectParameter("VehicleGroup", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_VehicleInformationManual_Result>("cts_supervision_sp_VehicleInformationManual", plateNumberParameter, vehicleGroupParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_VehicleInformationManualCurrent_Result> cts_supervision_sp_VehicleInformationManualCurrent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_VehicleInformationManualCurrent_Result>("cts_supervision_sp_VehicleInformationManualCurrent");
        }
    
        public virtual ObjectResult<cts_supervision_sp_VehicleOBU_SmartCardTicket_Result> cts_supervision_sp_VehicleOBU_SmartCardTicket(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, string regisplate, Nullable<int> empID, string tickID, Nullable<int> precheckStatus, Nullable<int> superSatus, Nullable<int> priceid, Nullable<int> errorid)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var regisplateParameter = regisplate != null ?
                new ObjectParameter("regisplate", regisplate) :
                new ObjectParameter("regisplate", typeof(string));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var tickIDParameter = tickID != null ?
                new ObjectParameter("tickID", tickID) :
                new ObjectParameter("tickID", typeof(string));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("precheckStatus", precheckStatus) :
                new ObjectParameter("precheckStatus", typeof(int));
    
            var superSatusParameter = superSatus.HasValue ?
                new ObjectParameter("superSatus", superSatus) :
                new ObjectParameter("superSatus", typeof(int));
    
            var priceidParameter = priceid.HasValue ?
                new ObjectParameter("priceid", priceid) :
                new ObjectParameter("priceid", typeof(int));
    
            var erroridParameter = errorid.HasValue ?
                new ObjectParameter("errorid", errorid) :
                new ObjectParameter("errorid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_VehicleOBU_SmartCardTicket_Result>("cts_supervision_sp_VehicleOBU_SmartCardTicket", fromDateParameter, toDateParameter, dateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, regisplateParameter, empIDParameter, tickIDParameter, precheckStatusParameter, superSatusParameter, priceidParameter, erroridParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_VehiclePeriodTicket_Result> cts_supervision_sp_VehiclePeriodTicket(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, string regisplate, Nullable<int> empID, string tickID, Nullable<int> precheckStatus, Nullable<int> superSatus, Nullable<int> priceid, Nullable<int> errorid, Nullable<int> ticketmonth, Nullable<int> ticketcount)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var regisplateParameter = regisplate != null ?
                new ObjectParameter("regisplate", regisplate) :
                new ObjectParameter("regisplate", typeof(string));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var tickIDParameter = tickID != null ?
                new ObjectParameter("tickID", tickID) :
                new ObjectParameter("tickID", typeof(string));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("precheckStatus", precheckStatus) :
                new ObjectParameter("precheckStatus", typeof(int));
    
            var superSatusParameter = superSatus.HasValue ?
                new ObjectParameter("superSatus", superSatus) :
                new ObjectParameter("superSatus", typeof(int));
    
            var priceidParameter = priceid.HasValue ?
                new ObjectParameter("priceid", priceid) :
                new ObjectParameter("priceid", typeof(int));
    
            var erroridParameter = errorid.HasValue ?
                new ObjectParameter("errorid", errorid) :
                new ObjectParameter("errorid", typeof(int));
    
            var ticketmonthParameter = ticketmonth.HasValue ?
                new ObjectParameter("ticketmonth", ticketmonth) :
                new ObjectParameter("ticketmonth", typeof(int));
    
            var ticketcountParameter = ticketcount.HasValue ?
                new ObjectParameter("ticketcount", ticketcount) :
                new ObjectParameter("ticketcount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_VehiclePeriodTicket_Result>("cts_supervision_sp_VehiclePeriodTicket", fromDateParameter, toDateParameter, dateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, regisplateParameter, empIDParameter, tickIDParameter, precheckStatusParameter, superSatusParameter, priceidParameter, erroridParameter, ticketmonthParameter, ticketcountParameter);
        }
    
        public virtual ObjectResult<cts_supervision_sp_VehicleTicket_Result> cts_supervision_sp_VehicleTicket(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> date, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, string regisplate, Nullable<int> empID, string tickID, Nullable<int> precheckStatus, Nullable<int> superSatus, Nullable<int> priceid, Nullable<int> errorid)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var regisplateParameter = regisplate != null ?
                new ObjectParameter("regisplate", regisplate) :
                new ObjectParameter("regisplate", typeof(string));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var tickIDParameter = tickID != null ?
                new ObjectParameter("tickID", tickID) :
                new ObjectParameter("tickID", typeof(string));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("precheckStatus", precheckStatus) :
                new ObjectParameter("precheckStatus", typeof(int));
    
            var superSatusParameter = superSatus.HasValue ?
                new ObjectParameter("superSatus", superSatus) :
                new ObjectParameter("superSatus", typeof(int));
    
            var priceidParameter = priceid.HasValue ?
                new ObjectParameter("priceid", priceid) :
                new ObjectParameter("priceid", typeof(int));
    
            var erroridParameter = errorid.HasValue ?
                new ObjectParameter("errorid", errorid) :
                new ObjectParameter("errorid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_sp_VehicleTicket_Result>("cts_supervision_sp_VehicleTicket", fromDateParameter, toDateParameter, dateParameter, shiftIDParameter, stationIDParameter, laneIDParameter, regisplateParameter, empIDParameter, tickIDParameter, precheckStatusParameter, superSatusParameter, priceidParameter, erroridParameter);
        }
    
        public virtual ObjectResult<cts_supervision_temp_Result> cts_supervision_temp(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervision_temp_Result>("cts_supervision_temp", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter);
        }
    
        public virtual int cts_supervision_Update_SupervisionStatus(Nullable<System.Guid> outcheckID, Nullable<short> supervisionstatus)
        {
            var outcheckIDParameter = outcheckID.HasValue ?
                new ObjectParameter("OutcheckID", outcheckID) :
                new ObjectParameter("OutcheckID", typeof(System.Guid));
    
            var supervisionstatusParameter = supervisionstatus.HasValue ?
                new ObjectParameter("Supervisionstatus", supervisionstatus) :
                new ObjectParameter("Supervisionstatus", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cts_supervision_Update_SupervisionStatus", outcheckIDParameter, supervisionstatusParameter);
        }
    
        public virtual ObjectResult<cts_supervison_sp_DeviceInformation_Result> cts_supervison_sp_DeviceInformation(Nullable<int> deviceType, string deviceID)
        {
            var deviceTypeParameter = deviceType.HasValue ?
                new ObjectParameter("DeviceType", deviceType) :
                new ObjectParameter("DeviceType", typeof(int));
    
            var deviceIDParameter = deviceID != null ?
                new ObjectParameter("DeviceID", deviceID) :
                new ObjectParameter("DeviceID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_supervison_sp_DeviceInformation_Result>("cts_supervison_sp_DeviceInformation", deviceTypeParameter, deviceIDParameter);
        }
    
        public virtual ObjectResult<cts_thunghiem_InOut_Result> cts_thunghiem_InOut(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, string codedevide, string recogplatenumber, Nullable<int> checkvehiclenumber, Nullable<int> checkvehicletype)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var checkvehiclenumberParameter = checkvehiclenumber.HasValue ?
                new ObjectParameter("checkvehiclenumber", checkvehiclenumber) :
                new ObjectParameter("checkvehiclenumber", typeof(int));
    
            var checkvehicletypeParameter = checkvehicletype.HasValue ?
                new ObjectParameter("checkvehicletype", checkvehicletype) :
                new ObjectParameter("checkvehicletype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_thunghiem_InOut_Result>("cts_thunghiem_InOut", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, codedevideParameter, recogplatenumberParameter, checkvehiclenumberParameter, checkvehicletypeParameter);
        }
    
        public virtual ObjectResult<cts_TicketCategory_Result> cts_TicketCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cts_TicketCategory_Result>("cts_TicketCategory");
        }
    
        public virtual ObjectResult<string> DeleteGenerator(string tableName, string tableNameIn, string tableNameOut, ObjectParameter insertStringOutParam)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var tableNameInParameter = tableNameIn != null ?
                new ObjectParameter("tableNameIn", tableNameIn) :
                new ObjectParameter("tableNameIn", typeof(string));
    
            var tableNameOutParameter = tableNameOut != null ?
                new ObjectParameter("tableNameOut", tableNameOut) :
                new ObjectParameter("tableNameOut", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteGenerator", tableNameParameter, tableNameInParameter, tableNameOutParameter, insertStringOutParam);
        }
    
        public virtual int DeleteQuery(Nullable<int> laneDeviceID, string stationCode, string laneCode)
        {
            var laneDeviceIDParameter = laneDeviceID.HasValue ?
                new ObjectParameter("LaneDeviceID", laneDeviceID) :
                new ObjectParameter("LaneDeviceID", typeof(int));
    
            var stationCodeParameter = stationCode != null ?
                new ObjectParameter("StationCode", stationCode) :
                new ObjectParameter("StationCode", typeof(string));
    
            var laneCodeParameter = laneCode != null ?
                new ObjectParameter("LaneCode", laneCode) :
                new ObjectParameter("LaneCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteQuery", laneDeviceIDParameter, stationCodeParameter, laneCodeParameter);
        }
    
        public virtual ObjectResult<export1_Result> export1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<export1_Result>("export1", fromdateParameter, toDateParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<InBangKeTheo_StatisticCardCode_Result> InBangKeTheo_StatisticCardCode(string statisticCardCode)
        {
            var statisticCardCodeParameter = statisticCardCode != null ?
                new ObjectParameter("StatisticCardCode", statisticCardCode) :
                new ObjectParameter("StatisticCardCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InBangKeTheo_StatisticCardCode_Result>("InBangKeTheo_StatisticCardCode", statisticCardCodeParameter);
        }
    
        public virtual ObjectResult<InBangKeTheo_StatisticCardCode_Out_Result> InBangKeTheo_StatisticCardCode_Out(string statisticCardCode)
        {
            var statisticCardCodeParameter = statisticCardCode != null ?
                new ObjectParameter("StatisticCardCode", statisticCardCode) :
                new ObjectParameter("StatisticCardCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InBangKeTheo_StatisticCardCode_Out_Result>("InBangKeTheo_StatisticCardCode_Out", statisticCardCodeParameter);
        }
    
        public virtual int InsertGenerator(string tableName, string tableNameIn, string tableNameOut, ObjectParameter insertStringOutParam)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var tableNameInParameter = tableNameIn != null ?
                new ObjectParameter("tableNameIn", tableNameIn) :
                new ObjectParameter("tableNameIn", typeof(string));
    
            var tableNameOutParameter = tableNameOut != null ?
                new ObjectParameter("tableNameOut", tableNameOut) :
                new ObjectParameter("tableNameOut", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertGenerator", tableNameParameter, tableNameInParameter, tableNameOutParameter, insertStringOutParam);
        }
    
        public virtual ObjectResult<string> InsertGeneratorCMO(string tableName, string tableNameIn, string tableNameOut, ObjectParameter insertStringOutParam)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var tableNameInParameter = tableNameIn != null ?
                new ObjectParameter("tableNameIn", tableNameIn) :
                new ObjectParameter("tableNameIn", typeof(string));
    
            var tableNameOutParameter = tableNameOut != null ?
                new ObjectParameter("tableNameOut", tableNameOut) :
                new ObjectParameter("tableNameOut", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertGeneratorCMO", tableNameParameter, tableNameInParameter, tableNameOutParameter, insertStringOutParam);
        }
    
        public virtual int LinkServerSyncData(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LinkServerSyncData", fromDateParameter, toDateParameter);
        }
    
        public virtual int MarkErrorHistory(Nullable<int> sequence, Nullable<System.Guid> inCheckID, Nullable<int> stationID, Nullable<bool> isPreCheck, Nullable<int> errorID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<System.DateTime> makeDate, string note, Nullable<int> tableType, Nullable<int> directionType, Nullable<short> result)
        {
            var sequenceParameter = sequence.HasValue ?
                new ObjectParameter("Sequence", sequence) :
                new ObjectParameter("Sequence", typeof(int));
    
            var inCheckIDParameter = inCheckID.HasValue ?
                new ObjectParameter("InCheckID", inCheckID) :
                new ObjectParameter("InCheckID", typeof(System.Guid));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var isPreCheckParameter = isPreCheck.HasValue ?
                new ObjectParameter("IsPreCheck", isPreCheck) :
                new ObjectParameter("IsPreCheck", typeof(bool));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var makeDateParameter = makeDate.HasValue ?
                new ObjectParameter("MakeDate", makeDate) :
                new ObjectParameter("MakeDate", typeof(System.DateTime));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var tableTypeParameter = tableType.HasValue ?
                new ObjectParameter("TableType", tableType) :
                new ObjectParameter("TableType", typeof(int));
    
            var directionTypeParameter = directionType.HasValue ?
                new ObjectParameter("DirectionType", directionType) :
                new ObjectParameter("DirectionType", typeof(int));
    
            var resultParameter = result.HasValue ?
                new ObjectParameter("Result", result) :
                new ObjectParameter("Result", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MarkErrorHistory", sequenceParameter, inCheckIDParameter, stationIDParameter, isPreCheckParameter, errorIDParameter, employeeIDParameter, shiftIDParameter, makeDateParameter, noteParameter, tableTypeParameter, directionTypeParameter, resultParameter);
        }
    
        public virtual int PPCWhileListCopyData(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PPCWhileListCopyData", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Report1_Result> Report1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report1_Result>("Report1");
        }
    
        public virtual int sp_AACreateMinMax(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AACreateMinMax", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_AACreateTableSummary_Result> sp_AACreateTableSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AACreateTableSummary_Result>("sp_AACreateTableSummary", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> sp_AC_ActiveSmartCard_CheckSmartCardID(string smartCardID)
        {
            var smartCardIDParameter = smartCardID != null ?
                new ObjectParameter("SmartCardID", smartCardID) :
                new ObjectParameter("SmartCardID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("sp_AC_ActiveSmartCard_CheckSmartCardID", smartCardIDParameter);
        }
    
        public virtual ObjectResult<sp_AC_ActiveSmartCard_GetAll_Result> sp_AC_ActiveSmartCard_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AC_ActiveSmartCard_GetAll_Result>("sp_AC_ActiveSmartCard_GetAll");
        }
    
        public virtual ObjectResult<sp_AC_PPC_BC_DoanhThuTieuThuTheoLoaiXe_Result> sp_AC_PPC_BC_DoanhThuTieuThuTheoLoaiXe(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AC_PPC_BC_DoanhThuTieuThuTheoLoaiXe_Result>("sp_AC_PPC_BC_DoanhThuTieuThuTheoLoaiXe", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_AC_PPC_BC_DoiSoatTheTraTruoc_Result> sp_AC_PPC_BC_DoiSoatTheTraTruoc(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AC_PPC_BC_DoiSoatTheTraTruoc_Result>("sp_AC_PPC_BC_DoiSoatTheTraTruoc", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_AC_PPC_BC_SuDungThe_TheoThoiGian_Result> sp_AC_PPC_BC_SuDungThe_TheoThoiGian(Nullable<System.DateTime> tuNgay, Nullable<System.DateTime> denNgay, Nullable<int> thang)
        {
            var tuNgayParameter = tuNgay.HasValue ?
                new ObjectParameter("TuNgay", tuNgay) :
                new ObjectParameter("TuNgay", typeof(System.DateTime));
    
            var denNgayParameter = denNgay.HasValue ?
                new ObjectParameter("DenNgay", denNgay) :
                new ObjectParameter("DenNgay", typeof(System.DateTime));
    
            var thangParameter = thang.HasValue ?
                new ObjectParameter("Thang", thang) :
                new ObjectParameter("Thang", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AC_PPC_BC_SuDungThe_TheoThoiGian_Result>("sp_AC_PPC_BC_SuDungThe_TheoThoiGian", tuNgayParameter, denNgayParameter, thangParameter);
        }
    
        public virtual ObjectResult<sp_AC_PPC_BC_TongHopDoanhThu_TheTraTruoc_Result> sp_AC_PPC_BC_TongHopDoanhThu_TheTraTruoc(Nullable<int> typeSearch, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var typeSearchParameter = typeSearch.HasValue ?
                new ObjectParameter("TypeSearch", typeSearch) :
                new ObjectParameter("TypeSearch", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AC_PPC_BC_TongHopDoanhThu_TheTraTruoc_Result>("sp_AC_PPC_BC_TongHopDoanhThu_TheTraTruoc", typeSearchParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_AC_PPC_BC_TongHopTieuThuTheTraTruoc_Result> sp_AC_PPC_BC_TongHopTieuThuTheTraTruoc(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AC_PPC_BC_TongHopTieuThuTheTraTruoc_Result>("sp_AC_PPC_BC_TongHopTieuThuTheTraTruoc", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_AC_PrepaidCardAccount_Result> sp_AC_PrepaidCardAccount(string cardID, string regisPlateNumber, string customerName, Nullable<long> pageNumber, Nullable<int> recordsPerPage)
        {
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("RegisPlateNumber", regisPlateNumber) :
                new ObjectParameter("RegisPlateNumber", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AC_PrepaidCardAccount_Result>("sp_AC_PrepaidCardAccount", cardIDParameter, regisPlateNumberParameter, customerNameParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<sp_AC_PrepaidCardAccount_GetByCardID_Result> sp_AC_PrepaidCardAccount_GetByCardID(string cardID)
        {
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AC_PrepaidCardAccount_GetByCardID_Result>("sp_AC_PrepaidCardAccount_GetByCardID", cardIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_AC_PrepaidCardAccount_Total(string cardID, string regisPlateNumber, string customerName)
        {
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("RegisPlateNumber", regisPlateNumber) :
                new ObjectParameter("RegisPlateNumber", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_AC_PrepaidCardAccount_Total", cardIDParameter, regisPlateNumberParameter, customerNameParameter);
        }
    
        public virtual ObjectResult<sp_AC_PrepaidCardAuditBalance_Result> sp_AC_PrepaidCardAuditBalance(string cardID, string regisPlateNumber, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> auditResult, Nullable<long> pageNumber, Nullable<int> recordsPerPage)
        {
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("RegisPlateNumber", regisPlateNumber) :
                new ObjectParameter("RegisPlateNumber", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var auditResultParameter = auditResult.HasValue ?
                new ObjectParameter("AuditResult", auditResult) :
                new ObjectParameter("AuditResult", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AC_PrepaidCardAuditBalance_Result>("sp_AC_PrepaidCardAuditBalance", cardIDParameter, regisPlateNumberParameter, fromDateParameter, toDateParameter, auditResultParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_AC_PrepaidCardAuditBalance_Total(string cardID, string regisPlateNumber, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> auditResult)
        {
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("RegisPlateNumber", regisPlateNumber) :
                new ObjectParameter("RegisPlateNumber", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var auditResultParameter = auditResult.HasValue ?
                new ObjectParameter("AuditResult", auditResult) :
                new ObjectParameter("AuditResult", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_AC_PrepaidCardAuditBalance_Total", cardIDParameter, regisPlateNumberParameter, fromDateParameter, toDateParameter, auditResultParameter);
        }
    
        public virtual ObjectResult<sp_AC_PrepaidCardCollection_Result> sp_AC_PrepaidCardCollection(string cardID, string plateNumber, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> transactionType, Nullable<long> pageNumber, Nullable<int> recordsPerPage)
        {
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            var plateNumberParameter = plateNumber != null ?
                new ObjectParameter("PlateNumber", plateNumber) :
                new ObjectParameter("PlateNumber", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AC_PrepaidCardCollection_Result>("sp_AC_PrepaidCardCollection", cardIDParameter, plateNumberParameter, fromDateParameter, toDateParameter, transactionTypeParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<sp_AC_PrepaidCardCollection_GetRecharge_Result> sp_AC_PrepaidCardCollection_GetRecharge(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> station, Nullable<int> shiftID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AC_PrepaidCardCollection_GetRecharge_Result>("sp_AC_PrepaidCardCollection_GetRecharge", fromDateParameter, toDateParameter, stationParameter, shiftIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_AC_PrepaidCardCollection_Total(string cardID, string plateNumber, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> transactionType)
        {
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            var plateNumberParameter = plateNumber != null ?
                new ObjectParameter("PlateNumber", plateNumber) :
                new ObjectParameter("PlateNumber", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_AC_PrepaidCardCollection_Total", cardIDParameter, plateNumberParameter, fromDateParameter, toDateParameter, transactionTypeParameter);
        }
    
        public virtual int sp_AC_SmartCardAccount_CheckSmartCardAccountID(Nullable<long> smartCardAccountID)
        {
            var smartCardAccountIDParameter = smartCardAccountID.HasValue ?
                new ObjectParameter("SmartCardAccountID", smartCardAccountID) :
                new ObjectParameter("SmartCardAccountID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AC_SmartCardAccount_CheckSmartCardAccountID", smartCardAccountIDParameter);
        }
    
        public virtual int sp_AC_SmartCardAccount_CheckSmartCardID(string smartCardID)
        {
            var smartCardIDParameter = smartCardID != null ?
                new ObjectParameter("SmartCardID", smartCardID) :
                new ObjectParameter("SmartCardID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AC_SmartCardAccount_CheckSmartCardID", smartCardIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ACC_CheckSummary(Nullable<int> months, Nullable<int> years)
        {
            var monthsParameter = months.HasValue ?
                new ObjectParameter("Months", months) :
                new ObjectParameter("Months", typeof(int));
    
            var yearsParameter = years.HasValue ?
                new ObjectParameter("Years", years) :
                new ObjectParameter("Years", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ACC_CheckSummary", monthsParameter, yearsParameter);
        }
    
        public virtual int sp_ACC_Get_Dup_Smart_Card(Nullable<int> months, Nullable<int> years)
        {
            var monthsParameter = months.HasValue ?
                new ObjectParameter("months", months) :
                new ObjectParameter("months", typeof(int));
    
            var yearsParameter = years.HasValue ?
                new ObjectParameter("years", years) :
                new ObjectParameter("years", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ACC_Get_Dup_Smart_Card", monthsParameter, yearsParameter);
        }
    
        public virtual int sp_ACC_Get_Duplicate_Out_Smart_Card(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ACC_Get_Duplicate_Out_Smart_Card", fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_ACC_Get_Lost_Out_Smart_Card(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ACC_Get_Lost_Out_Smart_Card", fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_ACC_Get_Lost_Out_Smart_CardVer2(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<short> landId, Nullable<short> stationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var landIdParameter = landId.HasValue ?
                new ObjectParameter("LandId", landId) :
                new ObjectParameter("LandId", typeof(short));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ACC_Get_Lost_Out_Smart_CardVer2", fromDateParameter, toDateParameter, landIdParameter, stationIDParameter);
        }
    
        public virtual int sp_ACC_Get_Lost_Out_Smart_CardVer3(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<short> laneId, Nullable<short> stationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var laneIdParameter = laneId.HasValue ?
                new ObjectParameter("LaneId", laneId) :
                new ObjectParameter("LaneId", typeof(short));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ACC_Get_Lost_Out_Smart_CardVer3", fromDateParameter, toDateParameter, laneIdParameter, stationIDParameter);
        }
    
        public virtual int sp_ACC_Get_Lost_Out_Smart_CardVer4(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<short> laneId, Nullable<short> stationID, string extraRefix)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var laneIdParameter = laneId.HasValue ?
                new ObjectParameter("LaneId", laneId) :
                new ObjectParameter("LaneId", typeof(short));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(short));
    
            var extraRefixParameter = extraRefix != null ?
                new ObjectParameter("ExtraRefix", extraRefix) :
                new ObjectParameter("ExtraRefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ACC_Get_Lost_Out_Smart_CardVer4", fromDateParameter, toDateParameter, laneIdParameter, stationIDParameter, extraRefixParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_ACC_Get_Number_Dupilcate_Out_Smart_Card(Nullable<int> months, Nullable<int> years)
        {
            var monthsParameter = months.HasValue ?
                new ObjectParameter("months", months) :
                new ObjectParameter("months", typeof(int));
    
            var yearsParameter = years.HasValue ?
                new ObjectParameter("years", years) :
                new ObjectParameter("years", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_ACC_Get_Number_Dupilcate_Out_Smart_Card", monthsParameter, yearsParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ACC_Get_Number_Lost_Out_Smart_Card(Nullable<int> months, Nullable<int> years)
        {
            var monthsParameter = months.HasValue ?
                new ObjectParameter("months", months) :
                new ObjectParameter("months", typeof(int));
    
            var yearsParameter = years.HasValue ?
                new ObjectParameter("years", years) :
                new ObjectParameter("years", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ACC_Get_Number_Lost_Out_Smart_Card", monthsParameter, yearsParameter);
        }
    
        public virtual int sp_ACC_IncomeCenter_fromdate_todate(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ACC_IncomeCenter_fromdate_todate", fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_ACC_IncomeCenter_fromdate_todate_1(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ACC_IncomeCenter_fromdate_todate_1", fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_ACC_IncomeCenter_seri_fromdate_todate(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ACC_IncomeCenter_seri_fromdate_todate", fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_ACC_IncomeCenter_seri_month(string year)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ACC_IncomeCenter_seri_month", yearParameter);
        }
    
        public virtual int sp_ACC_IncomeCenter_seri_month_1(string year)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ACC_IncomeCenter_seri_month_1", yearParameter);
        }
    
        public virtual int sp_ACC_IncomeCentre_seri_fromdate_todate(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ACC_IncomeCentre_seri_fromdate_todate", fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_ACC_IncomeStation_fromdate_todate(string station, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ACC_IncomeStation_fromdate_todate", stationParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_ACC_IncomeStation_seri(string station, string shift, Nullable<System.DateTime> sDate)
        {
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ACC_IncomeStation_seri", stationParameter, shiftParameter, sDateParameter);
        }
    
        public virtual int sp_ACC_IncomeStation_seri_fromdate_todate(string station, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ACC_IncomeStation_seri_fromdate_todate", stationParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_ACC_IncomeStation_seri_month(Nullable<int> station, string year)
        {
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ACC_IncomeStation_seri_month", stationParameter, yearParameter);
        }
    
        public virtual ObjectResult<sp_ACC_ListExport_Result> sp_ACC_ListExport(string station, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ACC_ListExport_Result>("sp_ACC_ListExport", stationParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_ACC_ListExportDetail_Result> sp_ACC_ListExportDetail(string station, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ACC_ListExportDetail_Result>("sp_ACC_ListExportDetail", stationParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_ACC_ListImport_Result> sp_ACC_ListImport(string station, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ACC_ListImport_Result>("sp_ACC_ListImport", stationParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_ACC_ListImportDetail_Result> sp_ACC_ListImportDetail(string station, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ACC_ListImportDetail_Result>("sp_ACC_ListImportDetail", stationParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_AuditPPCAccount_Auto()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AuditPPCAccount_Auto");
        }
    
        public virtual int sp_AuditPPCAccount_Delete(string plateNumber, string cardID, Nullable<System.DateTime> deleteDate)
        {
            var plateNumberParameter = plateNumber != null ?
                new ObjectParameter("PlateNumber", plateNumber) :
                new ObjectParameter("PlateNumber", typeof(string));
    
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AuditPPCAccount_Delete", plateNumberParameter, cardIDParameter, deleteDateParameter);
        }
    
        public virtual int sp_AuditPPCAccount_Manual(string plateNumber, string cardID)
        {
            var plateNumberParameter = plateNumber != null ?
                new ObjectParameter("PlateNumber", plateNumber) :
                new ObjectParameter("PlateNumber", typeof(string));
    
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AuditPPCAccount_Manual", plateNumberParameter, cardIDParameter);
        }
    
        public virtual int sp_BaoCaoNhatXuatTon(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> stockID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("StockID", stockID) :
                new ObjectParameter("StockID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BaoCaoNhatXuatTon", fromDateParameter, toDateParameter, stockIDParameter);
        }
    
        public virtual int sp_BaoCaoNhatXuatTonDetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> stockID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("StockID", stockID) :
                new ObjectParameter("StockID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BaoCaoNhatXuatTonDetail", fromDateParameter, toDateParameter, stockIDParameter);
        }
    
        public virtual int sp_BaoCaoNhatXuatTonDetail_TrungTam(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> stockID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("StockID", stockID) :
                new ObjectParameter("StockID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BaoCaoNhatXuatTonDetail_TrungTam", fromDateParameter, toDateParameter, stockIDParameter);
        }
    
        public virtual int sp_BaoCaoTinhHinhSuDungVePhiDuongBoTuInTheoCa(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> shIFtID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var shIFtIDParameter = shIFtID.HasValue ?
                new ObjectParameter("ShIFtID", shIFtID) :
                new ObjectParameter("ShIFtID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BaoCaoTinhHinhSuDungVePhiDuongBoTuInTheoCa", fromDateParameter, toDateParameter, stationIDParameter, laneIDParameter, shIFtIDParameter);
        }
    
        public virtual int sp_BaoCaoTinhHinhSuDungVePhiDuongBoTuInTheoThang(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shIFtID, Nullable<int> shIFtFirst, Nullable<int> shIFtLast, Nullable<int> shIFtTime, Nullable<int> shIFtT)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var shIFtIDParameter = shIFtID.HasValue ?
                new ObjectParameter("ShIFtID", shIFtID) :
                new ObjectParameter("ShIFtID", typeof(int));
    
            var shIFtFirstParameter = shIFtFirst.HasValue ?
                new ObjectParameter("ShIFtFirst", shIFtFirst) :
                new ObjectParameter("ShIFtFirst", typeof(int));
    
            var shIFtLastParameter = shIFtLast.HasValue ?
                new ObjectParameter("ShIFtLast", shIFtLast) :
                new ObjectParameter("ShIFtLast", typeof(int));
    
            var shIFtTimeParameter = shIFtTime.HasValue ?
                new ObjectParameter("ShIFtTime", shIFtTime) :
                new ObjectParameter("ShIFtTime", typeof(int));
    
            var shIFtTParameter = shIFtT.HasValue ?
                new ObjectParameter("ShIFtT", shIFtT) :
                new ObjectParameter("ShIFtT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BaoCaoTinhHinhSuDungVePhiDuongBoTuInTheoThang", checkTimeParameter, fromDateParameter, toDateParameter, shIFtIDParameter, shIFtFirstParameter, shIFtLastParameter, shIFtTimeParameter, shIFtTParameter);
        }
    
        public virtual int sp_BaoCaoTinhHinhSuDungVePhiDuongBoTuInTheoThang03(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shIFtID, Nullable<int> shIFtFirst, Nullable<int> shIFtLast, Nullable<int> shIFtTime, Nullable<int> shIFtT)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var shIFtIDParameter = shIFtID.HasValue ?
                new ObjectParameter("ShIFtID", shIFtID) :
                new ObjectParameter("ShIFtID", typeof(int));
    
            var shIFtFirstParameter = shIFtFirst.HasValue ?
                new ObjectParameter("ShIFtFirst", shIFtFirst) :
                new ObjectParameter("ShIFtFirst", typeof(int));
    
            var shIFtLastParameter = shIFtLast.HasValue ?
                new ObjectParameter("ShIFtLast", shIFtLast) :
                new ObjectParameter("ShIFtLast", typeof(int));
    
            var shIFtTimeParameter = shIFtTime.HasValue ?
                new ObjectParameter("ShIFtTime", shIFtTime) :
                new ObjectParameter("ShIFtTime", typeof(int));
    
            var shIFtTParameter = shIFtT.HasValue ?
                new ObjectParameter("ShIFtT", shIFtT) :
                new ObjectParameter("ShIFtT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BaoCaoTinhHinhSuDungVePhiDuongBoTuInTheoThang03", checkTimeParameter, fromDateParameter, toDateParameter, shIFtIDParameter, shIFtFirstParameter, shIFtLastParameter, shIFtTimeParameter, shIFtTParameter);
        }
    
        public virtual int sp_BaoCaoTinhHinhSuDungVePhiDuongBoTuInTheoThangBK2(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shIFtID, Nullable<int> shIFtFirst, Nullable<int> shIFtLast, Nullable<int> shIFtTime, Nullable<int> shIFtT)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var shIFtIDParameter = shIFtID.HasValue ?
                new ObjectParameter("ShIFtID", shIFtID) :
                new ObjectParameter("ShIFtID", typeof(int));
    
            var shIFtFirstParameter = shIFtFirst.HasValue ?
                new ObjectParameter("ShIFtFirst", shIFtFirst) :
                new ObjectParameter("ShIFtFirst", typeof(int));
    
            var shIFtLastParameter = shIFtLast.HasValue ?
                new ObjectParameter("ShIFtLast", shIFtLast) :
                new ObjectParameter("ShIFtLast", typeof(int));
    
            var shIFtTimeParameter = shIFtTime.HasValue ?
                new ObjectParameter("ShIFtTime", shIFtTime) :
                new ObjectParameter("ShIFtTime", typeof(int));
    
            var shIFtTParameter = shIFtT.HasValue ?
                new ObjectParameter("ShIFtT", shIFtT) :
                new ObjectParameter("ShIFtT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BaoCaoTinhHinhSuDungVePhiDuongBoTuInTheoThangBK2", checkTimeParameter, fromDateParameter, toDateParameter, shIFtIDParameter, shIFtFirstParameter, shIFtLastParameter, shIFtTimeParameter, shIFtTParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> sp_CheckLogin(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("sp_CheckLogin", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> sp_CheckUsername(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("sp_CheckUsername", usernameParameter);
        }
    
        public virtual ObjectResult<sp_CMO_DASHBOARD_Result> sp_CMO_DASHBOARD(Nullable<int> stationID)
        {
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CMO_DASHBOARD_Result>("sp_CMO_DASHBOARD", stationIDParameter);
        }
    
        public virtual ObjectResult<sp_CMO_TrafficReport_ExitLane_Result> sp_CMO_TrafficReport_ExitLane(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> station, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CMO_TrafficReport_ExitLane_Result>("sp_CMO_TrafficReport_ExitLane", checkTimeParameter, fromDateParameter, toDateParameter, stationParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_GET_ALL_DEVICE_Result> sp_GET_ALL_DEVICE(string stationcode, string lanecode)
        {
            var stationcodeParameter = stationcode != null ?
                new ObjectParameter("stationcode", stationcode) :
                new ObjectParameter("stationcode", typeof(string));
    
            var lanecodeParameter = lanecode != null ?
                new ObjectParameter("lanecode", lanecode) :
                new ObjectParameter("lanecode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GET_ALL_DEVICE_Result>("sp_GET_ALL_DEVICE", stationcodeParameter, lanecodeParameter);
        }
    
        public virtual ObjectResult<sp_GetInfoLogin_Result> sp_GetInfoLogin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetInfoLogin_Result>("sp_GetInfoLogin");
        }
    
        public virtual ObjectResult<sp_GetInLane_Result> sp_GetInLane()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetInLane_Result>("sp_GetInLane");
        }
    
        public virtual ObjectResult<sp_GetOutLane_Result> sp_GetOutLane()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetOutLane_Result>("sp_GetOutLane");
        }
    
        public virtual ObjectResult<sp_GetOverloadWeightByWIMID_Result> sp_GetOverloadWeightByWIMID(string wIMID)
        {
            var wIMIDParameter = wIMID != null ?
                new ObjectParameter("WIMID", wIMID) :
                new ObjectParameter("WIMID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetOverloadWeightByWIMID_Result>("sp_GetOverloadWeightByWIMID", wIMIDParameter);
        }
    
        public virtual ObjectResult<sp_GetShiftID_ProductQuantityGood_Result> sp_GetShiftID_ProductQuantityGood(Nullable<System.TimeSpan> timeNow)
        {
            var timeNowParameter = timeNow.HasValue ?
                new ObjectParameter("TimeNow", timeNow) :
                new ObjectParameter("TimeNow", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetShiftID_ProductQuantityGood_Result>("sp_GetShiftID_ProductQuantityGood", timeNowParameter);
        }
    
        public virtual ObjectResult<string> sp_GetTransactionBySmartCardID(string cardID)
        {
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetTransactionBySmartCardID", cardIDParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_IN_CheckBtc_AddNew(string transactionID, string ticketID, Nullable<System.DateTime> checkDate, Nullable<int> vehicleTypeID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, string imageID, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, Nullable<System.Guid> dynamicWeightID, string note)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var ticketIDParameter = ticketID != null ?
                new ObjectParameter("TicketID", ticketID) :
                new ObjectParameter("TicketID", typeof(string));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var dynamicWeightIDParameter = dynamicWeightID.HasValue ?
                new ObjectParameter("DynamicWeightID", dynamicWeightID) :
                new ObjectParameter("DynamicWeightID", typeof(System.Guid));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_IN_CheckBtc_AddNew", transactionIDParameter, ticketIDParameter, checkDateParameter, vehicleTypeIDParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, imageIDParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, dynamicWeightIDParameter, noteParameter);
        }
    
        public virtual int sp_IN_CheckBtc_UpdateTransactionStatus(Nullable<System.Guid> inCheckID, Nullable<short> transactionStatus)
        {
            var inCheckIDParameter = inCheckID.HasValue ?
                new ObjectParameter("InCheckID", inCheckID) :
                new ObjectParameter("InCheckID", typeof(System.Guid));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_IN_CheckBtc_UpdateTransactionStatus", inCheckIDParameter, transactionStatusParameter);
        }
    
        public virtual int sp_In_CheckForceOpen_AddNew(Nullable<System.Guid> inCheckForceOpenID, string transactionID, string ticketID, Nullable<System.DateTime> checkDate, Nullable<short> forceOpenType, Nullable<int> vehicleTypeID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, string imageID, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, Nullable<System.Guid> wIMID, string note, Nullable<bool> isVehicleInfoManual)
        {
            var inCheckForceOpenIDParameter = inCheckForceOpenID.HasValue ?
                new ObjectParameter("InCheckForceOpenID", inCheckForceOpenID) :
                new ObjectParameter("InCheckForceOpenID", typeof(System.Guid));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var ticketIDParameter = ticketID != null ?
                new ObjectParameter("TicketID", ticketID) :
                new ObjectParameter("TicketID", typeof(string));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var forceOpenTypeParameter = forceOpenType.HasValue ?
                new ObjectParameter("ForceOpenType", forceOpenType) :
                new ObjectParameter("ForceOpenType", typeof(short));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var wIMIDParameter = wIMID.HasValue ?
                new ObjectParameter("WIMID", wIMID) :
                new ObjectParameter("WIMID", typeof(System.Guid));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var isVehicleInfoManualParameter = isVehicleInfoManual.HasValue ?
                new ObjectParameter("IsVehicleInfoManual", isVehicleInfoManual) :
                new ObjectParameter("IsVehicleInfoManual", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_In_CheckForceOpen_AddNew", inCheckForceOpenIDParameter, transactionIDParameter, ticketIDParameter, checkDateParameter, forceOpenTypeParameter, vehicleTypeIDParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, imageIDParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, wIMIDParameter, noteParameter, isVehicleInfoManualParameter);
        }
    
        public virtual int sp_In_CheckForceOpen_Update(Nullable<System.Guid> inCheckForceOpenID, Nullable<System.DateTime> checkDate, Nullable<System.Guid> dynamicWeightID, Nullable<int> employeeID, Nullable<int> errorID, Nullable<short> forceOpenType, string imageID, Nullable<int> laneID, string note, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, string recogPlateNumber, Nullable<short> recogResultType, Nullable<int> shiftID, Nullable<int> stationID, Nullable<short> supervisionStatus, string ticketID, string transactionID, Nullable<short> transactionStatus, Nullable<int> vehicleTypeID)
        {
            var inCheckForceOpenIDParameter = inCheckForceOpenID.HasValue ?
                new ObjectParameter("InCheckForceOpenID", inCheckForceOpenID) :
                new ObjectParameter("InCheckForceOpenID", typeof(System.Guid));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var dynamicWeightIDParameter = dynamicWeightID.HasValue ?
                new ObjectParameter("DynamicWeightID", dynamicWeightID) :
                new ObjectParameter("DynamicWeightID", typeof(System.Guid));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var forceOpenTypeParameter = forceOpenType.HasValue ?
                new ObjectParameter("ForceOpenType", forceOpenType) :
                new ObjectParameter("ForceOpenType", typeof(short));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var ticketIDParameter = ticketID != null ?
                new ObjectParameter("TicketID", ticketID) :
                new ObjectParameter("TicketID", typeof(string));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_In_CheckForceOpen_Update", inCheckForceOpenIDParameter, checkDateParameter, dynamicWeightIDParameter, employeeIDParameter, errorIDParameter, forceOpenTypeParameter, imageIDParameter, laneIDParameter, noteParameter, precheckStatusParameter, preSupervisionStatusParameter, recogPlateNumberParameter, recogResultTypeParameter, shiftIDParameter, stationIDParameter, supervisionStatusParameter, ticketIDParameter, transactionIDParameter, transactionStatusParameter, vehicleTypeIDParameter);
        }
    
        public virtual int sp_IN_CheckForceOpen_UpdateTransactionStatus(Nullable<System.Guid> inCheckID, Nullable<short> transactionStatus)
        {
            var inCheckIDParameter = inCheckID.HasValue ?
                new ObjectParameter("InCheckID", inCheckID) :
                new ObjectParameter("InCheckID", typeof(System.Guid));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_IN_CheckForceOpen_UpdateTransactionStatus", inCheckIDParameter, transactionStatusParameter);
        }
    
        public virtual int sp_In_CheckForceOpenGroup_AddNew(Nullable<System.Guid> inCheckForceOpenGroupID, string transactionID, string ticketID, Nullable<System.DateTime> checkDate, Nullable<System.DateTime> closeDate, Nullable<short> forceOpenType, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, string note)
        {
            var inCheckForceOpenGroupIDParameter = inCheckForceOpenGroupID.HasValue ?
                new ObjectParameter("InCheckForceOpenGroupID", inCheckForceOpenGroupID) :
                new ObjectParameter("InCheckForceOpenGroupID", typeof(System.Guid));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var ticketIDParameter = ticketID != null ?
                new ObjectParameter("TicketID", ticketID) :
                new ObjectParameter("TicketID", typeof(string));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            var forceOpenTypeParameter = forceOpenType.HasValue ?
                new ObjectParameter("ForceOpenType", forceOpenType) :
                new ObjectParameter("ForceOpenType", typeof(short));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_In_CheckForceOpenGroup_AddNew", inCheckForceOpenGroupIDParameter, transactionIDParameter, ticketIDParameter, checkDateParameter, closeDateParameter, forceOpenTypeParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, noteParameter);
        }
    
        public virtual int sp_In_CheckForceOpenGroup_UpdateCloseDate(string transactionID, Nullable<System.DateTime> closeDate)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_In_CheckForceOpenGroup_UpdateCloseDate", transactionIDParameter, closeDateParameter);
        }
    
        public virtual int sp_In_CheckForceOpenGroupDetail_AddNew(Nullable<System.Guid> inCheckForceOpenGroupDetailID, Nullable<System.Guid> inCheckForceOpenGroupID, string transactionID, Nullable<System.DateTime> checkDate, Nullable<int> vehicleTypeID, string imageID, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, Nullable<System.Guid> wIMID, string note)
        {
            var inCheckForceOpenGroupDetailIDParameter = inCheckForceOpenGroupDetailID.HasValue ?
                new ObjectParameter("InCheckForceOpenGroupDetailID", inCheckForceOpenGroupDetailID) :
                new ObjectParameter("InCheckForceOpenGroupDetailID", typeof(System.Guid));
    
            var inCheckForceOpenGroupIDParameter = inCheckForceOpenGroupID.HasValue ?
                new ObjectParameter("InCheckForceOpenGroupID", inCheckForceOpenGroupID) :
                new ObjectParameter("InCheckForceOpenGroupID", typeof(System.Guid));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var wIMIDParameter = wIMID.HasValue ?
                new ObjectParameter("WIMID", wIMID) :
                new ObjectParameter("WIMID", typeof(System.Guid));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_In_CheckForceOpenGroupDetail_AddNew", inCheckForceOpenGroupDetailIDParameter, inCheckForceOpenGroupIDParameter, transactionIDParameter, checkDateParameter, vehicleTypeIDParameter, imageIDParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, wIMIDParameter, noteParameter);
        }
    
        public virtual int sp_IN_CheckForceOpenGroupDetail_UpdateTransactionStatus(Nullable<System.Guid> inCheckID, Nullable<short> transactionStatus)
        {
            var inCheckIDParameter = inCheckID.HasValue ?
                new ObjectParameter("InCheckID", inCheckID) :
                new ObjectParameter("InCheckID", typeof(System.Guid));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_IN_CheckForceOpenGroupDetail_UpdateTransactionStatus", inCheckIDParameter, transactionStatusParameter);
        }
    
        public virtual int sp_In_CheckObu_AddNew(string transactionID, Nullable<long> obuAccountID, Nullable<System.DateTime> checkDate, Nullable<int> ticketTypeID, Nullable<int> vehicleTypeID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, string imageID, string regisPlateNumber, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, Nullable<System.Guid> dynamicWeightID, string note)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var obuAccountIDParameter = obuAccountID.HasValue ?
                new ObjectParameter("ObuAccountID", obuAccountID) :
                new ObjectParameter("ObuAccountID", typeof(long));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var ticketTypeIDParameter = ticketTypeID.HasValue ?
                new ObjectParameter("TicketTypeID", ticketTypeID) :
                new ObjectParameter("TicketTypeID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("RegisPlateNumber", regisPlateNumber) :
                new ObjectParameter("RegisPlateNumber", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var dynamicWeightIDParameter = dynamicWeightID.HasValue ?
                new ObjectParameter("DynamicWeightID", dynamicWeightID) :
                new ObjectParameter("DynamicWeightID", typeof(System.Guid));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_In_CheckObu_AddNew", transactionIDParameter, obuAccountIDParameter, checkDateParameter, ticketTypeIDParameter, vehicleTypeIDParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, imageIDParameter, regisPlateNumberParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, dynamicWeightIDParameter, noteParameter);
        }
    
        public virtual int sp_IN_CheckObu_UpdateTransactionStatus(Nullable<System.Guid> inCheckID, Nullable<short> transactionStatus)
        {
            var inCheckIDParameter = inCheckID.HasValue ?
                new ObjectParameter("InCheckID", inCheckID) :
                new ObjectParameter("InCheckID", typeof(System.Guid));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_IN_CheckObu_UpdateTransactionStatus", inCheckIDParameter, transactionStatusParameter);
        }
    
        public virtual int sp_In_CheckObuSmartCard_AddNew(string transactionID, Nullable<long> obuTwoPieceID, Nullable<long> smartCardAccountID, Nullable<System.DateTime> checkDate, Nullable<int> ticketTypeID, Nullable<int> vehicleTypeID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, string imageID, string regisPlateNumber, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, Nullable<System.Guid> dynamicWeightID, string note)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var obuTwoPieceIDParameter = obuTwoPieceID.HasValue ?
                new ObjectParameter("ObuTwoPieceID", obuTwoPieceID) :
                new ObjectParameter("ObuTwoPieceID", typeof(long));
    
            var smartCardAccountIDParameter = smartCardAccountID.HasValue ?
                new ObjectParameter("SmartCardAccountID", smartCardAccountID) :
                new ObjectParameter("SmartCardAccountID", typeof(long));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var ticketTypeIDParameter = ticketTypeID.HasValue ?
                new ObjectParameter("TicketTypeID", ticketTypeID) :
                new ObjectParameter("TicketTypeID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("RegisPlateNumber", regisPlateNumber) :
                new ObjectParameter("RegisPlateNumber", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var dynamicWeightIDParameter = dynamicWeightID.HasValue ?
                new ObjectParameter("DynamicWeightID", dynamicWeightID) :
                new ObjectParameter("DynamicWeightID", typeof(System.Guid));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_In_CheckObuSmartCard_AddNew", transactionIDParameter, obuTwoPieceIDParameter, smartCardAccountIDParameter, checkDateParameter, ticketTypeIDParameter, vehicleTypeIDParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, imageIDParameter, regisPlateNumberParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, dynamicWeightIDParameter, noteParameter);
        }
    
        public virtual int sp_In_CheckObuSmartCard_Update(Nullable<System.Guid> inCheckObuSmartCardID, string transactionID, Nullable<long> obuTwoPieceID, Nullable<long> smartCardAccountID, Nullable<System.DateTime> checkDate, Nullable<int> ticketTypeID, Nullable<int> vehicleTypeID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, string imageID, string regisPlateNumber, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, Nullable<System.Guid> dynamicWeightID, string note)
        {
            var inCheckObuSmartCardIDParameter = inCheckObuSmartCardID.HasValue ?
                new ObjectParameter("InCheckObuSmartCardID", inCheckObuSmartCardID) :
                new ObjectParameter("InCheckObuSmartCardID", typeof(System.Guid));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var obuTwoPieceIDParameter = obuTwoPieceID.HasValue ?
                new ObjectParameter("ObuTwoPieceID", obuTwoPieceID) :
                new ObjectParameter("ObuTwoPieceID", typeof(long));
    
            var smartCardAccountIDParameter = smartCardAccountID.HasValue ?
                new ObjectParameter("SmartCardAccountID", smartCardAccountID) :
                new ObjectParameter("SmartCardAccountID", typeof(long));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var ticketTypeIDParameter = ticketTypeID.HasValue ?
                new ObjectParameter("TicketTypeID", ticketTypeID) :
                new ObjectParameter("TicketTypeID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("RegisPlateNumber", regisPlateNumber) :
                new ObjectParameter("RegisPlateNumber", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var dynamicWeightIDParameter = dynamicWeightID.HasValue ?
                new ObjectParameter("DynamicWeightID", dynamicWeightID) :
                new ObjectParameter("DynamicWeightID", typeof(System.Guid));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_In_CheckObuSmartCard_Update", inCheckObuSmartCardIDParameter, transactionIDParameter, obuTwoPieceIDParameter, smartCardAccountIDParameter, checkDateParameter, ticketTypeIDParameter, vehicleTypeIDParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, imageIDParameter, regisPlateNumberParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, dynamicWeightIDParameter, noteParameter);
        }
    
        public virtual int sp_IN_CheckObuSmartCard_UpdateTransactionStatus(Nullable<System.Guid> inCheckID, Nullable<short> transactionStatus)
        {
            var inCheckIDParameter = inCheckID.HasValue ?
                new ObjectParameter("InCheckID", inCheckID) :
                new ObjectParameter("InCheckID", typeof(System.Guid));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_IN_CheckObuSmartCard_UpdateTransactionStatus", inCheckIDParameter, transactionStatusParameter);
        }
    
        public virtual int sp_In_CheckPeriodObu_AddNew(string transactionID, Nullable<long> periodObuAccountID, Nullable<System.DateTime> checkDate, Nullable<int> ticketTypeID, Nullable<int> vehicleTypeID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, string imageID, string regisPlateNumber, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, Nullable<System.Guid> dynamicWeightID, string note)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var periodObuAccountIDParameter = periodObuAccountID.HasValue ?
                new ObjectParameter("PeriodObuAccountID", periodObuAccountID) :
                new ObjectParameter("PeriodObuAccountID", typeof(long));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var ticketTypeIDParameter = ticketTypeID.HasValue ?
                new ObjectParameter("TicketTypeID", ticketTypeID) :
                new ObjectParameter("TicketTypeID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("RegisPlateNumber", regisPlateNumber) :
                new ObjectParameter("RegisPlateNumber", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var dynamicWeightIDParameter = dynamicWeightID.HasValue ?
                new ObjectParameter("DynamicWeightID", dynamicWeightID) :
                new ObjectParameter("DynamicWeightID", typeof(System.Guid));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_In_CheckPeriodObu_AddNew", transactionIDParameter, periodObuAccountIDParameter, checkDateParameter, ticketTypeIDParameter, vehicleTypeIDParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, imageIDParameter, regisPlateNumberParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, dynamicWeightIDParameter, noteParameter);
        }
    
        public virtual int sp_IN_CheckPeriodObu_UpdateTransactionStatus(Nullable<System.Guid> inCheckID, Nullable<short> transactionStatus)
        {
            var inCheckIDParameter = inCheckID.HasValue ?
                new ObjectParameter("InCheckID", inCheckID) :
                new ObjectParameter("InCheckID", typeof(System.Guid));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_IN_CheckPeriodObu_UpdateTransactionStatus", inCheckIDParameter, transactionStatusParameter);
        }
    
        public virtual int sp_In_CheckPeriodTicket_AddNew(string transactionID, string ticketID, Nullable<System.DateTime> checkDate, Nullable<int> ticketTypeID, Nullable<int> vehicleTypeID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, string imageID, string regisPlateNumber, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, Nullable<System.Guid> dynamicWeightID, string note)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var ticketIDParameter = ticketID != null ?
                new ObjectParameter("TicketID", ticketID) :
                new ObjectParameter("TicketID", typeof(string));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var ticketTypeIDParameter = ticketTypeID.HasValue ?
                new ObjectParameter("TicketTypeID", ticketTypeID) :
                new ObjectParameter("TicketTypeID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("RegisPlateNumber", regisPlateNumber) :
                new ObjectParameter("RegisPlateNumber", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var dynamicWeightIDParameter = dynamicWeightID.HasValue ?
                new ObjectParameter("DynamicWeightID", dynamicWeightID) :
                new ObjectParameter("DynamicWeightID", typeof(System.Guid));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_In_CheckPeriodTicket_AddNew", transactionIDParameter, ticketIDParameter, checkDateParameter, ticketTypeIDParameter, vehicleTypeIDParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, imageIDParameter, regisPlateNumberParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, dynamicWeightIDParameter, noteParameter);
        }
    
        public virtual int sp_IN_CheckPeriodTicket_UpdateTransactionStatus(Nullable<System.Guid> inCheckID, Nullable<short> transactionStatus)
        {
            var inCheckIDParameter = inCheckID.HasValue ?
                new ObjectParameter("InCheckID", inCheckID) :
                new ObjectParameter("InCheckID", typeof(System.Guid));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_IN_CheckPeriodTicket_UpdateTransactionStatus", inCheckIDParameter, transactionStatusParameter);
        }
    
        public virtual int sp_IN_CheckSmartCard_AddNew(Nullable<System.Guid> inCheckSmartCardID, string transactionID, string smartCardID, Nullable<System.DateTime> checkDate, Nullable<int> ticketTypeID, Nullable<int> vehicleTypeID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, string imageID, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, Nullable<System.Guid> wIMID, string note, Nullable<bool> isVehicleInfoManual)
        {
            var inCheckSmartCardIDParameter = inCheckSmartCardID.HasValue ?
                new ObjectParameter("InCheckSmartCardID", inCheckSmartCardID) :
                new ObjectParameter("InCheckSmartCardID", typeof(System.Guid));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var smartCardIDParameter = smartCardID != null ?
                new ObjectParameter("SmartCardID", smartCardID) :
                new ObjectParameter("SmartCardID", typeof(string));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var ticketTypeIDParameter = ticketTypeID.HasValue ?
                new ObjectParameter("TicketTypeID", ticketTypeID) :
                new ObjectParameter("TicketTypeID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var wIMIDParameter = wIMID.HasValue ?
                new ObjectParameter("WIMID", wIMID) :
                new ObjectParameter("WIMID", typeof(System.Guid));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var isVehicleInfoManualParameter = isVehicleInfoManual.HasValue ?
                new ObjectParameter("IsVehicleInfoManual", isVehicleInfoManual) :
                new ObjectParameter("IsVehicleInfoManual", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_IN_CheckSmartCard_AddNew", inCheckSmartCardIDParameter, transactionIDParameter, smartCardIDParameter, checkDateParameter, ticketTypeIDParameter, vehicleTypeIDParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, imageIDParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, wIMIDParameter, noteParameter, isVehicleInfoManualParameter);
        }
    
        public virtual int sp_In_CheckSmartCard_Delete(Nullable<System.Guid> inCheckSmartCardID)
        {
            var inCheckSmartCardIDParameter = inCheckSmartCardID.HasValue ?
                new ObjectParameter("InCheckSmartCardID", inCheckSmartCardID) :
                new ObjectParameter("InCheckSmartCardID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_In_CheckSmartCard_Delete", inCheckSmartCardIDParameter);
        }
    
        public virtual ObjectResult<sp_IN_CheckSmartCard_ExistsCheck_Result> sp_IN_CheckSmartCard_ExistsCheck(string smartCardID, Nullable<int> stationID, Nullable<System.DateTime> checkDate)
        {
            var smartCardIDParameter = smartCardID != null ?
                new ObjectParameter("SmartCardID", smartCardID) :
                new ObjectParameter("SmartCardID", typeof(string));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_IN_CheckSmartCard_ExistsCheck_Result>("sp_IN_CheckSmartCard_ExistsCheck", smartCardIDParameter, stationIDParameter, checkDateParameter);
        }
    
        public virtual ObjectResult<sp_IN_CheckSmartCard_GetByCardID_Result> sp_IN_CheckSmartCard_GetByCardID(string cardID)
        {
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_IN_CheckSmartCard_GetByCardID_Result>("sp_IN_CheckSmartCard_GetByCardID", cardIDParameter);
        }
    
        public virtual ObjectResult<sp_IN_CheckSmartCard_GetByCardIDAndSortTransactionID_Result> sp_IN_CheckSmartCard_GetByCardIDAndSortTransactionID(string cardID, string transactionID)
        {
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_IN_CheckSmartCard_GetByCardIDAndSortTransactionID_Result>("sp_IN_CheckSmartCard_GetByCardIDAndSortTransactionID", cardIDParameter, transactionIDParameter);
        }
    
        public virtual ObjectResult<sp_IN_CheckSmartCard_GetByCardIDAndTransactionID_Result> sp_IN_CheckSmartCard_GetByCardIDAndTransactionID(string cardID, string transactionID)
        {
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_IN_CheckSmartCard_GetByCardIDAndTransactionID_Result>("sp_IN_CheckSmartCard_GetByCardIDAndTransactionID", cardIDParameter, transactionIDParameter);
        }
    
        public virtual ObjectResult<sp_IN_CheckSmartCard_GetByVehiclePlate_Result> sp_IN_CheckSmartCard_GetByVehiclePlate(string vehiclePlate)
        {
            var vehiclePlateParameter = vehiclePlate != null ?
                new ObjectParameter("VehiclePlate", vehiclePlate) :
                new ObjectParameter("VehiclePlate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_IN_CheckSmartCard_GetByVehiclePlate_Result>("sp_IN_CheckSmartCard_GetByVehiclePlate", vehiclePlateParameter);
        }
    
        public virtual int sp_In_CheckSmartCard_Update(Nullable<System.Guid> inCheckSmartCardID, string transactionID, string smartCardID, Nullable<System.DateTime> checkDate, Nullable<int> ticketTypeID, Nullable<int> vehicleTypeID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, string imageID, string regisPlateNumber, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, Nullable<System.Guid> dynamicWeightID, string note)
        {
            var inCheckSmartCardIDParameter = inCheckSmartCardID.HasValue ?
                new ObjectParameter("InCheckSmartCardID", inCheckSmartCardID) :
                new ObjectParameter("InCheckSmartCardID", typeof(System.Guid));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var smartCardIDParameter = smartCardID != null ?
                new ObjectParameter("SmartCardID", smartCardID) :
                new ObjectParameter("SmartCardID", typeof(string));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var ticketTypeIDParameter = ticketTypeID.HasValue ?
                new ObjectParameter("TicketTypeID", ticketTypeID) :
                new ObjectParameter("TicketTypeID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("RegisPlateNumber", regisPlateNumber) :
                new ObjectParameter("RegisPlateNumber", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var dynamicWeightIDParameter = dynamicWeightID.HasValue ?
                new ObjectParameter("DynamicWeightID", dynamicWeightID) :
                new ObjectParameter("DynamicWeightID", typeof(System.Guid));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_In_CheckSmartCard_Update", inCheckSmartCardIDParameter, transactionIDParameter, smartCardIDParameter, checkDateParameter, ticketTypeIDParameter, vehicleTypeIDParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, imageIDParameter, regisPlateNumberParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, dynamicWeightIDParameter, noteParameter);
        }
    
        public virtual int sp_IN_CheckSmartCard_UpdateTransactionStatus(Nullable<System.Guid> inCheckID, Nullable<short> transactionStatus)
        {
            var inCheckIDParameter = inCheckID.HasValue ?
                new ObjectParameter("InCheckID", inCheckID) :
                new ObjectParameter("InCheckID", typeof(System.Guid));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_IN_CheckSmartCard_UpdateTransactionStatus", inCheckIDParameter, transactionStatusParameter);
        }
    
        public virtual int sp_In_CheckTicket_AddNew(string transactionID, string ticketID, Nullable<System.DateTime> checkDate, Nullable<int> ticketTypeID, Nullable<int> vehicleTypeID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, string imageID, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, Nullable<System.Guid> dynamicWeightID, string note)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var ticketIDParameter = ticketID != null ?
                new ObjectParameter("TicketID", ticketID) :
                new ObjectParameter("TicketID", typeof(string));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var ticketTypeIDParameter = ticketTypeID.HasValue ?
                new ObjectParameter("TicketTypeID", ticketTypeID) :
                new ObjectParameter("TicketTypeID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var dynamicWeightIDParameter = dynamicWeightID.HasValue ?
                new ObjectParameter("DynamicWeightID", dynamicWeightID) :
                new ObjectParameter("DynamicWeightID", typeof(System.Guid));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_In_CheckTicket_AddNew", transactionIDParameter, ticketIDParameter, checkDateParameter, ticketTypeIDParameter, vehicleTypeIDParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, imageIDParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, dynamicWeightIDParameter, noteParameter);
        }
    
        public virtual int sp_IN_CheckTicket_UpdateTransactionStatus(Nullable<System.Guid> inCheckID, Nullable<short> transactionStatus)
        {
            var inCheckIDParameter = inCheckID.HasValue ?
                new ObjectParameter("InCheckID", inCheckID) :
                new ObjectParameter("InCheckID", typeof(System.Guid));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_IN_CheckTicket_UpdateTransactionStatus", inCheckIDParameter, transactionStatusParameter);
        }
    
        public virtual int sp_Insert_TCS_L_STATUS(string lane_code, string lane_Status, string note)
        {
            var lane_codeParameter = lane_code != null ?
                new ObjectParameter("lane_code", lane_code) :
                new ObjectParameter("lane_code", typeof(string));
    
            var lane_StatusParameter = lane_Status != null ?
                new ObjectParameter("Lane_Status", lane_Status) :
                new ObjectParameter("Lane_Status", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_TCS_L_STATUS", lane_codeParameter, lane_StatusParameter, noteParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_LS_AxleType_GetIDByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_LS_AxleType_GetIDByName", nameParameter);
        }
    
        public virtual ObjectResult<sp_LS_Employee_GetAll_Result> sp_LS_Employee_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_Employee_GetAll_Result>("sp_LS_Employee_GetAll");
        }
    
        public virtual ObjectResult<string> sp_LS_Employee_GetName_ByID(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_LS_Employee_GetName_ByID", employeeIDParameter);
        }
    
        public virtual ObjectResult<sp_LS_Employee_GetUserNameAndPassBySmartCardID_Result> sp_LS_Employee_GetUserNameAndPassBySmartCardID(string smartCardID)
        {
            var smartCardIDParameter = smartCardID != null ?
                new ObjectParameter("SmartCardID", smartCardID) :
                new ObjectParameter("SmartCardID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_Employee_GetUserNameAndPassBySmartCardID_Result>("sp_LS_Employee_GetUserNameAndPassBySmartCardID", smartCardIDParameter);
        }
    
        public virtual ObjectResult<sp_LS_Empoyee_GetUserNameAndPassBySmartCardID_Result> sp_LS_Empoyee_GetUserNameAndPassBySmartCardID(string smartCardID)
        {
            var smartCardIDParameter = smartCardID != null ?
                new ObjectParameter("SmartCardID", smartCardID) :
                new ObjectParameter("SmartCardID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_Empoyee_GetUserNameAndPassBySmartCardID_Result>("sp_LS_Empoyee_GetUserNameAndPassBySmartCardID", smartCardIDParameter);
        }
    
        public virtual ObjectResult<sp_LS_Lane_Devices_GetInformation_Result> sp_LS_Lane_Devices_GetInformation(string lane_code)
        {
            var lane_codeParameter = lane_code != null ?
                new ObjectParameter("lane_code", lane_code) :
                new ObjectParameter("lane_code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_Lane_Devices_GetInformation_Result>("sp_LS_Lane_Devices_GetInformation", lane_codeParameter);
        }
    
        public virtual ObjectResult<sp_LS_Lane_GetAll_Result> sp_LS_Lane_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_Lane_GetAll_Result>("sp_LS_Lane_GetAll");
        }
    
        public virtual ObjectResult<sp_LS_Lane_GetByStationID_Result> sp_LS_Lane_GetByStationID(Nullable<int> stationID)
        {
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_Lane_GetByStationID_Result>("sp_LS_Lane_GetByStationID", stationIDParameter);
        }
    
        public virtual ObjectResult<string> sp_LS_Lane_GetCode_ByID(Nullable<int> laneID)
        {
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_LS_Lane_GetCode_ByID", laneIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_LS_Lane_GetID_ByCode(string laneCode)
        {
            var laneCodeParameter = laneCode != null ?
                new ObjectParameter("LaneCode", laneCode) :
                new ObjectParameter("LaneCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_LS_Lane_GetID_ByCode", laneCodeParameter);
        }
    
        public virtual ObjectResult<string> sp_LS_Lane_GetName_ByID(Nullable<int> laneID)
        {
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_LS_Lane_GetName_ByID", laneIDParameter);
        }
    
        public virtual ObjectResult<sp_LS_Lane_Station_GetInformation_Result> sp_LS_Lane_Station_GetInformation(string id_Station)
        {
            var id_StationParameter = id_Station != null ?
                new ObjectParameter("id_Station", id_Station) :
                new ObjectParameter("id_Station", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_Lane_Station_GetInformation_Result>("sp_LS_Lane_Station_GetInformation", id_StationParameter);
        }
    
        public virtual ObjectResult<sp_LS_Route_GetName_ByID_Result> sp_LS_Route_GetName_ByID(Nullable<int> routeID)
        {
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_Route_GetName_ByID_Result>("sp_LS_Route_GetName_ByID", routeIDParameter);
        }
    
        public virtual ObjectResult<sp_LS_Route_GetRouteID_ByFromToStation_Result> sp_LS_Route_GetRouteID_ByFromToStation(Nullable<int> formStationID, Nullable<int> toStationID)
        {
            var formStationIDParameter = formStationID.HasValue ?
                new ObjectParameter("FormStationID", formStationID) :
                new ObjectParameter("FormStationID", typeof(int));
    
            var toStationIDParameter = toStationID.HasValue ?
                new ObjectParameter("ToStationID", toStationID) :
                new ObjectParameter("ToStationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_Route_GetRouteID_ByFromToStation_Result>("sp_LS_Route_GetRouteID_ByFromToStation", formStationIDParameter, toStationIDParameter);
        }
    
        public virtual ObjectResult<sp_LS_Shift_GetAll_Result> sp_LS_Shift_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_Shift_GetAll_Result>("sp_LS_Shift_GetAll");
        }
    
        public virtual ObjectResult<sp_LS_Shift_GetByID_Result> sp_LS_Shift_GetByID(Nullable<int> shifID)
        {
            var shifIDParameter = shifID.HasValue ?
                new ObjectParameter("ShifID", shifID) :
                new ObjectParameter("ShifID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_Shift_GetByID_Result>("sp_LS_Shift_GetByID", shifIDParameter);
        }
    
        public virtual ObjectResult<string> sp_LS_Shift_GetCode_ByID(Nullable<int> shiftID)
        {
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_LS_Shift_GetCode_ByID", shiftIDParameter);
        }
    
        public virtual ObjectResult<sp_LS_Station_GetAll_Result> sp_LS_Station_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_Station_GetAll_Result>("sp_LS_Station_GetAll");
        }
    
        public virtual ObjectResult<string> sp_LS_Station_GetCode_ByID(Nullable<int> stationID)
        {
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_LS_Station_GetCode_ByID", stationIDParameter);
        }
    
        public virtual ObjectResult<string> sp_LS_Station_GetName_ByID(Nullable<int> stationID)
        {
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_LS_Station_GetName_ByID", stationIDParameter);
        }
    
        public virtual ObjectResult<sp_LS_VehicleType_GetAll_Result> sp_LS_VehicleType_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_VehicleType_GetAll_Result>("sp_LS_VehicleType_GetAll");
        }
    
        public virtual ObjectResult<sp_LS_VehicleType_GetAmountPerKm_Result> sp_LS_VehicleType_GetAmountPerKm()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LS_VehicleType_GetAmountPerKm_Result>("sp_LS_VehicleType_GetAmountPerKm");
        }
    
        public virtual ObjectResult<string> sp_LS_VehicleType_GetNameByID(Nullable<int> vehicleTypeID)
        {
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_LS_VehicleType_GetNameByID", vehicleTypeIDParameter);
        }
    
        public virtual ObjectResult<sp_OUT_CalculateFee_Result> sp_OUT_CalculateFee(Nullable<int> fromStationID, Nullable<int> toStationID, Nullable<int> ticketCategoryID, Nullable<int> vehicleTypeID, Nullable<bool> isMissingCard)
        {
            var fromStationIDParameter = fromStationID.HasValue ?
                new ObjectParameter("FromStationID", fromStationID) :
                new ObjectParameter("FromStationID", typeof(int));
    
            var toStationIDParameter = toStationID.HasValue ?
                new ObjectParameter("ToStationID", toStationID) :
                new ObjectParameter("ToStationID", typeof(int));
    
            var ticketCategoryIDParameter = ticketCategoryID.HasValue ?
                new ObjectParameter("TicketCategoryID", ticketCategoryID) :
                new ObjectParameter("TicketCategoryID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var isMissingCardParameter = isMissingCard.HasValue ?
                new ObjectParameter("IsMissingCard", isMissingCard) :
                new ObjectParameter("IsMissingCard", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_OUT_CalculateFee_Result>("sp_OUT_CalculateFee", fromStationIDParameter, toStationIDParameter, ticketCategoryIDParameter, vehicleTypeIDParameter, isMissingCardParameter);
        }
    
        public virtual int sp_Out_CheckBtc_AddNew(string transactionID, string ticketID, Nullable<System.Guid> inCheckBtcID, Nullable<System.Guid> inCheckBtcIDManual, Nullable<System.DateTime> checkDate, Nullable<int> vehicleTypeID, Nullable<int> routeID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, string imageID, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, string note)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var ticketIDParameter = ticketID != null ?
                new ObjectParameter("TicketID", ticketID) :
                new ObjectParameter("TicketID", typeof(string));
    
            var inCheckBtcIDParameter = inCheckBtcID.HasValue ?
                new ObjectParameter("InCheckBtcID", inCheckBtcID) :
                new ObjectParameter("InCheckBtcID", typeof(System.Guid));
    
            var inCheckBtcIDManualParameter = inCheckBtcIDManual.HasValue ?
                new ObjectParameter("InCheckBtcIDManual", inCheckBtcIDManual) :
                new ObjectParameter("InCheckBtcIDManual", typeof(System.Guid));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Out_CheckBtc_AddNew", transactionIDParameter, ticketIDParameter, inCheckBtcIDParameter, inCheckBtcIDManualParameter, checkDateParameter, vehicleTypeIDParameter, routeIDParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, imageIDParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, noteParameter);
        }
    
        public virtual int sp_Out_CheckForceOpen_AddNew(string transactionID, string ticketID, Nullable<System.Guid> inCheckForceOpenID, Nullable<System.Guid> inCheckForceOpenIDManual, Nullable<System.DateTime> checkDate, Nullable<short> forceOpenType, Nullable<int> vehicleTypeID, Nullable<int> routeID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, string imageID, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, string note)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var ticketIDParameter = ticketID != null ?
                new ObjectParameter("TicketID", ticketID) :
                new ObjectParameter("TicketID", typeof(string));
    
            var inCheckForceOpenIDParameter = inCheckForceOpenID.HasValue ?
                new ObjectParameter("InCheckForceOpenID", inCheckForceOpenID) :
                new ObjectParameter("InCheckForceOpenID", typeof(System.Guid));
    
            var inCheckForceOpenIDManualParameter = inCheckForceOpenIDManual.HasValue ?
                new ObjectParameter("InCheckForceOpenIDManual", inCheckForceOpenIDManual) :
                new ObjectParameter("InCheckForceOpenIDManual", typeof(System.Guid));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var forceOpenTypeParameter = forceOpenType.HasValue ?
                new ObjectParameter("ForceOpenType", forceOpenType) :
                new ObjectParameter("ForceOpenType", typeof(short));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Out_CheckForceOpen_AddNew", transactionIDParameter, ticketIDParameter, inCheckForceOpenIDParameter, inCheckForceOpenIDManualParameter, checkDateParameter, forceOpenTypeParameter, vehicleTypeIDParameter, routeIDParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, imageIDParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, noteParameter);
        }
    
        public virtual int sp_Out_CheckForceOpenGroup_AddNew(Nullable<System.Guid> outCheckForceOpenGroupID, string transactionID, string ticketID, Nullable<System.Guid> inCheckForceOpenGroupID, Nullable<System.Guid> inCheckForceOpenGroupIDManual, Nullable<System.DateTime> checkDate, Nullable<System.DateTime> closeDate, Nullable<short> forceOpenType, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, Nullable<int> routeID, string note)
        {
            var outCheckForceOpenGroupIDParameter = outCheckForceOpenGroupID.HasValue ?
                new ObjectParameter("OutCheckForceOpenGroupID", outCheckForceOpenGroupID) :
                new ObjectParameter("OutCheckForceOpenGroupID", typeof(System.Guid));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var ticketIDParameter = ticketID != null ?
                new ObjectParameter("TicketID", ticketID) :
                new ObjectParameter("TicketID", typeof(string));
    
            var inCheckForceOpenGroupIDParameter = inCheckForceOpenGroupID.HasValue ?
                new ObjectParameter("InCheckForceOpenGroupID", inCheckForceOpenGroupID) :
                new ObjectParameter("InCheckForceOpenGroupID", typeof(System.Guid));
    
            var inCheckForceOpenGroupIDManualParameter = inCheckForceOpenGroupIDManual.HasValue ?
                new ObjectParameter("InCheckForceOpenGroupIDManual", inCheckForceOpenGroupIDManual) :
                new ObjectParameter("InCheckForceOpenGroupIDManual", typeof(System.Guid));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            var forceOpenTypeParameter = forceOpenType.HasValue ?
                new ObjectParameter("ForceOpenType", forceOpenType) :
                new ObjectParameter("ForceOpenType", typeof(short));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Out_CheckForceOpenGroup_AddNew", outCheckForceOpenGroupIDParameter, transactionIDParameter, ticketIDParameter, inCheckForceOpenGroupIDParameter, inCheckForceOpenGroupIDManualParameter, checkDateParameter, closeDateParameter, forceOpenTypeParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, routeIDParameter, noteParameter);
        }
    
        public virtual int sp_Out_CheckForceOpenGroup_UpdateCloseDate(string transactionID, Nullable<System.DateTime> closeDate)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Out_CheckForceOpenGroup_UpdateCloseDate", transactionIDParameter, closeDateParameter);
        }
    
        public virtual int sp_Out_CheckForceOpenGroupDetail_AddNew(Nullable<System.Guid> outCheckForceOpenGroupDetailID, Nullable<System.Guid> outCheckForceOpenGroupID, Nullable<System.DateTime> checkDate, Nullable<int> vehicleTypeID, Nullable<int> routeID, string imageID, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, string note)
        {
            var outCheckForceOpenGroupDetailIDParameter = outCheckForceOpenGroupDetailID.HasValue ?
                new ObjectParameter("OutCheckForceOpenGroupDetailID", outCheckForceOpenGroupDetailID) :
                new ObjectParameter("OutCheckForceOpenGroupDetailID", typeof(System.Guid));
    
            var outCheckForceOpenGroupIDParameter = outCheckForceOpenGroupID.HasValue ?
                new ObjectParameter("OutCheckForceOpenGroupID", outCheckForceOpenGroupID) :
                new ObjectParameter("OutCheckForceOpenGroupID", typeof(System.Guid));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Out_CheckForceOpenGroupDetail_AddNew", outCheckForceOpenGroupDetailIDParameter, outCheckForceOpenGroupIDParameter, checkDateParameter, vehicleTypeIDParameter, routeIDParameter, imageIDParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, noteParameter);
        }
    
        public virtual int sp_Out_CheckObu_AddNew(string transactionID, Nullable<long> obuAccountID, Nullable<System.Guid> inCheckObuID, Nullable<System.Guid> inCheckObuIDManual, Nullable<System.DateTime> checkDate, Nullable<int> beginBalance, Nullable<int> chargeAmount, Nullable<int> balance, Nullable<int> ticketTypeID, Nullable<int> vehicleTypeID, Nullable<int> routeID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, string imageID, string regisPlateNumber, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, string note)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var obuAccountIDParameter = obuAccountID.HasValue ?
                new ObjectParameter("ObuAccountID", obuAccountID) :
                new ObjectParameter("ObuAccountID", typeof(long));
    
            var inCheckObuIDParameter = inCheckObuID.HasValue ?
                new ObjectParameter("InCheckObuID", inCheckObuID) :
                new ObjectParameter("InCheckObuID", typeof(System.Guid));
    
            var inCheckObuIDManualParameter = inCheckObuIDManual.HasValue ?
                new ObjectParameter("InCheckObuIDManual", inCheckObuIDManual) :
                new ObjectParameter("InCheckObuIDManual", typeof(System.Guid));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var beginBalanceParameter = beginBalance.HasValue ?
                new ObjectParameter("BeginBalance", beginBalance) :
                new ObjectParameter("BeginBalance", typeof(int));
    
            var chargeAmountParameter = chargeAmount.HasValue ?
                new ObjectParameter("ChargeAmount", chargeAmount) :
                new ObjectParameter("ChargeAmount", typeof(int));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(int));
    
            var ticketTypeIDParameter = ticketTypeID.HasValue ?
                new ObjectParameter("TicketTypeID", ticketTypeID) :
                new ObjectParameter("TicketTypeID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("RegisPlateNumber", regisPlateNumber) :
                new ObjectParameter("RegisPlateNumber", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Out_CheckObu_AddNew", transactionIDParameter, obuAccountIDParameter, inCheckObuIDParameter, inCheckObuIDManualParameter, checkDateParameter, beginBalanceParameter, chargeAmountParameter, balanceParameter, ticketTypeIDParameter, vehicleTypeIDParameter, routeIDParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, imageIDParameter, regisPlateNumberParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, noteParameter);
        }
    
        public virtual int sp_OUT_CheckObuSmartCard_AddNew(string transactionID, Nullable<System.Guid> obuTwoPieceID, Nullable<System.Guid> smartCardAccountID, Nullable<System.Guid> inCheckObuSmartCardID, Nullable<System.Guid> inCheckObuSmartCardIDManual, Nullable<System.DateTime> checkDate, Nullable<int> beginBalance, Nullable<int> chargeAmount, Nullable<int> balance, Nullable<int> ticketTypeID, Nullable<int> vehicleTypeID, Nullable<int> routeID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, string imageID, string regisPlateNumber, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, string note)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var obuTwoPieceIDParameter = obuTwoPieceID.HasValue ?
                new ObjectParameter("ObuTwoPieceID", obuTwoPieceID) :
                new ObjectParameter("ObuTwoPieceID", typeof(System.Guid));
    
            var smartCardAccountIDParameter = smartCardAccountID.HasValue ?
                new ObjectParameter("SmartCardAccountID", smartCardAccountID) :
                new ObjectParameter("SmartCardAccountID", typeof(System.Guid));
    
            var inCheckObuSmartCardIDParameter = inCheckObuSmartCardID.HasValue ?
                new ObjectParameter("InCheckObuSmartCardID", inCheckObuSmartCardID) :
                new ObjectParameter("InCheckObuSmartCardID", typeof(System.Guid));
    
            var inCheckObuSmartCardIDManualParameter = inCheckObuSmartCardIDManual.HasValue ?
                new ObjectParameter("InCheckObuSmartCardIDManual", inCheckObuSmartCardIDManual) :
                new ObjectParameter("InCheckObuSmartCardIDManual", typeof(System.Guid));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var beginBalanceParameter = beginBalance.HasValue ?
                new ObjectParameter("BeginBalance", beginBalance) :
                new ObjectParameter("BeginBalance", typeof(int));
    
            var chargeAmountParameter = chargeAmount.HasValue ?
                new ObjectParameter("ChargeAmount", chargeAmount) :
                new ObjectParameter("ChargeAmount", typeof(int));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(int));
    
            var ticketTypeIDParameter = ticketTypeID.HasValue ?
                new ObjectParameter("TicketTypeID", ticketTypeID) :
                new ObjectParameter("TicketTypeID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("RegisPlateNumber", regisPlateNumber) :
                new ObjectParameter("RegisPlateNumber", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_OUT_CheckObuSmartCard_AddNew", transactionIDParameter, obuTwoPieceIDParameter, smartCardAccountIDParameter, inCheckObuSmartCardIDParameter, inCheckObuSmartCardIDManualParameter, checkDateParameter, beginBalanceParameter, chargeAmountParameter, balanceParameter, ticketTypeIDParameter, vehicleTypeIDParameter, routeIDParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, imageIDParameter, regisPlateNumberParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, noteParameter);
        }
    
        public virtual int sp_OUT_CheckObuSmartCard_Delete(Nullable<System.Guid> outCheckObuSmartCardID)
        {
            var outCheckObuSmartCardIDParameter = outCheckObuSmartCardID.HasValue ?
                new ObjectParameter("OutCheckObuSmartCardID", outCheckObuSmartCardID) :
                new ObjectParameter("OutCheckObuSmartCardID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_OUT_CheckObuSmartCard_Delete", outCheckObuSmartCardIDParameter);
        }
    
        public virtual int sp_OUT_CheckObuSmartCard_Update(Nullable<System.Guid> outCheckObuSmartCardID, string transactionID, Nullable<System.Guid> obuTwoPieceID, Nullable<System.Guid> smartCardAccountID, Nullable<System.Guid> inCheckObuSmartCardID, Nullable<System.Guid> inCheckObuSmartCardIDManual, Nullable<System.DateTime> checkDate, Nullable<int> beginBalance, Nullable<int> chargeAmount, Nullable<int> balance, Nullable<int> ticketTypeID, Nullable<int> vehicleTypeID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, string imageID, string regisPlateNumber, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, string note)
        {
            var outCheckObuSmartCardIDParameter = outCheckObuSmartCardID.HasValue ?
                new ObjectParameter("OutCheckObuSmartCardID", outCheckObuSmartCardID) :
                new ObjectParameter("OutCheckObuSmartCardID", typeof(System.Guid));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var obuTwoPieceIDParameter = obuTwoPieceID.HasValue ?
                new ObjectParameter("ObuTwoPieceID", obuTwoPieceID) :
                new ObjectParameter("ObuTwoPieceID", typeof(System.Guid));
    
            var smartCardAccountIDParameter = smartCardAccountID.HasValue ?
                new ObjectParameter("SmartCardAccountID", smartCardAccountID) :
                new ObjectParameter("SmartCardAccountID", typeof(System.Guid));
    
            var inCheckObuSmartCardIDParameter = inCheckObuSmartCardID.HasValue ?
                new ObjectParameter("InCheckObuSmartCardID", inCheckObuSmartCardID) :
                new ObjectParameter("InCheckObuSmartCardID", typeof(System.Guid));
    
            var inCheckObuSmartCardIDManualParameter = inCheckObuSmartCardIDManual.HasValue ?
                new ObjectParameter("InCheckObuSmartCardIDManual", inCheckObuSmartCardIDManual) :
                new ObjectParameter("InCheckObuSmartCardIDManual", typeof(System.Guid));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var beginBalanceParameter = beginBalance.HasValue ?
                new ObjectParameter("BeginBalance", beginBalance) :
                new ObjectParameter("BeginBalance", typeof(int));
    
            var chargeAmountParameter = chargeAmount.HasValue ?
                new ObjectParameter("ChargeAmount", chargeAmount) :
                new ObjectParameter("ChargeAmount", typeof(int));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(int));
    
            var ticketTypeIDParameter = ticketTypeID.HasValue ?
                new ObjectParameter("TicketTypeID", ticketTypeID) :
                new ObjectParameter("TicketTypeID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("RegisPlateNumber", regisPlateNumber) :
                new ObjectParameter("RegisPlateNumber", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_OUT_CheckObuSmartCard_Update", outCheckObuSmartCardIDParameter, transactionIDParameter, obuTwoPieceIDParameter, smartCardAccountIDParameter, inCheckObuSmartCardIDParameter, inCheckObuSmartCardIDManualParameter, checkDateParameter, beginBalanceParameter, chargeAmountParameter, balanceParameter, ticketTypeIDParameter, vehicleTypeIDParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, imageIDParameter, regisPlateNumberParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, noteParameter);
        }
    
        public virtual int sp_Out_CheckPeriodObu_AddNew(string transactionID, Nullable<long> periodObuAccountID, Nullable<System.Guid> inCheckPeriodObuID, Nullable<System.Guid> inCheckPeriodObuIDManual, Nullable<System.DateTime> checkDate, Nullable<int> ticketTypeID, Nullable<int> vehicleTypeID, Nullable<int> routeID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, string imageID, string regisPlateNumber, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, string note)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var periodObuAccountIDParameter = periodObuAccountID.HasValue ?
                new ObjectParameter("PeriodObuAccountID", periodObuAccountID) :
                new ObjectParameter("PeriodObuAccountID", typeof(long));
    
            var inCheckPeriodObuIDParameter = inCheckPeriodObuID.HasValue ?
                new ObjectParameter("InCheckPeriodObuID", inCheckPeriodObuID) :
                new ObjectParameter("InCheckPeriodObuID", typeof(System.Guid));
    
            var inCheckPeriodObuIDManualParameter = inCheckPeriodObuIDManual.HasValue ?
                new ObjectParameter("InCheckPeriodObuIDManual", inCheckPeriodObuIDManual) :
                new ObjectParameter("InCheckPeriodObuIDManual", typeof(System.Guid));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var ticketTypeIDParameter = ticketTypeID.HasValue ?
                new ObjectParameter("TicketTypeID", ticketTypeID) :
                new ObjectParameter("TicketTypeID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("RegisPlateNumber", regisPlateNumber) :
                new ObjectParameter("RegisPlateNumber", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Out_CheckPeriodObu_AddNew", transactionIDParameter, periodObuAccountIDParameter, inCheckPeriodObuIDParameter, inCheckPeriodObuIDManualParameter, checkDateParameter, ticketTypeIDParameter, vehicleTypeIDParameter, routeIDParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, imageIDParameter, regisPlateNumberParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, noteParameter);
        }
    
        public virtual int sp_Out_CheckPeriodTicket_AddNew(string transactionID, string ticketID, Nullable<System.Guid> inCheckPeriodTicketID, Nullable<System.Guid> inCheckPeriodTicketIDManual, Nullable<System.DateTime> checkDate, Nullable<int> ticketTypeID, Nullable<int> vehicleTypeID, Nullable<int> routeID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, string imageID, string regisPlateNumber, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, string note)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var ticketIDParameter = ticketID != null ?
                new ObjectParameter("TicketID", ticketID) :
                new ObjectParameter("TicketID", typeof(string));
    
            var inCheckPeriodTicketIDParameter = inCheckPeriodTicketID.HasValue ?
                new ObjectParameter("InCheckPeriodTicketID", inCheckPeriodTicketID) :
                new ObjectParameter("InCheckPeriodTicketID", typeof(System.Guid));
    
            var inCheckPeriodTicketIDManualParameter = inCheckPeriodTicketIDManual.HasValue ?
                new ObjectParameter("InCheckPeriodTicketIDManual", inCheckPeriodTicketIDManual) :
                new ObjectParameter("InCheckPeriodTicketIDManual", typeof(System.Guid));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var ticketTypeIDParameter = ticketTypeID.HasValue ?
                new ObjectParameter("TicketTypeID", ticketTypeID) :
                new ObjectParameter("TicketTypeID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("RegisPlateNumber", regisPlateNumber) :
                new ObjectParameter("RegisPlateNumber", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Out_CheckPeriodTicket_AddNew", transactionIDParameter, ticketIDParameter, inCheckPeriodTicketIDParameter, inCheckPeriodTicketIDManualParameter, checkDateParameter, ticketTypeIDParameter, vehicleTypeIDParameter, routeIDParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, imageIDParameter, regisPlateNumberParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, noteParameter);
        }
    
        public virtual int sp_OUT_CheckPrepaidCard_CheckExits_DAL(string smartCardID, string transactionID, ObjectParameter result)
        {
            var smartCardIDParameter = smartCardID != null ?
                new ObjectParameter("SmartCardID", smartCardID) :
                new ObjectParameter("SmartCardID", typeof(string));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_OUT_CheckPrepaidCard_CheckExits_DAL", smartCardIDParameter, transactionIDParameter, result);
        }
    
        public virtual int sp_Out_CheckSmartCard_AddNew(Nullable<System.Guid> outCheckSmartCardID, string transactionID, string smartCardID, Nullable<System.Guid> inCheckSmartCardID, Nullable<System.Guid> inCheckSmartCardIDManual, Nullable<System.DateTime> checkDate, Nullable<int> beginBalance, Nullable<int> chargeAmount, Nullable<int> balance, Nullable<int> ticketTypeID, Nullable<int> vehicleTypeID, Nullable<int> routeID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, string imageID, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, string note)
        {
            var outCheckSmartCardIDParameter = outCheckSmartCardID.HasValue ?
                new ObjectParameter("OutCheckSmartCardID", outCheckSmartCardID) :
                new ObjectParameter("OutCheckSmartCardID", typeof(System.Guid));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var smartCardIDParameter = smartCardID != null ?
                new ObjectParameter("SmartCardID", smartCardID) :
                new ObjectParameter("SmartCardID", typeof(string));
    
            var inCheckSmartCardIDParameter = inCheckSmartCardID.HasValue ?
                new ObjectParameter("InCheckSmartCardID", inCheckSmartCardID) :
                new ObjectParameter("InCheckSmartCardID", typeof(System.Guid));
    
            var inCheckSmartCardIDManualParameter = inCheckSmartCardIDManual.HasValue ?
                new ObjectParameter("InCheckSmartCardIDManual", inCheckSmartCardIDManual) :
                new ObjectParameter("InCheckSmartCardIDManual", typeof(System.Guid));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var beginBalanceParameter = beginBalance.HasValue ?
                new ObjectParameter("BeginBalance", beginBalance) :
                new ObjectParameter("BeginBalance", typeof(int));
    
            var chargeAmountParameter = chargeAmount.HasValue ?
                new ObjectParameter("ChargeAmount", chargeAmount) :
                new ObjectParameter("ChargeAmount", typeof(int));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(int));
    
            var ticketTypeIDParameter = ticketTypeID.HasValue ?
                new ObjectParameter("TicketTypeID", ticketTypeID) :
                new ObjectParameter("TicketTypeID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Out_CheckSmartCard_AddNew", outCheckSmartCardIDParameter, transactionIDParameter, smartCardIDParameter, inCheckSmartCardIDParameter, inCheckSmartCardIDManualParameter, checkDateParameter, beginBalanceParameter, chargeAmountParameter, balanceParameter, ticketTypeIDParameter, vehicleTypeIDParameter, routeIDParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, imageIDParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, noteParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> sp_OUT_CheckSmartCard_CheckExits(string smartCardID, string transactionID)
        {
            var smartCardIDParameter = smartCardID != null ?
                new ObjectParameter("SmartCardID", smartCardID) :
                new ObjectParameter("SmartCardID", typeof(string));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("sp_OUT_CheckSmartCard_CheckExits", smartCardIDParameter, transactionIDParameter);
        }
    
        public virtual int sp_OUT_CheckSmartCard_CheckExits_DAL(string smartCardID, string transactionID, ObjectParameter result)
        {
            var smartCardIDParameter = smartCardID != null ?
                new ObjectParameter("SmartCardID", smartCardID) :
                new ObjectParameter("SmartCardID", typeof(string));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_OUT_CheckSmartCard_CheckExits_DAL", smartCardIDParameter, transactionIDParameter, result);
        }
    
        public virtual int sp_Out_CheckSmartCard_Delete(Nullable<System.Guid> outCheckSmartCardID)
        {
            var outCheckSmartCardIDParameter = outCheckSmartCardID.HasValue ?
                new ObjectParameter("OutCheckSmartCardID", outCheckSmartCardID) :
                new ObjectParameter("OutCheckSmartCardID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Out_CheckSmartCard_Delete", outCheckSmartCardIDParameter);
        }
    
        public virtual ObjectResult<sp_Out_CheckSmartCard_GetAll_Result> sp_Out_CheckSmartCard_GetAll(Nullable<int> laneID)
        {
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Out_CheckSmartCard_GetAll_Result>("sp_Out_CheckSmartCard_GetAll", laneIDParameter);
        }
    
        public virtual ObjectResult<string> sp_OUT_CheckSmartCard_GetReceiptNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_OUT_CheckSmartCard_GetReceiptNo");
        }
    
        public virtual int sp_Out_CheckSmartCard_Update(Nullable<System.Guid> outCheckSmartCardID, string transactionID, string smartCardID, Nullable<System.Guid> inCheckSmartCardID, Nullable<System.Guid> inCheckSmartCardIDManual, Nullable<System.DateTime> checkDate, Nullable<int> beginBalance, Nullable<int> chargeAmount, Nullable<int> balance, Nullable<int> ticketTypeID, Nullable<int> vehicleTypeID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, string imageID, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, string note)
        {
            var outCheckSmartCardIDParameter = outCheckSmartCardID.HasValue ?
                new ObjectParameter("OutCheckSmartCardID", outCheckSmartCardID) :
                new ObjectParameter("OutCheckSmartCardID", typeof(System.Guid));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var smartCardIDParameter = smartCardID != null ?
                new ObjectParameter("SmartCardID", smartCardID) :
                new ObjectParameter("SmartCardID", typeof(string));
    
            var inCheckSmartCardIDParameter = inCheckSmartCardID.HasValue ?
                new ObjectParameter("InCheckSmartCardID", inCheckSmartCardID) :
                new ObjectParameter("InCheckSmartCardID", typeof(System.Guid));
    
            var inCheckSmartCardIDManualParameter = inCheckSmartCardIDManual.HasValue ?
                new ObjectParameter("InCheckSmartCardIDManual", inCheckSmartCardIDManual) :
                new ObjectParameter("InCheckSmartCardIDManual", typeof(System.Guid));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var beginBalanceParameter = beginBalance.HasValue ?
                new ObjectParameter("BeginBalance", beginBalance) :
                new ObjectParameter("BeginBalance", typeof(int));
    
            var chargeAmountParameter = chargeAmount.HasValue ?
                new ObjectParameter("ChargeAmount", chargeAmount) :
                new ObjectParameter("ChargeAmount", typeof(int));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(int));
    
            var ticketTypeIDParameter = ticketTypeID.HasValue ?
                new ObjectParameter("TicketTypeID", ticketTypeID) :
                new ObjectParameter("TicketTypeID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Out_CheckSmartCard_Update", outCheckSmartCardIDParameter, transactionIDParameter, smartCardIDParameter, inCheckSmartCardIDParameter, inCheckSmartCardIDManualParameter, checkDateParameter, beginBalanceParameter, chargeAmountParameter, balanceParameter, ticketTypeIDParameter, vehicleTypeIDParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, imageIDParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, noteParameter);
        }
    
        public virtual int sp_OUT_CheckSmartCard_UpdateReceiptNo(string receiptNo, string transactionID)
        {
            var receiptNoParameter = receiptNo != null ?
                new ObjectParameter("ReceiptNo", receiptNo) :
                new ObjectParameter("ReceiptNo", typeof(string));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_OUT_CheckSmartCard_UpdateReceiptNo", receiptNoParameter, transactionIDParameter);
        }
    
        public virtual int sp_Out_CheckTicket_AddNew(string transactionID, string ticketID, Nullable<System.Guid> inCheckTicketID, Nullable<System.Guid> inCheckTicketIDManual, Nullable<System.DateTime> checkDate, Nullable<int> price, Nullable<int> ticketTypeID, Nullable<int> vehicleTypeID, Nullable<int> routeID, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID, string imageID, string recogPlateNumber, Nullable<short> recogResultType, Nullable<short> transactionStatus, Nullable<short> precheckStatus, Nullable<short> preSupervisionStatus, Nullable<short> supervisionStatus, Nullable<int> errorID, string note)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var ticketIDParameter = ticketID != null ?
                new ObjectParameter("TicketID", ticketID) :
                new ObjectParameter("TicketID", typeof(string));
    
            var inCheckTicketIDParameter = inCheckTicketID.HasValue ?
                new ObjectParameter("InCheckTicketID", inCheckTicketID) :
                new ObjectParameter("InCheckTicketID", typeof(System.Guid));
    
            var inCheckTicketIDManualParameter = inCheckTicketIDManual.HasValue ?
                new ObjectParameter("InCheckTicketIDManual", inCheckTicketIDManual) :
                new ObjectParameter("InCheckTicketIDManual", typeof(System.Guid));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(int));
    
            var ticketTypeIDParameter = ticketTypeID.HasValue ?
                new ObjectParameter("TicketTypeID", ticketTypeID) :
                new ObjectParameter("TicketTypeID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var imageIDParameter = imageID != null ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(string));
    
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var precheckStatusParameter = precheckStatus.HasValue ?
                new ObjectParameter("PrecheckStatus", precheckStatus) :
                new ObjectParameter("PrecheckStatus", typeof(short));
    
            var preSupervisionStatusParameter = preSupervisionStatus.HasValue ?
                new ObjectParameter("PreSupervisionStatus", preSupervisionStatus) :
                new ObjectParameter("PreSupervisionStatus", typeof(short));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Out_CheckTicket_AddNew", transactionIDParameter, ticketIDParameter, inCheckTicketIDParameter, inCheckTicketIDManualParameter, checkDateParameter, priceParameter, ticketTypeIDParameter, vehicleTypeIDParameter, routeIDParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter, imageIDParameter, recogPlateNumberParameter, recogResultTypeParameter, transactionStatusParameter, precheckStatusParameter, preSupervisionStatusParameter, supervisionStatusParameter, errorIDParameter, noteParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_OUT_GetRouteLength(Nullable<int> fromStationID, Nullable<int> toStationID)
        {
            var fromStationIDParameter = fromStationID.HasValue ?
                new ObjectParameter("FromStationID", fromStationID) :
                new ObjectParameter("FromStationID", typeof(int));
    
            var toStationIDParameter = toStationID.HasValue ?
                new ObjectParameter("ToStationID", toStationID) :
                new ObjectParameter("ToStationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_OUT_GetRouteLength", fromStationIDParameter, toStationIDParameter);
        }
    
        public virtual ObjectResult<sp_OUT_MissingCardCalculateFee_Result> sp_OUT_MissingCardCalculateFee(Nullable<int> toStationID, Nullable<int> vehicleTypeID)
        {
            var toStationIDParameter = toStationID.HasValue ?
                new ObjectParameter("ToStationID", toStationID) :
                new ObjectParameter("ToStationID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_OUT_MissingCardCalculateFee_Result>("sp_OUT_MissingCardCalculateFee", toStationIDParameter, vehicleTypeIDParameter);
        }
    
        public virtual int sp_RecognitionRateReport(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RecognitionRateReport", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter);
        }
    
        public virtual int sp_RecognitionRateReportStation(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RecognitionRateReportStation", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<sp_rpt_PPC_BC_DoanhThuBanTheTraTruoc_Result> sp_rpt_PPC_BC_DoanhThuBanTheTraTruoc()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_rpt_PPC_BC_DoanhThuBanTheTraTruoc_Result>("sp_rpt_PPC_BC_DoanhThuBanTheTraTruoc");
        }
    
        public virtual ObjectResult<sp_rpt_PPC_BC_SaiLechSoDu_Result> sp_rpt_PPC_BC_SaiLechSoDu()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_rpt_PPC_BC_SaiLechSoDu_Result>("sp_rpt_PPC_BC_SaiLechSoDu");
        }
    
        public virtual ObjectResult<sp_rpt_PPC_BC_TinhTrangSuDungTheTraTruoc_Result> sp_rpt_PPC_BC_TinhTrangSuDungTheTraTruoc()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_rpt_PPC_BC_TinhTrangSuDungTheTraTruoc_Result>("sp_rpt_PPC_BC_TinhTrangSuDungTheTraTruoc");
        }
    
        public virtual ObjectResult<sp_SEARCH_CarIn_Result> sp_SEARCH_CarIn(Nullable<int> @object, string vehiclePlate, Nullable<int> sationID, Nullable<int> laneID, string cardID, Nullable<System.DateTime> startDateTime, Nullable<System.DateTime> endDateTime)
        {
            var objectParameter = @object.HasValue ?
                new ObjectParameter("Object", @object) :
                new ObjectParameter("Object", typeof(int));
    
            var vehiclePlateParameter = vehiclePlate != null ?
                new ObjectParameter("VehiclePlate", vehiclePlate) :
                new ObjectParameter("VehiclePlate", typeof(string));
    
            var sationIDParameter = sationID.HasValue ?
                new ObjectParameter("SationID", sationID) :
                new ObjectParameter("SationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            var startDateTimeParameter = startDateTime.HasValue ?
                new ObjectParameter("StartDateTime", startDateTime) :
                new ObjectParameter("StartDateTime", typeof(System.DateTime));
    
            var endDateTimeParameter = endDateTime.HasValue ?
                new ObjectParameter("EndDateTime", endDateTime) :
                new ObjectParameter("EndDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SEARCH_CarIn_Result>("sp_SEARCH_CarIn", objectParameter, vehiclePlateParameter, sationIDParameter, laneIDParameter, cardIDParameter, startDateTimeParameter, endDateTimeParameter);
        }
    
        public virtual ObjectResult<sp_SEARCH_CarInSmartCart_Result> sp_SEARCH_CarInSmartCart(string smartCardId, string stationId, string vehiclePlate)
        {
            var smartCardIdParameter = smartCardId != null ?
                new ObjectParameter("SmartCardId", smartCardId) :
                new ObjectParameter("SmartCardId", typeof(string));
    
            var stationIdParameter = stationId != null ?
                new ObjectParameter("StationId", stationId) :
                new ObjectParameter("StationId", typeof(string));
    
            var vehiclePlateParameter = vehiclePlate != null ?
                new ObjectParameter("VehiclePlate", vehiclePlate) :
                new ObjectParameter("VehiclePlate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SEARCH_CarInSmartCart_Result>("sp_SEARCH_CarInSmartCart", smartCardIdParameter, stationIdParameter, vehiclePlateParameter);
        }
    
        public virtual ObjectResult<sp_SEARCH_CarStandard_Result> sp_SEARCH_CarStandard(string vehiclePlate, string encryptPlate)
        {
            var vehiclePlateParameter = vehiclePlate != null ?
                new ObjectParameter("VehiclePlate", vehiclePlate) :
                new ObjectParameter("VehiclePlate", typeof(string));
    
            var encryptPlateParameter = encryptPlate != null ?
                new ObjectParameter("EncryptPlate", encryptPlate) :
                new ObjectParameter("EncryptPlate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SEARCH_CarStandard_Result>("sp_SEARCH_CarStandard", vehiclePlateParameter, encryptPlateParameter);
        }
    
        public virtual ObjectResult<sp_SEARCH_GetEntranceInfo_Result> sp_SEARCH_GetEntranceInfo(string vehiclePlate)
        {
            var vehiclePlateParameter = vehiclePlate != null ?
                new ObjectParameter("VehiclePlate", vehiclePlate) :
                new ObjectParameter("VehiclePlate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SEARCH_GetEntranceInfo_Result>("sp_SEARCH_GetEntranceInfo", vehiclePlateParameter);
        }
    
        public virtual ObjectResult<sp_SEARCH_GetVehicleInfo_Result> sp_SEARCH_GetVehicleInfo(string recogPlate)
        {
            var recogPlateParameter = recogPlate != null ?
                new ObjectParameter("RecogPlate", recogPlate) :
                new ObjectParameter("RecogPlate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SEARCH_GetVehicleInfo_Result>("sp_SEARCH_GetVehicleInfo", recogPlateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Shift_GetShiftID(Nullable<System.TimeSpan> time)
        {
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Shift_GetShiftID", timeParameter);
        }
    
        public virtual ObjectResult<string> sp_SUP_BlackList_CheckVehiclePlate(string vehiclePlate)
        {
            var vehiclePlateParameter = vehiclePlate != null ?
                new ObjectParameter("VehiclePlate", vehiclePlate) :
                new ObjectParameter("VehiclePlate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_SUP_BlackList_CheckVehiclePlate", vehiclePlateParameter);
        }
    
        public virtual int sp_SUP_DeviceStatus(string laneCode, string deviceCodeType, Nullable<short> status, string ipDevice, Nullable<int> laneDeviceID, string note)
        {
            var laneCodeParameter = laneCode != null ?
                new ObjectParameter("LaneCode", laneCode) :
                new ObjectParameter("LaneCode", typeof(string));
    
            var deviceCodeTypeParameter = deviceCodeType != null ?
                new ObjectParameter("DeviceCodeType", deviceCodeType) :
                new ObjectParameter("DeviceCodeType", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(short));
    
            var ipDeviceParameter = ipDevice != null ?
                new ObjectParameter("IpDevice", ipDevice) :
                new ObjectParameter("IpDevice", typeof(string));
    
            var laneDeviceIDParameter = laneDeviceID.HasValue ?
                new ObjectParameter("LaneDeviceID", laneDeviceID) :
                new ObjectParameter("LaneDeviceID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SUP_DeviceStatus", laneCodeParameter, deviceCodeTypeParameter, statusParameter, ipDeviceParameter, laneDeviceIDParameter, noteParameter);
        }
    
        public virtual int sp_SUP_ProductStatus_Addnew(Nullable<int> stationID, Nullable<int> laneID, Nullable<int> status, Nullable<int> quantity, string note)
        {
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SUP_ProductStatus_Addnew", stationIDParameter, laneIDParameter, statusParameter, quantityParameter, noteParameter);
        }
    
        public virtual ObjectResult<sp_SUP_ProductStatus_GetAll_Result> sp_SUP_ProductStatus_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SUP_ProductStatus_GetAll_Result>("sp_SUP_ProductStatus_GetAll");
        }
    
        public virtual ObjectResult<sp_SUP_ProductStatus_GetByID_Result> sp_SUP_ProductStatus_GetByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SUP_ProductStatus_GetByID_Result>("sp_SUP_ProductStatus_GetByID", iDParameter);
        }
    
        public virtual int sp_SUP_VehicleInformationManual_AddNew(string vehiclePlate, Nullable<int> vehicleTypeID, Nullable<int> employeeID)
        {
            var vehiclePlateParameter = vehiclePlate != null ?
                new ObjectParameter("VehiclePlate", vehiclePlate) :
                new ObjectParameter("VehiclePlate", typeof(string));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SUP_VehicleInformationManual_AddNew", vehiclePlateParameter, vehicleTypeIDParameter, employeeIDParameter);
        }
    
        public virtual int sp_SYS_ConfigInfo_UpdateBillNumber(string billNumber)
        {
            var billNumberParameter = billNumber != null ?
                new ObjectParameter("BillNumber", billNumber) :
                new ObjectParameter("BillNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SYS_ConfigInfo_UpdateBillNumber", billNumberParameter);
        }
    
        public virtual ObjectResult<sp_temp_HauKiemVeLuot_Result> sp_temp_HauKiemVeLuot(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> dateShift, Nullable<int> shiftID, Nullable<int> stationID, Nullable<int> laneID, Nullable<int> employeetest, string codeVehicle, string regisplatenumber, Nullable<int> ticketID, Nullable<int> notPostCheck, Nullable<int> resultPostCheck, Nullable<int> resultNotPostCheck, Nullable<int> resultwatchpostcheck, Nullable<int> errorPostCheck, Nullable<int> notPrePostCheck, Nullable<int> preResultPostCheck, Nullable<int> preWatchPostChekc, Nullable<int> preResultNotpostcheck, Nullable<int> pretestnull, Nullable<int> suptestnull, Nullable<int> testDate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var dateShiftParameter = dateShift.HasValue ?
                new ObjectParameter("dateShift", dateShift) :
                new ObjectParameter("dateShift", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("laneID", laneID) :
                new ObjectParameter("laneID", typeof(int));
    
            var employeetestParameter = employeetest.HasValue ?
                new ObjectParameter("employeetest", employeetest) :
                new ObjectParameter("employeetest", typeof(int));
    
            var codeVehicleParameter = codeVehicle != null ?
                new ObjectParameter("codeVehicle", codeVehicle) :
                new ObjectParameter("codeVehicle", typeof(string));
    
            var regisplatenumberParameter = regisplatenumber != null ?
                new ObjectParameter("regisplatenumber", regisplatenumber) :
                new ObjectParameter("regisplatenumber", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("ticketID", ticketID) :
                new ObjectParameter("ticketID", typeof(int));
    
            var notPostCheckParameter = notPostCheck.HasValue ?
                new ObjectParameter("notPostCheck", notPostCheck) :
                new ObjectParameter("notPostCheck", typeof(int));
    
            var resultPostCheckParameter = resultPostCheck.HasValue ?
                new ObjectParameter("resultPostCheck", resultPostCheck) :
                new ObjectParameter("resultPostCheck", typeof(int));
    
            var resultNotPostCheckParameter = resultNotPostCheck.HasValue ?
                new ObjectParameter("resultNotPostCheck", resultNotPostCheck) :
                new ObjectParameter("resultNotPostCheck", typeof(int));
    
            var resultwatchpostcheckParameter = resultwatchpostcheck.HasValue ?
                new ObjectParameter("resultwatchpostcheck", resultwatchpostcheck) :
                new ObjectParameter("resultwatchpostcheck", typeof(int));
    
            var errorPostCheckParameter = errorPostCheck.HasValue ?
                new ObjectParameter("errorPostCheck", errorPostCheck) :
                new ObjectParameter("errorPostCheck", typeof(int));
    
            var notPrePostCheckParameter = notPrePostCheck.HasValue ?
                new ObjectParameter("notPrePostCheck", notPrePostCheck) :
                new ObjectParameter("notPrePostCheck", typeof(int));
    
            var preResultPostCheckParameter = preResultPostCheck.HasValue ?
                new ObjectParameter("PreResultPostCheck", preResultPostCheck) :
                new ObjectParameter("PreResultPostCheck", typeof(int));
    
            var preWatchPostChekcParameter = preWatchPostChekc.HasValue ?
                new ObjectParameter("PreWatchPostChekc", preWatchPostChekc) :
                new ObjectParameter("PreWatchPostChekc", typeof(int));
    
            var preResultNotpostcheckParameter = preResultNotpostcheck.HasValue ?
                new ObjectParameter("PreResultNotpostcheck", preResultNotpostcheck) :
                new ObjectParameter("PreResultNotpostcheck", typeof(int));
    
            var pretestnullParameter = pretestnull.HasValue ?
                new ObjectParameter("pretestnull", pretestnull) :
                new ObjectParameter("pretestnull", typeof(int));
    
            var suptestnullParameter = suptestnull.HasValue ?
                new ObjectParameter("suptestnull", suptestnull) :
                new ObjectParameter("suptestnull", typeof(int));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("testDate", testDate) :
                new ObjectParameter("testDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_temp_HauKiemVeLuot_Result>("sp_temp_HauKiemVeLuot", fromdateParameter, todateParameter, dateShiftParameter, shiftIDParameter, stationIDParameter, laneIDParameter, employeetestParameter, codeVehicleParameter, regisplatenumberParameter, ticketIDParameter, notPostCheckParameter, resultPostCheckParameter, resultNotPostCheckParameter, resultwatchpostcheckParameter, errorPostCheckParameter, notPrePostCheckParameter, preResultPostCheckParameter, preWatchPostChekcParameter, preResultNotpostcheckParameter, pretestnullParameter, suptestnullParameter, testDateParameter);
        }
    
        public virtual int sp_TK_LoginTracking_AddNew(Nullable<System.DateTime> loginDate, Nullable<bool> isLogout, Nullable<int> employeeID, Nullable<int> shiftID, Nullable<int> laneID, Nullable<int> stationID)
        {
            var loginDateParameter = loginDate.HasValue ?
                new ObjectParameter("LoginDate", loginDate) :
                new ObjectParameter("LoginDate", typeof(System.DateTime));
    
            var isLogoutParameter = isLogout.HasValue ?
                new ObjectParameter("IsLogout", isLogout) :
                new ObjectParameter("IsLogout", typeof(bool));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TK_LoginTracking_AddNew", loginDateParameter, isLogoutParameter, employeeIDParameter, shiftIDParameter, laneIDParameter, stationIDParameter);
        }
    
        public virtual ObjectResult<sp_TK_LoginTracking_GetAll_Result> sp_TK_LoginTracking_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TK_LoginTracking_GetAll_Result>("sp_TK_LoginTracking_GetAll");
        }
    
        public virtual int sp_TK_WIM_AddNew(Nullable<System.Guid> wIMID, Nullable<int> grossWeight, string vehicleStructure, Nullable<int> axleNum, Nullable<int> overloadWeight, string note)
        {
            var wIMIDParameter = wIMID.HasValue ?
                new ObjectParameter("WIMID", wIMID) :
                new ObjectParameter("WIMID", typeof(System.Guid));
    
            var grossWeightParameter = grossWeight.HasValue ?
                new ObjectParameter("GrossWeight", grossWeight) :
                new ObjectParameter("GrossWeight", typeof(int));
    
            var vehicleStructureParameter = vehicleStructure != null ?
                new ObjectParameter("VehicleStructure", vehicleStructure) :
                new ObjectParameter("VehicleStructure", typeof(string));
    
            var axleNumParameter = axleNum.HasValue ?
                new ObjectParameter("AxleNum", axleNum) :
                new ObjectParameter("AxleNum", typeof(int));
    
            var overloadWeightParameter = overloadWeight.HasValue ?
                new ObjectParameter("OverloadWeight", overloadWeight) :
                new ObjectParameter("OverloadWeight", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TK_WIM_AddNew", wIMIDParameter, grossWeightParameter, vehicleStructureParameter, axleNumParameter, overloadWeightParameter, noteParameter);
        }
    
        public virtual int sp_TK_WIMDetail_AddNew(Nullable<System.Guid> wIMDetailID, Nullable<System.Guid> wIMID, Nullable<int> axleTypeID, Nullable<int> axleWeight1, Nullable<int> axleWeight2, Nullable<int> axleWeight3, Nullable<double> axleLenght, Nullable<int> overloadWeight)
        {
            var wIMDetailIDParameter = wIMDetailID.HasValue ?
                new ObjectParameter("WIMDetailID", wIMDetailID) :
                new ObjectParameter("WIMDetailID", typeof(System.Guid));
    
            var wIMIDParameter = wIMID.HasValue ?
                new ObjectParameter("WIMID", wIMID) :
                new ObjectParameter("WIMID", typeof(System.Guid));
    
            var axleTypeIDParameter = axleTypeID.HasValue ?
                new ObjectParameter("AxleTypeID", axleTypeID) :
                new ObjectParameter("AxleTypeID", typeof(int));
    
            var axleWeight1Parameter = axleWeight1.HasValue ?
                new ObjectParameter("AxleWeight1", axleWeight1) :
                new ObjectParameter("AxleWeight1", typeof(int));
    
            var axleWeight2Parameter = axleWeight2.HasValue ?
                new ObjectParameter("AxleWeight2", axleWeight2) :
                new ObjectParameter("AxleWeight2", typeof(int));
    
            var axleWeight3Parameter = axleWeight3.HasValue ?
                new ObjectParameter("AxleWeight3", axleWeight3) :
                new ObjectParameter("AxleWeight3", typeof(int));
    
            var axleLenghtParameter = axleLenght.HasValue ?
                new ObjectParameter("AxleLenght", axleLenght) :
                new ObjectParameter("AxleLenght", typeof(double));
    
            var overloadWeightParameter = overloadWeight.HasValue ?
                new ObjectParameter("OverloadWeight", overloadWeight) :
                new ObjectParameter("OverloadWeight", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TK_WIMDetail_AddNew", wIMDetailIDParameter, wIMIDParameter, axleTypeIDParameter, axleWeight1Parameter, axleWeight2Parameter, axleWeight3Parameter, axleLenghtParameter, overloadWeightParameter);
        }
    
        public virtual ObjectResult<sp_ToolManagement_GetAllOutCheck_NoEntryInfo_Result> sp_ToolManagement_GetAllOutCheck_NoEntryInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ToolManagement_GetAllOutCheck_NoEntryInfo_Result>("sp_ToolManagement_GetAllOutCheck_NoEntryInfo");
        }
    
        public virtual ObjectResult<sp_ToolManagement_GetAllOutCheck_UnPrecheck_Result> sp_ToolManagement_GetAllOutCheck_UnPrecheck()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ToolManagement_GetAllOutCheck_UnPrecheck_Result>("sp_ToolManagement_GetAllOutCheck_UnPrecheck");
        }
    
        public virtual int sp_ToolManagement_GetAllOutCheck_UpdateEntryInfo(string outTransactionID, string entryTransactionID, Nullable<int> entryLaneID, string entryRecogPlateNumber)
        {
            var outTransactionIDParameter = outTransactionID != null ?
                new ObjectParameter("OutTransactionID", outTransactionID) :
                new ObjectParameter("OutTransactionID", typeof(string));
    
            var entryTransactionIDParameter = entryTransactionID != null ?
                new ObjectParameter("EntryTransactionID", entryTransactionID) :
                new ObjectParameter("EntryTransactionID", typeof(string));
    
            var entryLaneIDParameter = entryLaneID.HasValue ?
                new ObjectParameter("EntryLaneID", entryLaneID) :
                new ObjectParameter("EntryLaneID", typeof(int));
    
            var entryRecogPlateNumberParameter = entryRecogPlateNumber != null ?
                new ObjectParameter("EntryRecogPlateNumber", entryRecogPlateNumber) :
                new ObjectParameter("EntryRecogPlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ToolManagement_GetAllOutCheck_UpdateEntryInfo", outTransactionIDParameter, entryTransactionIDParameter, entryLaneIDParameter, entryRecogPlateNumberParameter);
        }
    
        public virtual ObjectResult<sp_ToolManagement_GetDeviceStatus_Result> sp_ToolManagement_GetDeviceStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ToolManagement_GetDeviceStatus_Result>("sp_ToolManagement_GetDeviceStatus");
        }
    
        public virtual ObjectResult<sp_ToolManagement_GetTrafficVolume_Result> sp_ToolManagement_GetTrafficVolume(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> stationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ToolManagement_GetTrafficVolume_Result>("sp_ToolManagement_GetTrafficVolume", fromDateParameter, toDateParameter, stationIDParameter);
        }
    
        public virtual int sp_ToolManagement_InsertDeviceStatus(string laneCode, Nullable<System.DateTime> collectDate, string status)
        {
            var laneCodeParameter = laneCode != null ?
                new ObjectParameter("LaneCode", laneCode) :
                new ObjectParameter("LaneCode", typeof(string));
    
            var collectDateParameter = collectDate.HasValue ?
                new ObjectParameter("CollectDate", collectDate) :
                new ObjectParameter("CollectDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ToolManagement_InsertDeviceStatus", laneCodeParameter, collectDateParameter, statusParameter);
        }
    
        public virtual int sp_ToolManagement_InsertTrafficVolume(Nullable<System.DateTime> regDate, Nullable<System.DateTime> collectDate, string tollGateID, string laneID, Nullable<decimal> vol)
        {
            var regDateParameter = regDate.HasValue ?
                new ObjectParameter("RegDate", regDate) :
                new ObjectParameter("RegDate", typeof(System.DateTime));
    
            var collectDateParameter = collectDate.HasValue ?
                new ObjectParameter("CollectDate", collectDate) :
                new ObjectParameter("CollectDate", typeof(System.DateTime));
    
            var tollGateIDParameter = tollGateID != null ?
                new ObjectParameter("TollGateID", tollGateID) :
                new ObjectParameter("TollGateID", typeof(string));
    
            var laneIDParameter = laneID != null ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(string));
    
            var volParameter = vol.HasValue ?
                new ObjectParameter("Vol", vol) :
                new ObjectParameter("Vol", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ToolManagement_InsertTrafficVolume", regDateParameter, collectDateParameter, tollGateIDParameter, laneIDParameter, volParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ToolManagement_UpdateEntryInfo_CountRowEffect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ToolManagement_UpdateEntryInfo_CountRowEffect");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ToolManagement_UpdatePrecheck_CountRowEffect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ToolManagement_UpdatePrecheck_CountRowEffect");
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int sp_vehicle_turn_phat(Nullable<int> stationID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> checkTime)
        {
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_vehicle_turn_phat", stationIDParameter, fromDateParameter, toDateParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, checkTimeParameter);
        }
    
        public virtual int sp_vehicle_turn_phat1(Nullable<int> stationID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> checkTime)
        {
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_vehicle_turn_phat1", stationIDParameter, fromDateParameter, toDateParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, checkTimeParameter);
        }
    
        public virtual int sp_vehicle_turn_test()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_vehicle_turn_test");
        }
    
        public virtual ObjectResult<sp_VehicleCountReport_Result> sp_VehicleCountReport(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VehicleCountReport_Result>("sp_VehicleCountReport", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter);
        }
    
        public virtual int spRandomNumber(Nullable<int> upper, Nullable<int> lower, ObjectParameter ramdom1)
        {
            var upperParameter = upper.HasValue ?
                new ObjectParameter("Upper", upper) :
                new ObjectParameter("Upper", typeof(int));
    
            var lowerParameter = lower.HasValue ?
                new ObjectParameter("Lower", lower) :
                new ObjectParameter("Lower", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRandomNumber", upperParameter, lowerParameter, ramdom1);
        }
    
        public virtual ObjectResult<SUP2_CheckForceGroupDetailIsNull_Result> SUP2_CheckForceGroupDetailIsNull(string inCheckForceOpenGroupID)
        {
            var inCheckForceOpenGroupIDParameter = inCheckForceOpenGroupID != null ?
                new ObjectParameter("InCheckForceOpenGroupID", inCheckForceOpenGroupID) :
                new ObjectParameter("InCheckForceOpenGroupID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUP2_CheckForceGroupDetailIsNull_Result>("SUP2_CheckForceGroupDetailIsNull", inCheckForceOpenGroupIDParameter);
        }
    
        public virtual int SUP2_CheckForceGroupUpdateStatus(string checkForceOpenGroupID, Nullable<int> supervisionStatus, string note, Nullable<short> stationID, Nullable<int> employeeID, Nullable<short> shiftID)
        {
            var checkForceOpenGroupIDParameter = checkForceOpenGroupID != null ?
                new ObjectParameter("CheckForceOpenGroupID", checkForceOpenGroupID) :
                new ObjectParameter("CheckForceOpenGroupID", typeof(string));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(short));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SUP2_CheckForceGroupUpdateStatus", checkForceOpenGroupIDParameter, supervisionStatusParameter, noteParameter, stationIDParameter, employeeIDParameter, shiftIDParameter);
        }
    
        public virtual ObjectResult<SUP2_CheckForceIsGroup_Result> SUP2_CheckForceIsGroup(string inCheckForceOpenGroupID)
        {
            var inCheckForceOpenGroupIDParameter = inCheckForceOpenGroupID != null ?
                new ObjectParameter("InCheckForceOpenGroupID", inCheckForceOpenGroupID) :
                new ObjectParameter("InCheckForceOpenGroupID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUP2_CheckForceIsGroup_Result>("SUP2_CheckForceIsGroup", inCheckForceOpenGroupIDParameter);
        }
    
        public virtual int SUP2_ConfirmStandardVehicleInfomation(string regisPlateNumber, string areaCode, Nullable<int> vehicleTypeID, Nullable<int> ticketTypeID, Nullable<int> regisNumber, Nullable<int> employeeID)
        {
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("RegisPlateNumber", regisPlateNumber) :
                new ObjectParameter("RegisPlateNumber", typeof(string));
    
            var areaCodeParameter = areaCode != null ?
                new ObjectParameter("AreaCode", areaCode) :
                new ObjectParameter("AreaCode", typeof(string));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var ticketTypeIDParameter = ticketTypeID.HasValue ?
                new ObjectParameter("TicketTypeID", ticketTypeID) :
                new ObjectParameter("TicketTypeID", typeof(int));
    
            var regisNumberParameter = regisNumber.HasValue ?
                new ObjectParameter("RegisNumber", regisNumber) :
                new ObjectParameter("RegisNumber", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SUP2_ConfirmStandardVehicleInfomation", regisPlateNumberParameter, areaCodeParameter, vehicleTypeIDParameter, ticketTypeIDParameter, regisNumberParameter, employeeIDParameter);
        }
    
        public virtual int SUP2_Create_Partion_From_Table(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SUP2_Create_Partion_From_Table", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<SUP2_GetEmployeeById_Result> SUP2_GetEmployeeById(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUP2_GetEmployeeById_Result>("SUP2_GetEmployeeById", employeeIDParameter);
        }
    
        public virtual ObjectResult<SUP2_GetPrepaidSupervisionStatus_Result> SUP2_GetPrepaidSupervisionStatus(Nullable<System.Guid> outCheckPrepaidCardID)
        {
            var outCheckPrepaidCardIDParameter = outCheckPrepaidCardID.HasValue ?
                new ObjectParameter("OutCheckPrepaidCardID", outCheckPrepaidCardID) :
                new ObjectParameter("OutCheckPrepaidCardID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUP2_GetPrepaidSupervisionStatus_Result>("SUP2_GetPrepaidSupervisionStatus", outCheckPrepaidCardIDParameter);
        }
    
        public virtual int SUP2_getSelectedPage(string tableOrView, Nullable<int> selectedPage, Nullable<int> pageSize, string columns, string orderByColumn, string orderByDirection, string whereClause)
        {
            var tableOrViewParameter = tableOrView != null ?
                new ObjectParameter("TableOrView", tableOrView) :
                new ObjectParameter("TableOrView", typeof(string));
    
            var selectedPageParameter = selectedPage.HasValue ?
                new ObjectParameter("SelectedPage", selectedPage) :
                new ObjectParameter("SelectedPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var columnsParameter = columns != null ?
                new ObjectParameter("Columns", columns) :
                new ObjectParameter("Columns", typeof(string));
    
            var orderByColumnParameter = orderByColumn != null ?
                new ObjectParameter("OrderByColumn", orderByColumn) :
                new ObjectParameter("OrderByColumn", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SUP2_getSelectedPage", tableOrViewParameter, selectedPageParameter, pageSizeParameter, columnsParameter, orderByColumnParameter, orderByDirectionParameter, whereClauseParameter);
        }
    
        public virtual ObjectResult<SUP2_GetSmartCardSupervisionStatus_Result> SUP2_GetSmartCardSupervisionStatus(Nullable<System.Guid> outCheckSmartCardID)
        {
            var outCheckSmartCardIDParameter = outCheckSmartCardID.HasValue ?
                new ObjectParameter("OutCheckSmartCardID", outCheckSmartCardID) :
                new ObjectParameter("OutCheckSmartCardID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUP2_GetSmartCardSupervisionStatus_Result>("SUP2_GetSmartCardSupervisionStatus", outCheckSmartCardIDParameter);
        }
    
        public virtual ObjectResult<SUP2_GetStandardVehicleInfomation_Result> SUP2_GetStandardVehicleInfomation(string recogPlateNumber)
        {
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUP2_GetStandardVehicleInfomation_Result>("SUP2_GetStandardVehicleInfomation", recogPlateNumberParameter);
        }
    
        public virtual ObjectResult<SUP2_GetSupervisionCurrent_Result> SUP2_GetSupervisionCurrent(string recogPlateNumber)
        {
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUP2_GetSupervisionCurrent_Result>("SUP2_GetSupervisionCurrent", recogPlateNumberParameter);
        }
    
        public virtual ObjectResult<SUP2_GetSupervisionCurrentTop3Valid_Result> SUP2_GetSupervisionCurrentTop3Valid(string recogPlateNumber)
        {
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUP2_GetSupervisionCurrentTop3Valid_Result>("SUP2_GetSupervisionCurrentTop3Valid", recogPlateNumberParameter);
        }
    
        public virtual ObjectResult<SUP2_GetSupervisionCurrentTop5Valid_Result> SUP2_GetSupervisionCurrentTop5Valid(string recogPlateNumber, Nullable<int> vehicleTypeID)
        {
            var recogPlateNumberParameter = recogPlateNumber != null ?
                new ObjectParameter("RecogPlateNumber", recogPlateNumber) :
                new ObjectParameter("RecogPlateNumber", typeof(string));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUP2_GetSupervisionCurrentTop5Valid_Result>("SUP2_GetSupervisionCurrentTop5Valid", recogPlateNumberParameter, vehicleTypeIDParameter);
        }
    
        public virtual ObjectResult<SUP2_GetSupervisionStatus_Result> SUP2_GetSupervisionStatus(Nullable<System.Guid> outCheckSmartCardID)
        {
            var outCheckSmartCardIDParameter = outCheckSmartCardID.HasValue ?
                new ObjectParameter("OutCheckSmartCardID", outCheckSmartCardID) :
                new ObjectParameter("OutCheckSmartCardID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUP2_GetSupervisionStatus_Result>("SUP2_GetSupervisionStatus", outCheckSmartCardIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SUP2_getVehicleCount(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> vehicleTypeID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SUP2_getVehicleCount", fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, vehicleTypeIDParameter);
        }
    
        public virtual ObjectResult<SUP2_getVehicleInformation_Result> SUP2_getVehicleInformation(string regisPlateNumber)
        {
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("RegisPlateNumber", regisPlateNumber) :
                new ObjectParameter("RegisPlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUP2_getVehicleInformation_Result>("SUP2_getVehicleInformation", regisPlateNumberParameter);
        }
    
        public virtual ObjectResult<SUP2_getVehicleInformationManual_Result> SUP2_getVehicleInformationManual(string regisPlateNumber)
        {
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("RegisPlateNumber", regisPlateNumber) :
                new ObjectParameter("RegisPlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUP2_getVehicleInformationManual_Result>("SUP2_getVehicleInformationManual", regisPlateNumberParameter);
        }
    
        public virtual int SUP2_INCheckForceGroupUpdateStatus(string inCheckForceOpenGroupID, Nullable<int> supervisionStatus, string note, Nullable<short> stationID, Nullable<int> employeeID, Nullable<short> shiftID)
        {
            var inCheckForceOpenGroupIDParameter = inCheckForceOpenGroupID != null ?
                new ObjectParameter("InCheckForceOpenGroupID", inCheckForceOpenGroupID) :
                new ObjectParameter("InCheckForceOpenGroupID", typeof(string));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(short));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SUP2_INCheckForceGroupUpdateStatus", inCheckForceOpenGroupIDParameter, supervisionStatusParameter, noteParameter, stationIDParameter, employeeIDParameter, shiftIDParameter);
        }
    
        public virtual int SUP2_OUTCheckForceGroupUpdateStatus(string outCheckForceOpenGroupID, Nullable<int> supervisionStatus, string note, Nullable<short> stationID, Nullable<int> employeeID, Nullable<short> shiftID)
        {
            var outCheckForceOpenGroupIDParameter = outCheckForceOpenGroupID != null ?
                new ObjectParameter("OutCheckForceOpenGroupID", outCheckForceOpenGroupID) :
                new ObjectParameter("OutCheckForceOpenGroupID", typeof(string));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(short));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SUP2_OUTCheckForceGroupUpdateStatus", outCheckForceOpenGroupIDParameter, supervisionStatusParameter, noteParameter, stationIDParameter, employeeIDParameter, shiftIDParameter);
        }
    
        public virtual int SUP2_Super_Search_SmartCard_Info_InOut(Nullable<int> checkTime, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT, string codeReceiptNo, string codedevide, string recogplatenumber, Nullable<int> laneID, Nullable<int> employeeID, Nullable<int> routeID, Nullable<short> transactionStatus, Nullable<short> recogResultType, Nullable<int> employeeCheck, Nullable<int> errorIDEmployee, Nullable<int> systemCheck, Nullable<int> checkradioEmployee, Nullable<int> checkradioSystem, Nullable<long> pageNumber, Nullable<int> recordsPerPage)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("stationID", stationID) :
                new ObjectParameter("stationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            var codeReceiptNoParameter = codeReceiptNo != null ?
                new ObjectParameter("codeReceiptNo", codeReceiptNo) :
                new ObjectParameter("codeReceiptNo", typeof(string));
    
            var codedevideParameter = codedevide != null ?
                new ObjectParameter("codedevide", codedevide) :
                new ObjectParameter("codedevide", typeof(string));
    
            var recogplatenumberParameter = recogplatenumber != null ?
                new ObjectParameter("recogplatenumber", recogplatenumber) :
                new ObjectParameter("recogplatenumber", typeof(string));
    
            var laneIDParameter = laneID.HasValue ?
                new ObjectParameter("LaneID", laneID) :
                new ObjectParameter("LaneID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var transactionStatusParameter = transactionStatus.HasValue ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(short));
    
            var recogResultTypeParameter = recogResultType.HasValue ?
                new ObjectParameter("RecogResultType", recogResultType) :
                new ObjectParameter("RecogResultType", typeof(short));
    
            var employeeCheckParameter = employeeCheck.HasValue ?
                new ObjectParameter("EmployeeCheck", employeeCheck) :
                new ObjectParameter("EmployeeCheck", typeof(int));
    
            var errorIDEmployeeParameter = errorIDEmployee.HasValue ?
                new ObjectParameter("ErrorIDEmployee", errorIDEmployee) :
                new ObjectParameter("ErrorIDEmployee", typeof(int));
    
            var systemCheckParameter = systemCheck.HasValue ?
                new ObjectParameter("SystemCheck", systemCheck) :
                new ObjectParameter("SystemCheck", typeof(int));
    
            var checkradioEmployeeParameter = checkradioEmployee.HasValue ?
                new ObjectParameter("CheckradioEmployee", checkradioEmployee) :
                new ObjectParameter("CheckradioEmployee", typeof(int));
    
            var checkradioSystemParameter = checkradioSystem.HasValue ?
                new ObjectParameter("CheckradioSystem", checkradioSystem) :
                new ObjectParameter("CheckradioSystem", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SUP2_Super_Search_SmartCard_Info_InOut", checkTimeParameter, fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter, codeReceiptNoParameter, codedevideParameter, recogplatenumberParameter, laneIDParameter, employeeIDParameter, routeIDParameter, transactionStatusParameter, recogResultTypeParameter, employeeCheckParameter, errorIDEmployeeParameter, systemCheckParameter, checkradioEmployeeParameter, checkradioSystemParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual int SUP2_UpdatePrepaidSupervisonStatus(Nullable<System.Guid> outCheckPrepaidCardID, Nullable<short> supervisionStatus, string note, Nullable<System.DateTime> dateOut, Nullable<int> employeeID, Nullable<int> stationID)
        {
            var outCheckPrepaidCardIDParameter = outCheckPrepaidCardID.HasValue ?
                new ObjectParameter("OutCheckPrepaidCardID", outCheckPrepaidCardID) :
                new ObjectParameter("OutCheckPrepaidCardID", typeof(System.Guid));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var dateOutParameter = dateOut.HasValue ?
                new ObjectParameter("DateOut", dateOut) :
                new ObjectParameter("DateOut", typeof(System.DateTime));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SUP2_UpdatePrepaidSupervisonStatus", outCheckPrepaidCardIDParameter, supervisionStatusParameter, noteParameter, dateOutParameter, employeeIDParameter, stationIDParameter);
        }
    
        public virtual int SUP2_UpdateSupervisonStatus(Nullable<System.Guid> outCheckSmartCardID, Nullable<short> supervisionStatus, string note, Nullable<System.DateTime> dateOut, Nullable<int> employeeID, Nullable<int> stationID)
        {
            var outCheckSmartCardIDParameter = outCheckSmartCardID.HasValue ?
                new ObjectParameter("OutCheckSmartCardID", outCheckSmartCardID) :
                new ObjectParameter("OutCheckSmartCardID", typeof(System.Guid));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var dateOutParameter = dateOut.HasValue ?
                new ObjectParameter("DateOut", dateOut) :
                new ObjectParameter("DateOut", typeof(System.DateTime));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SUP2_UpdateSupervisonStatus", outCheckSmartCardIDParameter, supervisionStatusParameter, noteParameter, dateOutParameter, employeeIDParameter, stationIDParameter);
        }
    
        public virtual int SUP2_UpdateSupervisonStatusPartition(Nullable<System.Guid> outCheckSmartCardID, Nullable<short> supervisionStatus, Nullable<System.DateTime> dateOut)
        {
            var outCheckSmartCardIDParameter = outCheckSmartCardID.HasValue ?
                new ObjectParameter("OutCheckSmartCardID", outCheckSmartCardID) :
                new ObjectParameter("OutCheckSmartCardID", typeof(System.Guid));
    
            var supervisionStatusParameter = supervisionStatus.HasValue ?
                new ObjectParameter("SupervisionStatus", supervisionStatus) :
                new ObjectParameter("SupervisionStatus", typeof(short));
    
            var dateOutParameter = dateOut.HasValue ?
                new ObjectParameter("DateOut", dateOut) :
                new ObjectParameter("DateOut", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SUP2_UpdateSupervisonStatusPartition", outCheckSmartCardIDParameter, supervisionStatusParameter, dateOutParameter);
        }
    
        public virtual int SUP2_VehicleStandardImport(string regisPlateNumber, Nullable<int> vehicleTypeID, Nullable<int> employeeID)
        {
            var regisPlateNumberParameter = regisPlateNumber != null ?
                new ObjectParameter("RegisPlateNumber", regisPlateNumber) :
                new ObjectParameter("RegisPlateNumber", typeof(string));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SUP2_VehicleStandardImport", regisPlateNumberParameter, vehicleTypeIDParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<SUP2_WeightGetWIM_Result> SUP2_WeightGetWIM(Nullable<System.Guid> wIMID)
        {
            var wIMIDParameter = wIMID.HasValue ?
                new ObjectParameter("WIMID", wIMID) :
                new ObjectParameter("WIMID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUP2_WeightGetWIM_Result>("SUP2_WeightGetWIM", wIMIDParameter);
        }
    
        public virtual ObjectResult<SUP2_WeightGetWIMDetail_Result> SUP2_WeightGetWIMDetail(Nullable<System.Guid> wIMID)
        {
            var wIMIDParameter = wIMID.HasValue ?
                new ObjectParameter("WIMID", wIMID) :
                new ObjectParameter("WIMID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SUP2_WeightGetWIMDetail_Result>("SUP2_WeightGetWIMDetail", wIMIDParameter);
        }
    
        public virtual int SUP2_WeightGetWIMFromInCheck(Nullable<System.Guid> inCheckSmartCardID, Nullable<System.DateTime> dateIn)
        {
            var inCheckSmartCardIDParameter = inCheckSmartCardID.HasValue ?
                new ObjectParameter("InCheckSmartCardID", inCheckSmartCardID) :
                new ObjectParameter("InCheckSmartCardID", typeof(System.Guid));
    
            var dateInParameter = dateIn.HasValue ?
                new ObjectParameter("DateIn", dateIn) :
                new ObjectParameter("DateIn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SUP2_WeightGetWIMFromInCheck", inCheckSmartCardIDParameter, dateInParameter);
        }
    
        public virtual int SUP2_WeightGetWIMReport(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> vehicleTypeID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SUP2_WeightGetWIMReport", fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, vehicleTypeIDParameter);
        }
    
        public virtual int SUP2_WeightGetWIMReport2(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> vehicleTypeID, Nullable<int> timeCheck)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var timeCheckParameter = timeCheck.HasValue ?
                new ObjectParameter("TimeCheck", timeCheck) :
                new ObjectParameter("TimeCheck", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SUP2_WeightGetWIMReport2", fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, vehicleTypeIDParameter, timeCheckParameter);
        }
    
        public virtual int SUP2_WeightGetWIMReportDetail(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SUP2_WeightGetWIMReportDetail", fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter);
        }
    
        public virtual int SUP2_WeightGetWIMReportDetail2(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> stationID, Nullable<int> shiftID, Nullable<int> timeCheck)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var timeCheckParameter = timeCheck.HasValue ?
                new ObjectParameter("TimeCheck", timeCheck) :
                new ObjectParameter("TimeCheck", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SUP2_WeightGetWIMReportDetail2", fromdateParameter, todateParameter, stationIDParameter, shiftIDParameter, timeCheckParameter);
        }
    
        public virtual int ThongKeDoanhThuTram_1_NgayCaTram(Nullable<System.DateTime> date, Nullable<int> station, Nullable<int> shiftID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ThongKeDoanhThuTram_1_NgayCaTram", dateParameter, stationParameter, shiftIDParameter);
        }
    
        public virtual int ThongKeDoanhThuTram_2_NgayCaTram(Nullable<System.DateTime> date, Nullable<int> station, Nullable<int> shiftID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ThongKeDoanhThuTram_2_NgayCaTram", dateParameter, stationParameter, shiftIDParameter);
        }
    
        public virtual int ThongKeDoanhThuTram_3_NgayCaTram(Nullable<System.DateTime> date, Nullable<int> station, Nullable<int> shiftID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ThongKeDoanhThuTram_3_NgayCaTram", dateParameter, stationParameter, shiftIDParameter);
        }
    
        public virtual int ThongKeDoanhThuTram_4_NgayCaTram(Nullable<System.DateTime> date, Nullable<int> station, Nullable<int> shiftID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ThongKeDoanhThuTram_4_NgayCaTram", dateParameter, stationParameter, shiftIDParameter);
        }
    
        public virtual int ThongKeDoanhThuTram_Thang(Nullable<int> month, Nullable<int> year, Nullable<int> stationID)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ThongKeDoanhThuTram_Thang", monthParameter, yearParameter, stationIDParameter);
        }
    
        public virtual int ThongKeDoanhThuTram_Thang_TrungTam(Nullable<int> month, Nullable<int> year, Nullable<int> stationID)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ThongKeDoanhThuTram_Thang_TrungTam", monthParameter, yearParameter, stationIDParameter);
        }
    
        public virtual int ThongKeDoanhThuTram_TuNgayDenNgay(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> station)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ThongKeDoanhThuTram_TuNgayDenNgay", fromDateParameter, toDateParameter, stationParameter);
        }
    
        public virtual int ThongKeDoanhThuTrungTam_Ngay(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ThongKeDoanhThuTrungTam_Ngay", dateParameter);
        }
    
        public virtual int ThongKeDoanhThuTrungTam_Ngay_GET_OUT(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ThongKeDoanhThuTrungTam_Ngay_GET_OUT", checkTimeParameter, fromDateParameter, toDateParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter);
        }
    
        public virtual int ThongKeDoanhThuTrungTam_Ngay_GET_OUT_1(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ThongKeDoanhThuTrungTam_Ngay_GET_OUT_1", checkTimeParameter, fromDateParameter, toDateParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter);
        }
    
        public virtual int ThongKeDoanhThuTrungTam_Ngay_GET_OUT_OLD(Nullable<int> checkTime, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shiftID, Nullable<int> shiftFirst, Nullable<int> shiftLast, Nullable<int> shiftTime, Nullable<int> shiftT)
        {
            var checkTimeParameter = checkTime.HasValue ?
                new ObjectParameter("CheckTime", checkTime) :
                new ObjectParameter("CheckTime", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftFirstParameter = shiftFirst.HasValue ?
                new ObjectParameter("ShiftFirst", shiftFirst) :
                new ObjectParameter("ShiftFirst", typeof(int));
    
            var shiftLastParameter = shiftLast.HasValue ?
                new ObjectParameter("ShiftLast", shiftLast) :
                new ObjectParameter("ShiftLast", typeof(int));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(int));
    
            var shiftTParameter = shiftT.HasValue ?
                new ObjectParameter("ShiftT", shiftT) :
                new ObjectParameter("ShiftT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ThongKeDoanhThuTrungTam_Ngay_GET_OUT_OLD", checkTimeParameter, fromDateParameter, toDateParameter, shiftIDParameter, shiftFirstParameter, shiftLastParameter, shiftTimeParameter, shiftTParameter);
        }
    
        public virtual int ThongKeDoanhThuTrungTam_Thang(Nullable<int> year, Nullable<int> month)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ThongKeDoanhThuTrungTam_Thang", yearParameter, monthParameter);
        }
    
        public virtual int TK_WIM_Update_Note()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TK_WIM_Update_Note");
        }
    
        public virtual ObjectResult<TKCardSuDung_Result> TKCardSuDung(Nullable<int> month, Nullable<int> year)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TKCardSuDung_Result>("TKCardSuDung", monthParameter, yearParameter);
        }
    
        public virtual int TollWhileListCopyData(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TollWhileListCopyData", fromDateParameter, toDateParameter);
        }
    
        public virtual int UpdateGenerator(string tableName, string tableNameIn, string tableNameOut, ObjectParameter insertStringOutParam)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var tableNameInParameter = tableNameIn != null ?
                new ObjectParameter("tableNameIn", tableNameIn) :
                new ObjectParameter("tableNameIn", typeof(string));
    
            var tableNameOutParameter = tableNameOut != null ?
                new ObjectParameter("tableNameOut", tableNameOut) :
                new ObjectParameter("tableNameOut", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateGenerator", tableNameParameter, tableNameInParameter, tableNameOutParameter, insertStringOutParam);
        }
    }
}
